[
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getAscent",
		"method key":"Ljava/awt/font/GraphicAttribute;.getAscent()F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getDescent",
		"method key":"Ljava/awt/font/GraphicAttribute;.getDescent()F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getAdvance",
		"method key":"Ljava/awt/font/GraphicAttribute;.getAdvance()F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getBounds",
		"method key":"Ljava/awt/font/GraphicAttribute;.getBounds()Ljava/awt/geom/Rectangle2D;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getOutline",
		"method key":"Ljava/awt/font/GraphicAttribute;.getOutline(Ljava/awt/geom/AffineTransform;)Ljava/awt/Shape;",
		"read list":[
			{
				"name":"java.awt.geom.Path2D.SEG_CLOSE",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_QUADTO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.INIT_SIZE",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_CUBICTO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_MOVETO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_LINETO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.WIND_NON_ZERO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.WIND_EVEN_ODD",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.EXPAND_MAX",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"draw",
		"method key":"Ljava/awt/font/GraphicAttribute;.draw(Ljava/awt/Graphics2D;FF)V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GraphicAttribute",
		"method name":"getJustificationInfo",
		"method key":"Ljava/awt/font/GraphicAttribute;.getJustificationInfo()Ljava/awt/font/GlyphJustificationInfo;",
		"read list":[
			{
				"name":"java.awt.font.GlyphJustificationInfo.PRIORITY_NONE",
				"static label":1
			},
			{
				"name":"java.awt.font.GlyphJustificationInfo.PRIORITY_KASHIDA",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	}
]