[
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getFont",
		"method key":"Ljava/awt/font/GlyphVector;.getFont()Ljava/awt/Font;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getFontRenderContext",
		"method key":"Ljava/awt/font/GlyphVector;.getFontRenderContext()Ljava/awt/font/FontRenderContext;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"performDefaultLayout",
		"method key":"Ljava/awt/font/GlyphVector;.performDefaultLayout()V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getNumGlyphs",
		"method key":"Ljava/awt/font/GlyphVector;.getNumGlyphs()I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphCode",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphCode(I)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphCodes",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphCodes(II[I)[I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphCharIndex",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphCharIndex(I)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphCharIndices",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphCharIndices(II[I)[I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getLogicalBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getLogicalBounds()Ljava/awt/geom/Rectangle2D;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getVisualBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getVisualBounds()Ljava/awt/geom/Rectangle2D;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getPixelBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getPixelBounds(Ljava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIF_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			},
			{
				"name":"java.lang.Double.longBitsToDouble",
				"static label":1
			}
		]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getOutline",
		"method key":"Ljava/awt/font/GlyphVector;.getOutline()Ljava/awt/Shape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getOutline",
		"method key":"Ljava/awt/font/GlyphVector;.getOutline(FF)Ljava/awt/Shape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphOutline",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphOutline(I)Ljava/awt/Shape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphOutline",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphOutline(IFF)Ljava/awt/Shape;",
		"read list":[
			{
				"name":"Tx.java.awt.geom.AffineTransform.m00",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m11",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m10",
				"static label":0
			},
			{
				"name":"java.awt.geom.Path2D.SEG_CLOSE",
				"static label":1
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.state",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.type",
				"static label":0
			},
			{
				"name":"java.awt.geom.AffineTransform.APPLY_TRANSLATE",
				"static label":1
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m02",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m01",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m12",
				"static label":0
			},
			{
				"name":"java.awt.geom.AffineTransform.TYPE_IDENTITY",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.WIND_NON_ZERO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.WIND_EVEN_ODD",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.EXPAND_MAX",
				"static label":1
			},
			{
				"name":"AffineTransform.java.awt.geom.AffineTransform.m00",
				"static label":0
			},
			{
				"name":"AffineTransform.java.awt.geom.AffineTransform.m11",
				"static label":0
			},
			{
				"name":"java.awt.geom.Path2D.SEG_QUADTO",
				"static label":1
			},
			{
				"name":"java.awt.geom.AffineTransform.APPLY_IDENTITY",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.INIT_SIZE",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_CUBICTO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_MOVETO",
				"static label":1
			},
			{
				"name":"java.awt.geom.Path2D.SEG_LINETO",
				"static label":1
			},
			{
				"name":"java.awt.geom.AffineTransform.TYPE_TRANSLATION",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"Tx.java.awt.geom.AffineTransform.m00",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m11",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m10",
				"static label":0
			},
			{
				"name":"AffineTransform.java.awt.geom.AffineTransform.m00",
				"static label":0
			},
			{
				"name":"AffineTransform.java.awt.geom.AffineTransform.m11",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.state",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.type",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m02",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m01",
				"static label":0
			},
			{
				"name":"Tx.java.awt.geom.AffineTransform.m12",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphPosition",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphPosition(I)Ljava/awt/geom/Point2D;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"setGlyphPosition",
		"method key":"Ljava/awt/font/GlyphVector;.setGlyphPosition(ILjava/awt/geom/Point2D;)V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphTransform",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphTransform(I)Ljava/awt/geom/AffineTransform;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"setGlyphTransform",
		"method key":"Ljava/awt/font/GlyphVector;.setGlyphTransform(ILjava/awt/geom/AffineTransform;)V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getLayoutFlags",
		"method key":"Ljava/awt/font/GlyphVector;.getLayoutFlags()I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphPositions",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphPositions(II[F)[F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphLogicalBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphLogicalBounds(I)Ljava/awt/Shape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphVisualBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphVisualBounds(I)Ljava/awt/Shape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphPixelBounds",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphPixelBounds(ILjava/awt/font/FontRenderContext;FF)Ljava/awt/Rectangle;",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIF_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			},
			{
				"name":"java.lang.Double.longBitsToDouble",
				"static label":1
			}
		]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphMetrics",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphMetrics(I)Ljava/awt/font/GlyphMetrics;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"getGlyphJustificationInfo",
		"method key":"Ljava/awt/font/GlyphVector;.getGlyphJustificationInfo(I)Ljava/awt/font/GlyphJustificationInfo;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.awt.font.GlyphVector",
		"method name":"equals",
		"method key":"Ljava/awt/font/GlyphVector;.equals(Ljava/awt/font/GlyphVector;)Z",
		"read list":[],
		"write list":[],
		"native method list":[]
	}
]