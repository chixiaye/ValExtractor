[
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"close",
		"method key":"Ljava/util/stream/AbstractPipeline;.close()V",
		"read list":[
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceStage",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceSpliterator",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.sourceCloseAction",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.linkedOrConsumed",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceSupplier",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceSpliterator",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.linkedOrConsumed",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceSupplier",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"onClose",
		"method key":"Ljava/util/stream/AbstractPipeline;.onClose(Ljava/lang/Runnable;)TS;",
		"read list":[
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceStage",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.sourceCloseAction",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"spliterator",
		"method key":"Ljava/util/stream/AbstractPipeline;.spliterator()Ljava/util/Spliterator<TE_OUT;>;",
		"read list":[
			{
				"name":"java.util.stream.AbstractPipeline.sourceOrOpFlags",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.sourceSpliterator",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.parallel",
				"static label":0
			},
			{
				"name":"java.util.stream.StreamOpFlag.IS_SHORT_CIRCUIT",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline.nextStage",
				"static label":0
			},
			{
				"name":"java.util.stream.StreamOpFlag.FLAG_MASK_NOT",
				"static label":1
			},
			{
				"name":"java.util.stream.StreamOpFlag.FLAG_MASK_IS",
				"static label":1
			},
			{
				"name":"java.util.stream.StreamOpFlag.UPSTREAM_TERMINAL_OP_MASK",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline.sourceSupplier",
				"static label":0
			},
			{
				"name":"StreamOpFlag.SHORT_CIRCUIT.java.util.stream.StreamOpFlag.preserve",
				"static label":0
			},
			{
				"name":"StreamOpFlag.SHORT_CIRCUIT.java.util.stream.StreamOpFlag.set",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.combinedFlags",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.sourceStage",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline.sourceAnyStateful",
				"static label":0
			},
			{
				"name":"java.util.stream.StreamOpFlag.SHORT_CIRCUIT",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.combinedFlags",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.MSG_STREAM_LINKED",
				"static label":1
			},
			{
				"name":"java.util.stream.StreamOpFlag.NOT_SIZED",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.linkedOrConsumed",
				"static label":0
			},
			{
				"name":"java.util.stream.StreamOpFlag.IS_SIZED",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.MSG_CONSUMED",
				"static label":1
			},
			{
				"name":"java.util.stream.AbstractPipeline.depth",
				"static label":0
			},
			{
				"name":"java.util.stream.StreamOpFlag.FLAG_MASK",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.combinedFlags",
				"static label":0
			},
			{
				"name":"java.util.stream.AbstractPipeline<E_IN,E_OUT,S>.linkedOrConsumed",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"getOutputShape",
		"method key":"Ljava/util/stream/AbstractPipeline;.getOutputShape()Ljava/util/stream/StreamShape;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"evaluateToNode",
		"method key":"Ljava/util/stream/AbstractPipeline;.evaluateToNode<P_IN:Ljava/lang/Object;>(Ljava/util/stream/PipelineHelper<TE_OUT;>;Ljava/util/Spliterator<TP_IN;>;ZLjava/util/function/IntFunction<[TE_OUT;>;)Ljava/util/stream/Node<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"wrap",
		"method key":"Ljava/util/stream/AbstractPipeline;.wrap<P_IN:Ljava/lang/Object;>(Ljava/util/stream/PipelineHelper<TE_OUT;>;Ljava/util/function/Supplier<Ljava/util/Spliterator<TP_IN;>;>;Z)Ljava/util/Spliterator<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"lazySpliterator",
		"method key":"Ljava/util/stream/AbstractPipeline;.lazySpliterator(Ljava/util/function/Supplier<+Ljava/util/Spliterator<TE_OUT;>;>;)Ljava/util/Spliterator<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"forEachWithCancel",
		"method key":"Ljava/util/stream/AbstractPipeline;.forEachWithCancel(Ljava/util/Spliterator<TE_OUT;>;Ljava/util/stream/Sink<TE_OUT;>;)V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"makeNodeBuilder",
		"method key":"Ljava/util/stream/AbstractPipeline;.makeNodeBuilder(JLjava/util/function/IntFunction<[TE_OUT;>;)Ljava/util/stream/Node$Builder<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"opIsStateful",
		"method key":"Ljava/util/stream/AbstractPipeline;.opIsStateful()Z",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"opWrapSink",
		"method key":"Ljava/util/stream/AbstractPipeline;.opWrapSink(ILjava/util/stream/Sink<TE_OUT;>;)Ljava/util/stream/Sink<TE_IN;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"opEvaluateParallel",
		"method key":"Ljava/util/stream/AbstractPipeline;.opEvaluateParallel<P_IN:Ljava/lang/Object;>(Ljava/util/stream/PipelineHelper<TE_OUT;>;Ljava/util/Spliterator<TP_IN;>;Ljava/util/function/IntFunction<[TE_OUT;>;)Ljava/util/stream/Node<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.stream.AbstractPipeline",
		"method name":"opEvaluateParallelLazy",
		"method key":"Ljava/util/stream/AbstractPipeline;.opEvaluateParallelLazy<P_IN:Ljava/lang/Object;>(Ljava/util/stream/PipelineHelper<TE_OUT;>;Ljava/util/Spliterator<TP_IN;>;)Ljava/util/Spliterator<TE_OUT;>;",
		"read list":[],
		"write list":[],
		"native method list":[]
	}
]