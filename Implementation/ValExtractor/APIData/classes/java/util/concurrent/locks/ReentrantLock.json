[
	{
		"class name":"java.util.concurrent.locks.ReentrantLock.Sync",
		"method name":"lock",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock$Sync;.lock()V",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"lock",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.lock()V",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"lockInterruptibly",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.lockInterruptibly()V|Ljava/lang/InterruptedException;",
		"read list":[
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.tailOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.EXCLUSIVE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.unsafe",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.SIGNAL",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CANCELLED",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"java.util.concurrent.locks.LockSupport.UNSAFE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.nextOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.waitStatusOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.LockSupport.parkBlockerOffset",
				"static label":1
			},
			{
				"name":"node.java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sync.java.util.concurrent.locks.AbstractQueuedSynchronizer.head",
				"static label":0
			}
		],
		"native method list":[
			{
				"name":"java.lang.Thread.isInterrupted",
				"static label":0
			},
			{
				"name":"java.lang.Thread.currentThread",
				"static label":1
			}
		]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"tryLock",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.tryLock()Z",
		"read list":[
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.unsafe",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.stateOffset",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sync.java.util.concurrent.locks.AbstractQueuedSynchronizer.state",
				"static label":0
			},
			{
				"name":"sync.java.util.concurrent.locks.AbstractOwnableSynchronizer.exclusiveOwnerThread",
				"static label":0
			}
		],
		"native method list":[
			{
				"name":"java.lang.Thread.currentThread",
				"static label":1
			}
		]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"tryLock",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.tryLock(JLjava/util/concurrent/TimeUnit;)Z|Ljava/lang/InterruptedException;",
		"read list":[
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.tailOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.EXCLUSIVE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.unsafe",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.SIGNAL",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CANCELLED",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.spinForTimeoutThreshold",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.LockSupport.UNSAFE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.nextOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.waitStatusOffset",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.LockSupport.parkBlockerOffset",
				"static label":1
			},
			{
				"name":"node.java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.prev",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sync.java.util.concurrent.locks.AbstractQueuedSynchronizer.head",
				"static label":0
			}
		],
		"native method list":[
			{
				"name":"java.lang.Thread.isInterrupted",
				"static label":0
			},
			{
				"name":"java.lang.System.nanoTime",
				"static label":1
			},
			{
				"name":"java.lang.Thread.currentThread",
				"static label":1
			}
		]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"unlock",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.unlock()V",
		"read list":[
			{
				"name":"sync.java.util.concurrent.locks.AbstractQueuedSynchronizer.head",
				"static label":0
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.unsafe",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"java.util.concurrent.locks.LockSupport.UNSAFE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.waitStatusOffset",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"newCondition",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.newCondition()Ljava/util/concurrent/locks/Condition;",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"getHoldCount",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.getHoldCount()I",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Thread.currentThread",
				"static label":1
			}
		]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"isHeldByCurrentThread",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.isHeldByCurrentThread()Z",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Thread.currentThread",
				"static label":1
			}
		]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"isLocked",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.isLocked()Z",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"getOwner",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.getOwner()Ljava/lang/Thread;",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"getQueuedThreads",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.getQueuedThreads()Ljava/util/Collection<Ljava/lang/Thread;>;",
		"read list":[
			{
				"name":"java.util.ArrayList<E>.MAX_ARRAY_SIZE",
				"static label":1
			},
			{
				"name":"java.util.ArrayList<E>.EMPTY_ELEMENTDATA[]",
				"static label":1
			},
			{
				"name":"sync.java.util.concurrent.locks.AbstractQueuedSynchronizer.tail",
				"static label":0
			},
			{
				"name":"java.lang.Integer.MAX_VALUE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"java.util.ArrayList<E>.DEFAULT_CAPACITY",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"hasWaiters",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.hasWaiters(Ljava/util/concurrent/locks/Condition;)Z",
		"read list":[
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CONDITION",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"condition.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.firstWaiter",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"getWaitQueueLength",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.getWaitQueueLength(Ljava/util/concurrent/locks/Condition;)I",
		"read list":[
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CONDITION",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"condition.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.firstWaiter",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"getWaitingThreads",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.getWaitingThreads(Ljava/util/concurrent/locks/Condition;)Ljava/util/Collection<Ljava/lang/Thread;>;",
		"read list":[
			{
				"name":"java.util.ArrayList<E>.MAX_ARRAY_SIZE",
				"static label":1
			},
			{
				"name":"java.util.ArrayList<E>.EMPTY_ELEMENTDATA[]",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.AbstractQueuedSynchronizer.Node.CONDITION",
				"static label":1
			},
			{
				"name":"java.lang.Integer.MAX_VALUE",
				"static label":1
			},
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			},
			{
				"name":"condition.java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject.firstWaiter",
				"static label":0
			},
			{
				"name":"java.util.ArrayList<E>.DEFAULT_CAPACITY",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.util.concurrent.locks.ReentrantLock",
		"method name":"toString",
		"method key":"Ljava/util/concurrent/locks/ReentrantLock;.toString()Ljava/lang/String;",
		"read list":[
			{
				"name":"java.util.concurrent.locks.ReentrantLock.sync",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	}
]