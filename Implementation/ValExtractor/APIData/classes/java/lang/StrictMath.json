[
	{
		"class name":"java.lang.StrictMath",
		"method name":"sin",
		"method key":"Ljava/lang/StrictMath;.sin(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"cos",
		"method key":"Ljava/lang/StrictMath;.cos(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"tan",
		"method key":"Ljava/lang/StrictMath;.tan(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"asin",
		"method key":"Ljava/lang/StrictMath;.asin(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"acos",
		"method key":"Ljava/lang/StrictMath;.acos(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"atan",
		"method key":"Ljava/lang/StrictMath;.atan(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"toRadians",
		"method key":"Ljava/lang/StrictMath;.toRadians(D)D",
		"read list":[
			{
				"name":"java.lang.StrictMath.PI",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"toDegrees",
		"method key":"Ljava/lang/StrictMath;.toDegrees(D)D",
		"read list":[
			{
				"name":"java.lang.StrictMath.PI",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"exp",
		"method key":"Ljava/lang/StrictMath;.exp(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"log",
		"method key":"Ljava/lang/StrictMath;.log(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"log10",
		"method key":"Ljava/lang/StrictMath;.log10(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"sqrt",
		"method key":"Ljava/lang/StrictMath;.sqrt(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"cbrt",
		"method key":"Ljava/lang/StrictMath;.cbrt(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"IEEEremainder",
		"method key":"Ljava/lang/StrictMath;.IEEEremainder(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"ceil",
		"method key":"Ljava/lang/StrictMath;.ceil(D)D",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIF_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			},
			{
				"name":"java.lang.Double.longBitsToDouble",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"floor",
		"method key":"Ljava/lang/StrictMath;.floor(D)D",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIF_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			},
			{
				"name":"java.lang.Double.longBitsToDouble",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"rint",
		"method key":"Ljava/lang/StrictMath;.rint(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"atan2",
		"method key":"Ljava/lang/StrictMath;.atan2(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"pow",
		"method key":"Ljava/lang/StrictMath;.pow(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"round",
		"method key":"Ljava/lang/StrictMath;.round(F)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"round",
		"method key":"Ljava/lang/StrictMath;.round(D)J",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIF_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"random",
		"method key":"Ljava/lang/StrictMath;.random()D",
		"read list":[
			{
				"name":"java.util.concurrent.atomic.AtomicLong.valueOffset",
				"static label":1
			},
			{
				"name":"java.lang.StrictMath.RandomNumberGeneratorHolder.randomNumberGenerator",
				"static label":1
			},
			{
				"name":"java.util.Random.multiplier",
				"static label":1
			},
			{
				"name":"seed.java.util.concurrent.atomic.AtomicLong.value",
				"static label":0
			},
			{
				"name":"java.util.Random.DOUBLE_UNIT",
				"static label":1
			},
			{
				"name":"java.util.Random.addend",
				"static label":1
			},
			{
				"name":"java.util.Random.mask",
				"static label":1
			},
			{
				"name":"java.util.concurrent.atomic.AtomicLong.unsafe",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"addExact",
		"method key":"Ljava/lang/StrictMath;.addExact(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"addExact",
		"method key":"Ljava/lang/StrictMath;.addExact(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"subtractExact",
		"method key":"Ljava/lang/StrictMath;.subtractExact(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"subtractExact",
		"method key":"Ljava/lang/StrictMath;.subtractExact(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"multiplyExact",
		"method key":"Ljava/lang/StrictMath;.multiplyExact(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"multiplyExact",
		"method key":"Ljava/lang/StrictMath;.multiplyExact(JJ)J",
		"read list":[
			{
				"name":"java.lang.Long.MIN_VALUE",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"toIntExact",
		"method key":"Ljava/lang/StrictMath;.toIntExact(J)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"floorDiv",
		"method key":"Ljava/lang/StrictMath;.floorDiv(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"floorDiv",
		"method key":"Ljava/lang/StrictMath;.floorDiv(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"floorMod",
		"method key":"Ljava/lang/StrictMath;.floorMod(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"floorMod",
		"method key":"Ljava/lang/StrictMath;.floorMod(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"abs",
		"method key":"Ljava/lang/StrictMath;.abs(I)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"abs",
		"method key":"Ljava/lang/StrictMath;.abs(J)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"abs",
		"method key":"Ljava/lang/StrictMath;.abs(F)F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"abs",
		"method key":"Ljava/lang/StrictMath;.abs(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"max",
		"method key":"Ljava/lang/StrictMath;.max(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"max",
		"method key":"Ljava/lang/StrictMath;.max(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"max",
		"method key":"Ljava/lang/StrictMath;.max(FF)F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"max",
		"method key":"Ljava/lang/StrictMath;.max(DD)D",
		"read list":[
			{
				"name":"java.lang.Math.negativeZeroDoubleBits",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"min",
		"method key":"Ljava/lang/StrictMath;.min(II)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"min",
		"method key":"Ljava/lang/StrictMath;.min(JJ)J",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"min",
		"method key":"Ljava/lang/StrictMath;.min(FF)F",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"min",
		"method key":"Ljava/lang/StrictMath;.min(DD)D",
		"read list":[
			{
				"name":"java.lang.Math.negativeZeroDoubleBits",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"ulp",
		"method key":"Ljava/lang/StrictMath;.ulp(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"ulp",
		"method key":"Ljava/lang/StrictMath;.ulp(F)F",
		"read list":[
			{
				"name":"sun.misc.FloatConsts.MIN_EXPONENT",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.MIN_VALUE",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.MAX_EXPONENT",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.EXP_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"signum",
		"method key":"Ljava/lang/StrictMath;.signum(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"signum",
		"method key":"Ljava/lang/StrictMath;.signum(F)F",
		"read list":[
			{
				"name":"sun.misc.FloatConsts.SIGNIF_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.SIGN_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.EXP_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"sinh",
		"method key":"Ljava/lang/StrictMath;.sinh(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"cosh",
		"method key":"Ljava/lang/StrictMath;.cosh(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"tanh",
		"method key":"Ljava/lang/StrictMath;.tanh(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"hypot",
		"method key":"Ljava/lang/StrictMath;.hypot(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"expm1",
		"method key":"Ljava/lang/StrictMath;.expm1(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"log1p",
		"method key":"Ljava/lang/StrictMath;.log1p(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"copySign",
		"method key":"Ljava/lang/StrictMath;.copySign(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"copySign",
		"method key":"Ljava/lang/StrictMath;.copySign(FF)F",
		"read list":[
			{
				"name":"sun.misc.FloatConsts.SIGNIF_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.SIGN_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.EXP_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"getExponent",
		"method key":"Ljava/lang/StrictMath;.getExponent(F)I",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"getExponent",
		"method key":"Ljava/lang/StrictMath;.getExponent(D)I",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.doubleToRawLongBits",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextAfter",
		"method key":"Ljava/lang/StrictMath;.nextAfter(DD)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextAfter",
		"method key":"Ljava/lang/StrictMath;.nextAfter(FD)F",
		"read list":[
			{
				"name":"sun.misc.FloatConsts.SIGN_BIT_MASK",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.floatToRawIntBits",
				"static label":1
			},
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextUp",
		"method key":"Ljava/lang/StrictMath;.nextUp(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextUp",
		"method key":"Ljava/lang/StrictMath;.nextUp(F)F",
		"read list":[
			{
				"name":"sun.misc.FloatConsts.POSITIVE_INFINITY",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextDown",
		"method key":"Ljava/lang/StrictMath;.nextDown(D)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"nextDown",
		"method key":"Ljava/lang/StrictMath;.nextDown(F)F",
		"read list":[
			{
				"name":"java.lang.Float.NEGATIVE_INFINITY",
				"static label":1
			},
			{
				"name":"java.lang.Float.MIN_VALUE",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Float.intBitsToFloat",
				"static label":1
			}
		]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"scalb",
		"method key":"Ljava/lang/StrictMath;.scalb(DI)D",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"java.lang.StrictMath",
		"method name":"scalb",
		"method key":"Ljava/lang/StrictMath;.scalb(FI)F",
		"read list":[
			{
				"name":"sun.misc.DoubleConsts.EXP_BIAS",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.MIN_EXPONENT",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.MAX_EXPONENT",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.EXP_BIT_MASK",
				"static label":1
			},
			{
				"name":"sun.misc.FloatConsts.SIGNIFICAND_WIDTH",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.MAX_EXPONENT",
				"static label":1
			},
			{
				"name":"sun.misc.DoubleConsts.MIN_EXPONENT",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[
			{
				"name":"java.lang.Double.longBitsToDouble",
				"static label":1
			}
		]
	}
]