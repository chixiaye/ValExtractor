[
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"getIncrement",
		"method key":"Lsun/tools/tree/AssignOpExpression;.getIncrement()I",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.IDENT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.NOINC",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"checkValue",
		"method key":"Lsun/tools/tree/AssignOpExpression;.checkValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;)Lsun/tools/tree/Vset;",
		"read list":[
			{
				"name":"sun.tools.java.Constants.TM_INTEGER",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_DOUBLE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGLSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_ERROR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_BOOLEAN",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGBITXOR",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tDouble",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TM_FLOAT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tVoid",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.itype",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGDIV",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tBoolean",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tInt",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGBITAND",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGMUL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_ERROR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tLong",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_LONG",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGREM",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tFloat",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tString",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGBITOR",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGURSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.ASGRSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tError",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.itype",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"inlineValue",
		"method key":"Lsun/tools/tree/AssignOpExpression;.inlineValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"copyInline",
		"method key":"Lsun/tools/tree/AssignOpExpression;.copyInline(Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"costInline",
		"method key":"Lsun/tools/tree/AssignOpExpression;.costInline(ILsun/tools/java/Environment;Lsun/tools/tree/Context;)I",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.IDENT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.NOINC",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"code",
		"method key":"Lsun/tools/tree/AssignOpExpression;.code(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;Z)V",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.IDENT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.NOINC",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_iinc",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.itype",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"codeValue",
		"method key":"Lsun/tools/tree/AssignOpExpression;.codeValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.IDENT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.NOINC",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_iinc",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.itype",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"code",
		"method key":"Lsun/tools/tree/AssignOpExpression;.code(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.IDENT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.NOINC",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGADD",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.updater",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_iinc",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ASGSUB",
				"static label":1
			},
			{
				"name":"sun.tools.tree.AssignOpExpression.itype",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.AssignOpExpression",
		"method name":"print",
		"method key":"Lsun/tools/tree/AssignOpExpression;.print(Ljava/io/PrintStream;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	}
]