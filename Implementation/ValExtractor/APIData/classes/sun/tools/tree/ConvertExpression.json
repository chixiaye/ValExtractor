[
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"checkValue",
		"method key":"Lsun/tools/tree/ConvertExpression;.checkValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;)Lsun/tools/tree/Vset;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"simplify",
		"method key":"Lsun/tools/tree/ConvertExpression;.simplify()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.java.Constants.CHARVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_INT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.SHORTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LONGVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_CHAR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_FLOAT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_BYTE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TC_DOUBLE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.FLOATVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.DOUBLEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_LONG",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_SHORT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BYTEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"equals",
		"method key":"Lsun/tools/tree/ConvertExpression;.equals(I)Z",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"equals",
		"method key":"Lsun/tools/tree/ConvertExpression;.equals(Z)Z",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"inline",
		"method key":"Lsun/tools/tree/ConvertExpression;.inline(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TM_REFERENCE",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"codeValue",
		"method key":"Lsun/tools/tree/ConvertExpression;.codeValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConvertExpression",
		"method name":"print",
		"method key":"Lsun/tools/tree/ConvertExpression;.print(Ljava/io/PrintStream;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	}
]