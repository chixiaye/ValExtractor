[
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"selectType",
		"method key":"Lsun/tools/tree/NotExpression;.selectType(Lsun/tools/java/Environment;Lsun/tools/tree/Context;I)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tBoolean",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"checkCondition",
		"method key":"Lsun/tools/tree/NotExpression;.checkCondition(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;Lsun/tools/tree/ConditionVars;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tBoolean",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/NotExpression;.eval(Z)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"simplify",
		"method key":"Lsun/tools/tree/NotExpression;.simplify()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.java.Constants.GT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.EQ",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.NOT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.GE",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.NE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_REAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"codeBranch",
		"method key":"Lsun/tools/tree/NotExpression;.codeBranch(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;Lsun/tools/asm/Label;Z)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.NotExpression",
		"method name":"codeValue",
		"method key":"Lsun/tools/tree/NotExpression;.codeValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.java.RuntimeConstants.opc_ixor",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_ldc",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	}
]