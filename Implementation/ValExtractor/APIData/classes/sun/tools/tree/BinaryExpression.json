[
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"order",
		"method key":"Lsun/tools/tree/BinaryExpression;.order()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"checkValue",
		"method key":"Lsun/tools/tree/BinaryExpression;.checkValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;)Lsun/tools/tree/Vset;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_ERROR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_ERROR",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"isConstant",
		"method key":"Lsun/tools/tree/BinaryExpression;.isConstant()Z",
		"read list":[
			{
				"name":"sun.tools.java.Constants.GT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.EQ",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.AND",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.DIV",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.NE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.RSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.LSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.GE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.MUL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.REM",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.OR",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.ADD",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.URSHIFT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BITOR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BITXOR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BITAND",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.SUB",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(II)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(JJ)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(FF)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(DD)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(ZZ)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval(Ljava/lang/String;Ljava/lang/String;)Lsun/tools/tree/Expression;",
		"read list":[],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"eval",
		"method key":"Lsun/tools/tree/BinaryExpression;.eval()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.CHARVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BYTEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.SHORTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LONGVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.STRINGVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.FLOATVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.DOUBLEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BOOLEANVAL",
				"static label":1
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"inline",
		"method key":"Lsun/tools/tree/BinaryExpression;.inline(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"inlineValue",
		"method key":"Lsun/tools/tree/BinaryExpression;.inlineValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.CHARVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.INTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BYTEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.SHORTVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.LONGVAL",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.STRINGVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.FLOATVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.DOUBLEVAL",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.BOOLEANVAL",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"copyInline",
		"method key":"Lsun/tools/tree/BinaryExpression;.copyInline(Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"costInline",
		"method key":"Lsun/tools/tree/BinaryExpression;.costInline(ILsun/tools/java/Environment;Lsun/tools/tree/Context;)I",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"codeOperation",
		"method key":"Lsun/tools/tree/BinaryExpression;.codeOperation(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"codeValue",
		"method key":"Lsun/tools/tree/BinaryExpression;.codeValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_goto",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TC_BOOLEAN",
				"static label":1
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_ldc",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.BinaryExpression",
		"method name":"print",
		"method key":"Lsun/tools/tree/BinaryExpression;.print(Ljava/io/PrintStream;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	}
]