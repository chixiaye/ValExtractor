[
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"order",
		"method key":"Lsun/tools/tree/ConditionalExpression;.order()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"checkValue",
		"method key":"Lsun/tools/tree/ConditionalExpression;.checkValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;)Lsun/tools/tree/Vset;",
		"read list":[
			{
				"name":"sun.tools.java.Type.tInt",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_DOUBLE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_REFERENCE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tChar",
				"static label":1
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TM_CHAR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_ERROR",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tLong",
				"static label":1
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.TM_LONG",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_SHORT",
				"static label":1
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tFloat",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tDouble",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_FLOAT",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tShort",
				"static label":1
			},
			{
				"name":"sun.tools.java.Constants.TM_BYTE",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tByte",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tBoolean",
				"static label":1
			},
			{
				"name":"sun.tools.java.Type.tError",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Expression.type",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"check",
		"method key":"Lsun/tools/tree/ConditionalExpression;.check(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/tree/Vset;Ljava/util/Hashtable;)Lsun/tools/tree/Vset;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			},
			{
				"name":"sun.tools.java.Type.tBoolean",
				"static label":1
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"isConstant",
		"method key":"Lsun/tools/tree/ConditionalExpression;.isConstant()Z",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"simplify",
		"method key":"Lsun/tools/tree/ConditionalExpression;.simplify()Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"inline",
		"method key":"Lsun/tools/tree/ConditionalExpression;.inline(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"inlineValue",
		"method key":"Lsun/tools/tree/ConditionalExpression;.inlineValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"costInline",
		"method key":"Lsun/tools/tree/ConditionalExpression;.costInline(ILsun/tools/java/Environment;Lsun/tools/tree/Context;)I",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"copyInline",
		"method key":"Lsun/tools/tree/ConditionalExpression;.copyInline(Lsun/tools/tree/Context;)Lsun/tools/tree/Expression;",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"codeValue",
		"method key":"Lsun/tools/tree/ConditionalExpression;.codeValue(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_goto",
				"static label":1
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"code",
		"method key":"Lsun/tools/tree/ConditionalExpression;.code(Lsun/tools/java/Environment;Lsun/tools/tree/Context;Lsun/tools/asm/Assembler;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.where",
				"static label":0
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.java.RuntimeConstants.opc_goto",
				"static label":1
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	},
	{
		"class name":"sun.tools.tree.ConditionalExpression",
		"method name":"print",
		"method key":"Lsun/tools/tree/ConditionalExpression;.print(Ljava/io/PrintStream;)V",
		"read list":[
			{
				"name":"sun.tools.tree.UnaryExpression.right",
				"static label":0
			},
			{
				"name":"sun.tools.java.Constants.opNames[]",
				"static label":1
			},
			{
				"name":"sun.tools.tree.BinaryExpression.left",
				"static label":0
			},
			{
				"name":"sun.tools.tree.Node.op",
				"static label":0
			},
			{
				"name":"sun.tools.tree.ConditionalExpression.cond",
				"static label":0
			}
		],
		"write list":[],
		"native method list":[]
	}
]