[
	{
		"name":"Ljava/lang/Math;.random()D", 
		"comment":"",
		"label":1
	},
	{
		"name":"Ljava/util/Random;.nextFloat()F", 
		"comment":"",
		"label":1
	},
	{
		"name":"Ljava/util/Random;.nextDouble()D", 
		"comment":"",
		"label":1
	},
	{
		"name":"Ljava/util/Random;.nextInt(I)I", 
		"comment":"",
		"label":1
	},
	{
		"name":"Ljava/util/ArrayList;.iterator()Ljava/util/Iterator<TE;>;", 
		"comment":"",
		"label":1
	},
	{
		"name":"java.util.Iterator.Ljava/util/Iterator;.remove()V", 
		"comment":"",
		"label":1
	},
	{
		"name":"Ljava/io/ObjectInputStream;.readObject()Ljava/lang/Object;|Ljava/io/IOException;|Ljava/lang/ClassNotFoundException;", 
		"comment":"",
		"label":1
	},
	{
		"name":"java.util.Iterator.Ljava/util/Iterator;.next()TE;", 
		"comment":"",
		"label":1
	},
	{
		"name":"com.sun.demo.jvmti.hprof.Tracker.nativeObjectInit",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.demo.jvmti.hprof.Tracker.nativeNewArray",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.demo.jvmti.hprof.Tracker.nativeCallSite",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.demo.jvmti.hprof.Tracker.nativeReturnSite",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.initReaderIDs",
		"comment":"/** \n * Sets up static C structures. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.initJPEGImageReader",
		"comment":"/** \n * Sets up per-reader C structure and returns a pointer to it. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.setSource",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.readImageHeader",
		"comment":"/** \n * Read in the header information starting from the current stream position, returning <code>true</code> if the header was a tables-only image.  After this call, the native IJG decompression struct will contain the image information required by most query calls below (e.g. getWidth, getHeight, etc.), if the header was not a tables-only image. If reset is <code>true</code>, the state of the IJG object is reset so that it can read a header again. This happens automatically if the header was a tables-only image.\n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.setOutColorSpace",
		"comment":"/** \n * Set the IJG output space to the given value.  The library will perform the appropriate colorspace conversions.\n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.readImage",
		"comment":"/** \n * Returns <code>true</code> if the read was aborted.\n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.abortRead",
		"comment":"/** \n * Set the C level abort flag. Keep it atomic for thread safety. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.resetLibraryState",
		"comment":"/** \n * Resets library state when an exception occurred during a read. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.resetReader",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageReader.disposeReader",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.initWriterIDs",
		"comment":"/** \n * Sets up static native structures. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.initJPEGImageWriter",
		"comment":"/** \n * Sets up per-writer native structure and returns a pointer to it. \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.setDest",
		"comment":"/** \n * Sets up native structures for output stream \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeImage",
		"comment":"/** \n * Returns <code>true</code> if the write was aborted.\n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.writeTables",
		"comment":"/** \n * Write out a tables-only image to the stream.\n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.abortWrite",
		"comment":"/** \n * Aborts the current write in the native code \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.resetWriter",
		"comment":"/** \n * Resets native structures \n */\n",
		"label":0
	},
	{
		"name":"com.sun.imageio.plugins.jpeg.JPEGImageWriter.disposeWriter",
		"comment":"/** \n * Releases native structures \n */\n",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_arrow",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_box",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_box_gap",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_check",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_expander",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_extension",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_flat_box",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_focus",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_handle",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_hline",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_option",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_shadow",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_slider",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_vline",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_paint_background",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_get_gtk_setting",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.nativeSetRangeValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.nativeStartPainting",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.nativeFinishPainting",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKEngine.native_switch_theme",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKStyle.nativeGetXThickness",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKStyle.nativeGetYThickness",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKStyle.nativeGetColorForState",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKStyle.nativeGetClassValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.swing.plaf.gtk.GTKStyle.nativeGetPangoFontName",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.start",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.getNextFile",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.getUnusedInput",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.finish",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.setOption",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.java.util.jar.pack.NativeUnpack.getOption",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nGetFormats",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nOpen",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nStart",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nStop",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nClose",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nWrite",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nRead",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nGetBufferSize",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nIsStillDraining",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nFlush",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nAvailable",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nGetBytePosition",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nSetBytePosition",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nRequiresServicing",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDevice.nService",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDeviceProvider.nGetNumDevices",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.DirectAudioDeviceProvider.nNewDirectAudioDeviceInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nOpen",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nClose",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nStart",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nStop",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nGetTimeStamp",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDevice.nGetMessages",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDeviceProvider.nGetNumDevices",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDeviceProvider.nGetName",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDeviceProvider.nGetVendor",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDeviceProvider.nGetDescription",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiInDeviceProvider.nGetVersion",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDevice.nOpen",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDevice.nClose",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDevice.nSendShortMessage",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDevice.nSendLongMessage",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDevice.nGetTimeStamp",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDeviceProvider.nGetNumDevices",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDeviceProvider.nGetName",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDeviceProvider.nGetVendor",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDeviceProvider.nGetDescription",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.MidiOutDeviceProvider.nGetVersion",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.Platform.nIsBigEndian",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.Platform.nIsSigned8",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.Platform.nGetExtraLibraries",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.Platform.nGetLibraryForFeature",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nOpen",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nClose",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nGetPortCount",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nGetPortType",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nGetPortName",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nGetControls",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nControlSetIntValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nControlGetIntValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nControlSetFloatValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixer.nControlGetFloatValue",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixerProvider.nGetNumDevices",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.media.sound.PortMixerProvider.nNewPortMixerInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.security.auth.module.NTSystem.getCurrent",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.security.auth.module.NTSystem.getImpersonationToken0",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.security.auth.module.SolarisSystem.getSolarisInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"com.sun.security.auth.module.UnixSystem.getUnixInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.AWTEvent.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.AWTEvent.nativeSetSource",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.Button.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Checkbox.initIDs",
		"comment":"/** \n * Initialize JNI field and method ids\n */\n",
		"label":0
	},
	{
		"name":"java.awt.CheckboxMenuItem.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Choice.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Color.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Component.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Container.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be called from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Cursor.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Cursor.finalizeImpl",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.Dialog.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Dimension.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.event.InputEvent.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.event.KeyEvent.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.event.MouseEvent.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Event.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.FileDialog.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Font.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.FontMetrics.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Frame.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.image.BufferedImage.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.ColorModel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.ComponentSampleModel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.IndexColorModel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.Kernel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.Raster.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.SampleModel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.image.SinglePixelPackedSampleModel.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.Insets.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.KeyboardFocusManager.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Label.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Menu.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.MenuBar.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.MenuComponent.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.MenuItem.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Rectangle.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Scrollbar.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.ScrollPane.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"java.awt.ScrollPaneAdjustable.initIDs",
		"comment":"/** \n * Initialize JNI field and method ids.\n */\n",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._update",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._isVisible",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._getBounds",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._getInstance",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._close",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._getImageFileName",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._getImageJarName",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.SplashScreen._setImageData",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.TextArea.initIDs",
		"comment":"/** \n * Initialize JNI field and method ids\n */\n",
		"label":0
	},
	{
		"name":"java.awt.TextField.initIDs",
		"comment":"/** \n * Initialize JNI field and method ids\n */\n",
		"label":0
	},
	{
		"name":"java.awt.Toolkit.initIDs",
		"comment":"/** \n * Initialize JNI field and method ids\n */\n",
		"label":0
	},
	{
		"name":"java.awt.TrayIcon.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.awt.Window.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs for fields that may be accessed from C.\n */\n",
		"label":0
	},
	{
		"name":"java.io.Console.encoding",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.Console.echo",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.Console.istty",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.open",
		"comment":"/** \n * Opens the specified file for reading.\n * @param name the name of the file\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.read",
		"comment":"/** \n * Reads a byte of data from this input stream. This method blocks if no input is yet available.\n * @return     the next byte of data, or <code>-1</code> if the end of thefile is reached.\n * @exception IOException  if an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.readBytes",
		"comment":"/** \n * Reads a subarray as a sequence of bytes.\n * @param b the data to be written\n * @param off the start offset in the data\n * @param len the number of bytes that are written\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.skip",
		"comment":"/** \n * Skips over and discards <code>n</code> bytes of data from the input stream. <p>The <code>skip</code> method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly <code>0</code>. If <code>n</code> is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an <code>IOException</code> is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value. <p>This method may skip more bytes than what are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.\n * @param n   the number of bytes to be skipped.\n * @return     the actual number of bytes skipped.\n * @exception IOException  if n is negative, if the stream does notsupport seek, or if an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.available",
		"comment":"/** \n * Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. Returns 0 when the file position is beyond EOF. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. <p> In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.\n * @return     an estimate of the number of remaining bytes that can be read(or skipped over) from this input stream without blocking.\n * @exception IOException  if this file input stream has been closed by calling{@code close} or an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.FileInputStream.close0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.FileOutputStream.open",
		"comment":"/** \n * Opens a file, with the specified name, for overwriting or appending.\n * @param name name of file to be opened\n * @param append whether the file is to be opened in append mode\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileOutputStream.write",
		"comment":"/** \n * Writes the specified byte to this file output stream.\n * @param b   the byte to be written.\n * @param append   {@code true} if the write operation firstadvances the position to the end of file\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileOutputStream.writeBytes",
		"comment":"/** \n * Writes a sub array as a sequence of bytes.\n * @param b the data to be written\n * @param off the start offset in the data\n * @param len the number of bytes that are written\n * @param append {@code true} to first advance the position to theend of file\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.io.FileOutputStream.close0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.FileOutputStream.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.ObjectInputStream.bytesToFloats",
		"comment":"/** \n * Converts specified span of bytes into float values.\n */\n",
		"label":0
	},
	{
		"name":"java.io.ObjectInputStream.bytesToDoubles",
		"comment":"/** \n * Converts specified span of bytes into double values.\n */\n",
		"label":0
	},
	{
		"name":"java.io.ObjectOutputStream.floatsToBytes",
		"comment":"/** \n * Converts specified span of float values into byte values.\n */\n",
		"label":0
	},
	{
		"name":"java.io.ObjectOutputStream.doublesToBytes",
		"comment":"/** \n * Converts specified span of double values into byte values.\n */\n",
		"label":0
	},
	{
		"name":"java.io.ObjectStreamClass.initNative",
		"comment":"/** \n * Initializes native code.\n */\n",
		"label":0
	},
	{
		"name":"java.io.ObjectStreamClass.hasStaticInitializer",
		"comment":"/** \n * Returns true if the given class defines a static initializer method, false otherwise.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.open",
		"comment":"/** \n * Opens a file and returns the file descriptor.  The file is opened in read-write mode if the O_RDWR bit in  {@code mode}is true, else the file is opened as read-only. If the  {@code name} refers to a directory, an IOExceptionis thrown.\n * @param name the name of the file\n * @param mode the mode flags, a combination of the O_ constantsdefined above\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.read",
		"comment":"/** \n * Reads a byte of data from this file. The byte is returned as an integer in the range 0 to 255 ( {@code 0x00-0x0ff}). This method blocks if no input is yet available. <p> Although  {@code RandomAccessFile} is not a subclass of{@code InputStream}, this method behaves in exactly the same way as the  {@link InputStream#read()} method of{@code InputStream}.\n * @return     the next byte of data, or {@code -1} if the end of thefile has been reached.\n * @exception IOException  if an I/O error occurs. Not thrown ifend-of-file has been reached.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.readBytes",
		"comment":"/** \n * Reads a sub array as a sequence of bytes.\n * @param b the buffer into which the data is read.\n * @param off the start offset of the data.\n * @param len the number of bytes to read.\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.write",
		"comment":"/** \n * Writes the specified byte to this file. The write starts at the current file pointer.\n * @param b   the {@code byte} to be written.\n * @exception IOException  if an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.writeBytes",
		"comment":"/** \n * Writes a sub array as a sequence of bytes.\n * @param b the data to be written\n * @param off the start offset in the data\n * @param len the number of bytes that are written\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.getFilePointer",
		"comment":"/** \n * Returns the current offset in this file.\n * @return     the offset from the beginning of the file, in bytes,at which the next read or write occurs.\n * @exception IOException  if an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.seek0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.length",
		"comment":"/** \n * Returns the length of this file.\n * @return     the length of this file, measured in bytes.\n * @exception IOException  if an I/O error occurs.\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.setLength",
		"comment":"/** \n * Sets the length of this file. <p> If the present length of the file as returned by the {@code length} method is greater than the {@code newLength}argument then the file will be truncated.  In this case, if the file offset as returned by the  {@code getFilePointer} method is greaterthan  {@code newLength} then after this method returns the offsetwill be equal to  {@code newLength}. <p> If the present length of the file as returned by the {@code length} method is smaller than the {@code newLength}argument then the file will be extended.  In this case, the contents of the extended portion of the file are not defined.\n * @param newLength    The desired length of the file\n * @exception IOException  If an I/O error occurs\n * @since      1.2\n */\n",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.io.RandomAccessFile.close0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.forName0",
		"comment":"/** \n * Called after security checks have been made. \n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.isInstance",
		"comment":"/** \n * Determines if the specified  {@code Object} is assignment-compatiblewith the object represented by this  {@code Class}.  This method is the dynamic equivalent of the Java language  {@code instanceof}operator. The method returns  {@code true} if the specified{@code Object} argument is non-null and can be cast to thereference type represented by this  {@code Class} object withoutraising a  {@code ClassCastException.} It returns {@code false}otherwise. <p> Specifically, if this  {@code Class} object represents adeclared class, this method returns  {@code true} if the specified{@code Object} argument is an instance of the represented class (orof any of its subclasses); it returns  {@code false} otherwise. Ifthis  {@code Class} object represents an array class, this methodreturns  {@code true} if the specified {@code Object} argumentcan be converted to an object of the array class by an identity conversion or by a widening reference conversion; it returns {@code false} otherwise. If this {@code Class} objectrepresents an interface, this method returns  {@code true} if theclass or any superclass of the specified  {@code Object} argumentimplements this interface; it returns  {@code false} otherwise. Ifthis  {@code Class} object represents a primitive type, this methodreturns  {@code false}.\n * @param obj the object to check\n * @return  true if {@code obj} is an instance of this class\n * @since JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.isAssignableFrom",
		"comment":"/** \n * Determines if the class or interface represented by this {@code Class} object is either the same as, or is a superclass orsuperinterface of, the class or interface represented by the specified {@code Class} parameter. It returns {@code true} if so;otherwise it returns  {@code false}. If this  {@code Class}object represents a primitive type, this method returns {@code true} if the specified {@code Class} parameter isexactly this  {@code Class} object; otherwise it returns{@code false}. <p> Specifically, this method tests whether the type represented by the specified  {@code Class} parameter can be converted to the typerepresented by this  {@code Class} object via an identity conversionor via a widening reference conversion. See <em>The Java Language Specification</em>, sections 5.1.1 and 5.1.4 , for details.\n * @param cls the {@code Class} object to be checked\n * @return the {@code boolean} value indicating whether objects of thetype  {@code cls} can be assigned to objects of this class\n * @exception NullPointerException if the specified Class parameter isnull.\n * @since JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.isInterface",
		"comment":"/** \n * Determines if the specified  {@code Class} object represents aninterface type.\n * @return  {@code true} if this object represents an interface;{@code false} otherwise.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.isArray",
		"comment":"/** \n * Determines if this  {@code Class} object represents an array class.\n * @return  {@code true} if this object represents an array class;{@code false} otherwise.\n * @since   JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.isPrimitive",
		"comment":"/** \n * Determines if the specified  {@code Class} object represents aprimitive type. <p> There are nine predefined  {@code Class} objects to representthe eight primitive types and void.  These are created by the Java Virtual Machine, and have the same names as the primitive types that they represent, namely  {@code boolean},  {@code byte}, {@code char},  {@code short},  {@code int}, {@code long},  {@code float}, and  {@code double}. <p> These objects may only be accessed via the following public static final variables, and are the only  {@code Class} objects for whichthis method returns  {@code true}.\n * @return true if and only if this class represents a primitive type\n * @see java.lang.Boolean#TYPE\n * @see java.lang.Character#TYPE\n * @see java.lang.Byte#TYPE\n * @see java.lang.Short#TYPE\n * @see java.lang.Integer#TYPE\n * @see java.lang.Long#TYPE\n * @see java.lang.Float#TYPE\n * @see java.lang.Double#TYPE\n * @see java.lang.Void#TYPE\n * @since JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getName0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getClassLoader0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getSuperclass",
		"comment":"/** \n * Returns the  {@code Class} representing the superclass of the entity(class, interface, primitive type or void) represented by this {@code Class}.  If this  {@code Class} represents either the{@code Object} class, an interface, a primitive type, or void, thennull is returned.  If this object represents an array class then the {@code Class} object representing the {@code Object} class isreturned.\n * @return the superclass of the class represented by this object.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getInterfaces0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getComponentType",
		"comment":"/** \n * Returns the  {@code Class} representing the component type of anarray.  If this class does not represent an array class this method returns null.\n * @return the {@code Class} representing the component type of thisclass if this class is an array\n * @see java.lang.reflect.Array\n * @since JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getModifiers",
		"comment":"/** \n * Returns the Java language modifiers for this class or interface, encoded in an integer. The modifiers consist of the Java Virtual Machine's constants for  {@code public},  {@code protected}, {@code private},  {@code final},  {@code static}, {@code abstract} and {@code interface}; they should be decoded using the methods of class  {@code Modifier}. <p> If the underlying class is an array class, then its {@code public},  {@code private} and {@code protected}modifiers are the same as those of its component type.  If this {@code Class} represents a primitive type or void, its{@code public} modifier is always {@code true}, and its {@code protected} and {@code private} modifiers are always{@code false}. If this object represents an array class, a primitive type or void, then its  {@code final} modifier is always{@code true} and its interface modifier is always{@code false}. The values of its other modifiers are not determined by this specification. <p> The modifier encodings are defined in <em>The Java Virtual Machine Specification</em>, table 4.1.\n * @return the {@code int} representing the modifiers for this class\n * @see java.lang.reflect.Modifier\n * @since JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getSigners",
		"comment":"/** \n * Gets the signers of this class.\n * @return  the signers of this class, or null if there are no signers.  Inparticular, this method returns null if this object represents a primitive type or void.\n * @since   JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.setSigners",
		"comment":"/** \n * Set the signers of this class.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getEnclosingMethod0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getDeclaringClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getProtectionDomain0",
		"comment":"/** \n * Returns the ProtectionDomain of this class.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Class.getPrimitiveClass",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getGenericSignature0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getRawAnnotations",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getRawTypeAnnotations",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getConstantPool",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getDeclaredFields0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getDeclaredMethods0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getDeclaredConstructors0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.getDeclaredClasses0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Class.desiredAssertionStatus0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.defineClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.defineClass1",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.defineClass2",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.resolveClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.findBootstrapClass",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.findLoadedClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.NativeLibrary.load",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.NativeLibrary.find",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.NativeLibrary.unload",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.NativeLibrary.findBuiltinLib",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.ClassLoader.retrieveDirectives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Compiler.initialize",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Compiler.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Compiler.compileClass",
		"comment":"/** \n * Compiles the specified class.\n * @param clazz A class\n * @return  {@code true} if the compilation succeeded; {@code false} if thecompilation failed or no compiler is available\n * @throws NullPointerException If  {@code clazz} is {@code null}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Compiler.compileClasses",
		"comment":"/** \n * Compiles all classes whose name matches the specified string.\n * @param string The name of the classes to compile\n * @return  {@code true} if the compilation succeeded; {@code false} if thecompilation failed or no compiler is available\n * @throws NullPointerException If  {@code string} is {@code null}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Compiler.command",
		"comment":"/** \n * Examines the argument type and its fields and perform some documented operation.  No specific operations are required.\n * @param any An argument\n * @return  A compiler-specific value, or {@code null} if no compiler isavailable\n * @throws NullPointerException If  {@code any} is {@code null}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Compiler.enable",
		"comment":"/** \n * Cause the Compiler to resume operation.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Compiler.disable",
		"comment":"/** \n * Cause the Compiler to cease operation.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Double.doubleToRawLongBits",
		"comment":"/** \n * Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"double format\" bit layout, preserving Not-a-Number (NaN) values. <p>Bit 63 (the bit that is selected by the mask {@code 0x8000000000000000L}) represents the sign of the floating-point number. Bits 62-52 (the bits that are selected by the mask {@code 0x7ff0000000000000L}) represent the exponent. Bits 51-0 (the bits that are selected by the mask {@code 0x000fffffffffffffL}) represent the significand (sometimes called the mantissa) of the floating-point number. <p>If the argument is positive infinity, the result is {@code 0x7ff0000000000000L}. <p>If the argument is negative infinity, the result is {@code 0xfff0000000000000L}. <p>If the argument is NaN, the result is the  {@code long}integer representing the actual NaN value.  Unlike the {@code doubleToLongBits} method,{@code doubleToRawLongBits} does not collapse all the bitpatterns encoding a NaN to a single \"canonical\" NaN value. <p>In all cases, the result is a  {@code long} integer that,when given to the  {@link #longBitsToDouble(long)} method, willproduce a floating-point value the same as the argument to {@code doubleToRawLongBits}.\n * @param value   a {@code double} precision floating-point number.\n * @return the bits that represent the floating-point number.\n * @since 1.3\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Double.longBitsToDouble",
		"comment":"/** \n * Returns the  {@code double} value corresponding to a givenbit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"double format\" bit layout. <p>If the argument is  {@code 0x7ff0000000000000L}, the result is positive infinity. <p>If the argument is  {@code 0xfff0000000000000L}, the result is negative infinity. <p>If the argument is any value in the range {@code 0x7ff0000000000001L} through{@code 0x7fffffffffffffffL} or in the range{@code 0xfff0000000000001L} through{@code 0xffffffffffffffffL}, the result is a NaN.  No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns.  Distinct values of NaN are only distinguishable by use of the  {@code Double.doubleToRawLongBits} method.<p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three values that can be computed from the argument: <blockquote><pre> {@code int s = ((bits >> 63) == 0) ? 1 : -1; int e = (int)((bits >> 52) & 0x7ffL); long m = (e == 0) ? (bits & 0xfffffffffffffL) << 1 : (bits & 0xfffffffffffffL) | 0x10000000000000L;}</pre></blockquote> Then the floating-point result equals the value of the mathematical expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-1075</sup>. <p>Note that this method may not be able to return a {@code double} NaN with exactly same bit pattern as the{@code long} argument.  IEEE 754 distinguishes between twokinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The differences between the two kinds of NaN are generally not visible in Java.  Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern.  However, on some processors merely copying a signaling NaN also performs that conversion.  In particular, copying a signaling NaN to return it to the calling method may perform this conversion.  So  {@code longBitsToDouble}may not be able to return a  {@code double} with asignaling NaN bit pattern.  Consequently, for some {@code long} values,{@code doubleToRawLongBits(longBitsToDouble(start))} may<i>not</i> equal  {@code start}.  Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.\n * @param bits   any {@code long} integer.\n * @return  the {@code double} floating-point value with the samebit pattern.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Float.floatToRawIntBits",
		"comment":"/** \n * Returns a representation of the specified floating-point value according to the IEEE 754 floating-point \"single format\" bit layout, preserving Not-a-Number (NaN) values. <p>Bit 31 (the bit that is selected by the mask {@code 0x80000000}) represents the sign of the floating-point number. Bits 30-23 (the bits that are selected by the mask {@code 0x7f800000}) represent the exponent. Bits 22-0 (the bits that are selected by the mask {@code 0x007fffff}) represent the significand (sometimes called the mantissa) of the floating-point number. <p>If the argument is positive infinity, the result is {@code 0x7f800000}. <p>If the argument is negative infinity, the result is {@code 0xff800000}. <p>If the argument is NaN, the result is the integer representing the actual NaN value.  Unlike the  {@code floatToIntBits}method,  {@code floatToRawIntBits} does not collapse all thebit patterns encoding a NaN to a single \"canonical\" NaN value. <p>In all cases, the result is an integer that, when given to the {@link #intBitsToFloat(int)} method, will produce afloating-point value the same as the argument to {@code floatToRawIntBits}.\n * @param value   a floating-point number.\n * @return the bits that represent the floating-point number.\n * @since 1.3\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Float.intBitsToFloat",
		"comment":"/** \n * Returns the  {@code float} value corresponding to a givenbit representation. The argument is considered to be a representation of a floating-point value according to the IEEE 754 floating-point \"single format\" bit layout. <p>If the argument is  {@code 0x7f800000}, the result is positive infinity. <p>If the argument is  {@code 0xff800000}, the result is negative infinity. <p>If the argument is any value in the range {@code 0x7f800001} through {@code 0x7fffffff} or inthe range  {@code 0xff800001} through{@code 0xffffffff}, the result is a NaN.  No IEEE 754 floating-point operation provided by Java can distinguish between two NaN values of the same type with different bit patterns.  Distinct values of NaN are only distinguishable by use of the  {@code Float.floatToRawIntBits} method.<p>In all other cases, let <i>s</i>, <i>e</i>, and <i>m</i> be three values that can be computed from the argument: <blockquote><pre> {@code int s = ((bits >> 31) == 0) ? 1 : -1; int e = ((bits >> 23) & 0xff); int m = (e == 0) ? (bits & 0x7fffff) << 1 : (bits & 0x7fffff) | 0x800000;}</pre></blockquote> Then the floating-point result equals the value of the mathematical expression <i>s</i>&middot;<i>m</i>&middot;2<sup><i>e</i>-150</sup>. <p>Note that this method may not be able to return a {@code float} NaN with exactly same bit pattern as the{@code int} argument.  IEEE 754 distinguishes between twokinds of NaNs, quiet NaNs and <i>signaling NaNs</i>.  The differences between the two kinds of NaN are generally not visible in Java.  Arithmetic operations on signaling NaNs turn them into quiet NaNs with a different, but often similar, bit pattern.  However, on some processors merely copying a signaling NaN also performs that conversion.  In particular, copying a signaling NaN to return it to the calling method may perform this conversion.  So  {@code intBitsToFloat} maynot be able to return a  {@code float} with a signaling NaNbit pattern.  Consequently, for some  {@code int} values,{@code floatToRawIntBits(intBitsToFloat(start))} may<i>not</i> equal  {@code start}.  Moreover, which particular bit patterns represent signaling NaNs is platform dependent; although all NaN bit patterns, quiet or signaling, must be in the NaN range identified above.\n * @param bits   an integer.\n * @return  the {@code float} floating-point value with the same bitpattern.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.invokeExact",
		"comment":"/** \n * Invokes the method handle, allowing any caller type descriptor, but requiring an exact type match. The symbolic type descriptor at the call site of  {@code invokeExact} mustexactly match this method handle's  {@link #type type}. No conversions are allowed on arguments or return values. <p> When this method is observed via the Core Reflection API, it will appear as a single native method, taking an object array and returning an object. If this native method is invoked directly via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI, or indirectly via  {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}, it will throw an  {@code UnsupportedOperationException}.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n * @throws WrongMethodTypeException if the target's type is not identical with the caller's symbolic type descriptor\n * @throws Throwable anything thrown by the underlying method propagates unchanged through the method handle call\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.invoke",
		"comment":"/** \n * Invokes the method handle, allowing any caller type descriptor, and optionally performing conversions on arguments and return values. <p> If the call site's symbolic type descriptor exactly matches this method handle's  {@link #type type}, the call proceeds as if by  {@link #invokeExact invokeExact}. <p> Otherwise, the call proceeds as if this method handle were first adjusted by calling  {@link #asType asType} to adjust this method handleto the required type, and then the call proceeds as if by {@link #invokeExact invokeExact} on the adjusted method handle.<p> There is no guarantee that the  {@code asType} call is actually made.If the JVM can predict the results of making the call, it may perform adaptations directly on the caller's arguments, and call the target method handle according to its own exact type. <p> The resolved type descriptor at the call site of  {@code invoke} mustbe a valid argument to the receivers  {@code asType} method.In particular, the caller must specify the same argument arity as the callee's type, if the callee is not a  {@linkplain #asVarargsCollector variable arity collector}. <p> When this method is observed via the Core Reflection API, it will appear as a single native method, taking an object array and returning an object. If this native method is invoked directly via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}, via JNI, or indirectly via  {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}, it will throw an  {@code UnsupportedOperationException}.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n * @throws WrongMethodTypeException if the target's type cannot be adjusted to the caller's symbolic type descriptor\n * @throws ClassCastException if the target's type can be adjusted to the caller, but a reference cast fails\n * @throws Throwable anything thrown by the underlying method propagates unchanged through the method handle call\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.invokeBasic",
		"comment":"/** \n * Private method for trusted invocation of a method handle respecting simplified signatures. Type mismatches will not throw  {@code WrongMethodTypeException}, but could crash the JVM. <p> The caller signature is restricted to the following basic types: Object, int, long, float, double, and void return. <p> The caller is responsible for maintaining type correctness by ensuring that the each outgoing argument value is a member of the range of the corresponding callee argument type. (The caller should therefore issue appropriate casts and integer narrowing operations on outgoing argument values.) The caller can assume that the incoming result value is part of the range of the callee's return type.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.linkToVirtual",
		"comment":"/** \n * Private method for trusted invocation of a MemberName of kind  {@code REF_invokeVirtual}. The caller signature is restricted to basic types as with  {@code invokeBasic}. The trailing (not leading) argument must be a MemberName.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.linkToStatic",
		"comment":"/** \n * Private method for trusted invocation of a MemberName of kind  {@code REF_invokeStatic}. The caller signature is restricted to basic types as with  {@code invokeBasic}. The trailing (not leading) argument must be a MemberName.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.linkToSpecial",
		"comment":"/** \n * Private method for trusted invocation of a MemberName of kind  {@code REF_invokeSpecial}. The caller signature is restricted to basic types as with  {@code invokeBasic}. The trailing (not leading) argument must be a MemberName.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandle.linkToInterface",
		"comment":"/** \n * Private method for trusted invocation of a MemberName of kind  {@code REF_invokeInterface}. The caller signature is restricted to basic types as with  {@code invokeBasic}. The trailing (not leading) argument must be a MemberName.\n * @param args the signature-polymorphic parameter list, statically represented using varargs\n * @return the signature-polymorphic result, statically represented using {@code Object}\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.init",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.expand",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.resolve",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.getMembers",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.objectFieldOffset",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.staticFieldOffset",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.staticFieldBase",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.getMemberVMInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.getConstant",
		"comment":"/** \n * Fetch MH-related JVM parameter. which=0 retrieves MethodHandlePushLimit which=1 retrieves stack slot push size (in address units)\n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.setCallSiteTargetNormal",
		"comment":"/** \n * Tell the JVM that we need to change the target of a CallSite. \n */\n",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.setCallSiteTargetVolatile",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.invoke.MethodHandleNatives.getNamedCon",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Object.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Object.getClass",
		"comment":"/** \n * Returns the runtime class of this  {@code Object}. The returned {@code Class} object is the object that is locked by {@code static synchronized} methods of the represented class.<p><b>The actual result type is  {@code Class<? extends |X|>}where  {@code |X|} is the erasure of the static type of theexpression on which  {@code getClass} is called.</b> Forexample, no cast is required in this code fragment:</p> <p> {@code Number n = 0;                             }<br> {@code Class<? extends Number> c = n.getClass(); }</p>\n * @return The {@code Class} object that represents the runtimeclass of this object.\n * @jls 15.8.2 Class Literals\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Object.hashCode",
		"comment":"/** \n * Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by {@link java.util.HashMap}. <p> The general contract of  {@code hashCode} is:<ul> <li>Whenever it is invoked on the same object more than once during an execution of a Java application, the  {@code hashCode} methodmust consistently return the same integer, provided no information used in  {@code equals} comparisons on the object is modified.This integer need not remain consistent from one execution of an application to another execution of the same application. <li>If two objects are equal according to the  {@code equals(Object)}method, then calling the  {@code hashCode} method on each ofthe two objects must produce the same integer result. <li>It is <em>not</em> required that if two objects are unequal according to the  {@link java.lang.Object#equals(java.lang.Object)}method, then calling the  {@code hashCode} method on each of thetwo objects must produce distinct integer results.  However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. </ul> <p> As much as is reasonably practical, the hashCode method defined by class  {@code Object} does return distinct integers for distinctobjects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&trade; programming language.)\n * @return  a hash code value for this object.\n * @see java.lang.Object#equals(java.lang.Object)\n * @see java.lang.System#identityHashCode\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Object.clone",
		"comment":"/** \n * Creates and returns a copy of this object.  The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object  {@code x}, the expression: <blockquote> <pre> x.clone() != x</pre></blockquote> will be true, and that the expression: <blockquote> <pre> x.clone().getClass() == x.getClass()</pre></blockquote> will be  {@code true}, but these are not absolute requirements. While it is typically the case that: <blockquote> <pre> x.clone().equals(x)</pre></blockquote> will be  {@code true}, this is not an absolute requirement. <p> By convention, the returned object should be obtained by calling {@code super.clone}.  If a class and all of its superclasses (except {@code Object}) obey this convention, it will be the case that {@code x.clone().getClass() == x.getClass()}. <p> By convention, the object returned by this method should be independent of this object (which is being cloned).  To achieve this independence, it may be necessary to modify one or more fields of the object returned by  {@code super.clone} before returning it.  Typically, this meanscopying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies.  If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by  {@code super.clone}need to be modified. <p> The method  {@code clone} for class {@code Object} performs aspecific cloning operation. First, if the class of this object does not implement the interface  {@code Cloneable}, then a {@code CloneNotSupportedException} is thrown. Note that all arraysare considered to implement the interface  {@code Cloneable} and thatthe return type of the  {@code clone} method of an array type {@code T[]}is  {@code T[]} where T is any reference or primitive type.Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. <p> The class  {@code Object} does not itself implement the interface{@code Cloneable}, so calling the  {@code clone} method on an objectwhose class is  {@code Object} will result in throwing anexception at run time.\n * @return     a clone of this instance.\n * @throws CloneNotSupportedException  if the object's class does notsupport the  {@code Cloneable} interface. Subclassesthat override the  {@code clone} method can alsothrow this exception to indicate that an instance cannot be cloned.\n * @see java.lang.Cloneable\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Object.notify",
		"comment":"/** \n * Wakes up a single thread that is waiting on this object's monitor. If any threads are waiting on this object, one of them is chosen to be awakened. The choice is arbitrary and occurs at the discretion of the implementation. A thread waits on an object's monitor by calling one of the  {@code wait} methods.<p> The awakened thread will not be able to proceed until the current thread relinquishes the lock on this object. The awakened thread will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened thread enjoys no reliable privilege or disadvantage in being the next thread to lock this object. <p> This method should only be called by a thread that is the owner of this object's monitor. A thread becomes the owner of the object's monitor in one of three ways: <ul> <li>By executing a synchronized instance method of that object. <li>By executing the body of a  {@code synchronized} statementthat synchronizes on the object. <li>For objects of type  {@code Class,} by executing asynchronized static method of that class. </ul> <p> Only one thread at a time can own an object's monitor.\n * @throws IllegalMonitorStateException  if the current thread is notthe owner of this object's monitor.\n * @see java.lang.Object#notifyAll()\n * @see java.lang.Object#wait()\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Object.notifyAll",
		"comment":"/** \n * Wakes up all threads that are waiting on this object's monitor. A thread waits on an object's monitor by calling one of the {@code wait} methods.<p> The awakened threads will not be able to proceed until the current thread relinquishes the lock on this object. The awakened threads will compete in the usual manner with any other threads that might be actively competing to synchronize on this object; for example, the awakened threads enjoy no reliable privilege or disadvantage in being the next thread to lock this object. <p> This method should only be called by a thread that is the owner of this object's monitor. See the  {@code notify} method for adescription of the ways in which a thread can become the owner of a monitor.\n * @throws IllegalMonitorStateException  if the current thread is notthe owner of this object's monitor.\n * @see java.lang.Object#notify()\n * @see java.lang.Object#wait()\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Object.wait",
		"comment":"/** \n * Causes the current thread to wait until either another thread invokes the {@link java.lang.Object#notify()} method or the{@link java.lang.Object#notifyAll()} method for this object, or aspecified amount of time has elapsed. <p> The current thread must own this object's monitor. <p> This method causes the current thread (call it <var>T</var>) to place itself in the wait set for this object and then to relinquish any and all synchronization claims on this object. Thread <var>T</var> becomes disabled for thread scheduling purposes and lies dormant until one of four things happens: <ul> <li>Some other thread invokes the  {@code notify} method for thisobject and thread <var>T</var> happens to be arbitrarily chosen as the thread to be awakened. <li>Some other thread invokes the  {@code notifyAll} method for thisobject. <li>Some other thread  {@linkplain Thread#interrupt() interrupts}thread <var>T</var>. <li>The specified amount of real time has elapsed, more or less.  If {@code timeout} is zero, however, then real time is not taken intoconsideration and the thread simply waits until notified. </ul> The thread <var>T</var> is then removed from the wait set for this object and re-enabled for thread scheduling. It then competes in the usual manner with other threads for the right to synchronize on the object; once it has gained control of the object, all its synchronization claims on the object are restored to the status quo ante - that is, to the situation as of the time that the  {@code wait}method was invoked. Thread <var>T</var> then returns from the invocation of the  {@code wait} method. Thus, on return from the{@code wait} method, the synchronization state of the object and ofthread  {@code T} is exactly as it was when the {@code wait} methodwas invoked. <p> A thread can also wake up without being notified, interrupted, or timing out, a so-called <i>spurious wakeup</i>.  While this will rarely occur in practice, applications must guard against it by testing for the condition that should have caused the thread to be awakened, and continuing to wait if the condition is not satisfied.  In other words, waits should always occur in loops, like this one: <pre> synchronized (obj) { while (&lt;condition does not hold&gt;) obj.wait(timeout); ... // Perform action appropriate to condition } </pre> (For more information on this topic, see Section 3.2.3 in Doug Lea's \"Concurrent Programming in Java (Second Edition)\" (Addison-Wesley, 2000), or Item 50 in Joshua Bloch's \"Effective Java Programming Language Guide\" (Addison-Wesley, 2001). <p>If the current thread is  {@linkplain java.lang.Thread#interrupt() interrupted} by any thread before or while it is waiting, then an{@code InterruptedException} is thrown.  This exception is notthrown until the lock status of this object has been restored as described above. <p> Note that the  {@code wait} method, as it places the current threadinto the wait set for this object, unlocks only this object; any other objects on which the current thread may be synchronized remain locked while the thread waits. <p> This method should only be called by a thread that is the owner of this object's monitor. See the  {@code notify} method for adescription of the ways in which a thread can become the owner of a monitor.\n * @param timeout   the maximum time to wait in milliseconds.\n * @throws IllegalArgumentException      if the value of timeout isnegative.\n * @throws IllegalMonitorStateException  if the current thread is notthe owner of the object's monitor.\n * @throws InterruptedException if any thread interrupted thecurrent thread before or while the current thread was waiting for a notification.  The <i>interrupted status</i> of the current thread is cleared when this exception is thrown.\n * @see java.lang.Object#notify()\n * @see java.lang.Object#notifyAll()\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Package.getSystemPackage0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Package.getSystemPackages0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getLength",
		"comment":"/** \n * Returns the length of the specified array object, as an  {@code int}.\n * @param array the array\n * @return the length of the array\n * @exception IllegalArgumentException if the object argument is notan array\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.get",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object.  The value is automatically wrapped in an object if it has a primitive type.\n * @param array the array\n * @param index the index\n * @return the (possibly wrapped) value of the indexed component inthe specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getBoolean",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code boolean}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getByte",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code byte}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getChar",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code char}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getShort",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code short}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getInt",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as an  {@code int}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getLong",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code long}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getFloat",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code float}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.getDouble",
		"comment":"/** \n * Returns the value of the indexed component in the specified array object, as a  {@code double}.\n * @param array the array\n * @param index the index\n * @return the value of the indexed component in the specified array\n * @exception NullPointerException If the specified object is null\n * @exception IllegalArgumentException If the specified object is notan array, or if the indexed element cannot be converted to the return type by an identity or widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#get\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.set",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified new value.  The new value is first automatically unwrapped if the array has a primitive component type.\n * @param array the array\n * @param index the index into the array\n * @param value the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the array component type is primitive and an unwrapping conversion fails\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setBoolean",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code boolean} value.\n * @param array the array\n * @param index the index into the array\n * @param z the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setByte",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code byte} value.\n * @param array the array\n * @param index the index into the array\n * @param b the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setChar",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code char} value.\n * @param array the array\n * @param index the index into the array\n * @param c the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setShort",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code short} value.\n * @param array the array\n * @param index the index into the array\n * @param s the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setInt",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code int} value.\n * @param array the array\n * @param index the index into the array\n * @param i the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setLong",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code long} value.\n * @param array the array\n * @param index the index into the array\n * @param l the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setFloat",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code float} value.\n * @param array the array\n * @param index the index into the array\n * @param f the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.setDouble",
		"comment":"/** \n * Sets the value of the indexed component of the specified array object to the specified  {@code double} value.\n * @param array the array\n * @param index the index into the array\n * @param d the new value of the indexed component\n * @exception NullPointerException If the specified object argumentis null\n * @exception IllegalArgumentException If the specified object argumentis not an array, or if the specified value cannot be converted to the underlying array's component type by an identity or a primitive widening conversion\n * @exception ArrayIndexOutOfBoundsException If the specified {@code index}argument is negative, or if it is greater than or equal to the length of the specified array\n * @see Array#set\n */\n",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.newArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Array.multiNewArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Executable.getParameters0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Executable.getTypeAnnotationBytes0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Field.getTypeAnnotationBytes0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.reflect.Proxy.defineClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Runtime.availableProcessors",
		"comment":"/** \n * Returns the number of processors available to the Java virtual machine. <p> This value may change during a particular invocation of the virtual machine.  Applications that are sensitive to the number of available processors should therefore occasionally poll this property and adjust their resource usage appropriately. </p>\n * @return  the maximum number of processors available to the virtualmachine; never smaller than one\n * @since 1.4\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.freeMemory",
		"comment":"/** \n * Returns the amount of free memory in the Java Virtual Machine. Calling the <code>gc</code> method may result in increasing the value returned by <code>freeMemory.</code>\n * @return  an approximation to the total amount of memory currentlyavailable for future allocated objects, measured in bytes.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.totalMemory",
		"comment":"/** \n * Returns the total amount of memory in the Java virtual machine. The value returned by this method may vary over time, depending on the host environment. <p> Note that the amount of memory required to hold an object of any given type may be implementation-dependent.\n * @return  the total amount of memory currently available for currentand future objects, measured in bytes.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.maxMemory",
		"comment":"/** \n * Returns the maximum amount of memory that the Java virtual machine will attempt to use.  If there is no inherent limit then the value  {@link java.lang.Long#MAX_VALUE} will be returned.\n * @return  the maximum amount of memory that the virtual machine willattempt to use, measured in bytes\n * @since 1.4\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.gc",
		"comment":"/** \n * Runs the garbage collector. Calling this method suggests that the Java virtual machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the virtual machine has made its best effort to recycle all discarded objects. <p> The name <code>gc</code> stands for \"garbage collector\". The virtual machine performs this recycling process automatically as needed, in a separate thread, even if the <code>gc</code> method is not invoked explicitly. <p> The method  {@link System#gc()} is the conventional and convenientmeans of invoking this method.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.runFinalization0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Runtime.traceInstructions",
		"comment":"/** \n * Enables/Disables tracing of instructions. If the <code>boolean</code> argument is <code>true</code>, this method suggests that the Java virtual machine emit debugging information for each instruction in the virtual machine as it is executed. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. The destination of the trace output is system dependent. <p> If the <code>boolean</code> argument is <code>false</code>, this method causes the virtual machine to stop performing the detailed instruction trace it is performing.\n * @param on   <code>true</code> to enable instruction tracing;<code>false</code> to disable this feature.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Runtime.traceMethodCalls",
		"comment":"/** \n * Enables/Disables tracing of method calls. If the <code>boolean</code> argument is <code>true</code>, this method suggests that the Java virtual machine emit debugging information for each method in the virtual machine as it is called. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. <p> Calling this method with argument false suggests that the virtual machine cease emitting per-call debugging information.\n * @param on   <code>true</code> to enable instruction tracing;<code>false</code> to disable this feature.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.SecurityManager.getClassContext",
		"comment":"/** \n * Returns the current execution stack as an array of classes. <p> The length of the array is the number of methods on the execution stack. The element at index <code>0</code> is the class of the currently executing method, the element at index <code>1</code> is the class of that method's caller, and so on.\n * @return  the execution stack.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.SecurityManager.currentClassLoader0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.SecurityManager.classDepth",
		"comment":"/** \n * Returns the stack depth of the specified class.\n * @param name   the fully qualified name of the class to search for.\n * @return  the depth on the stack frame of the first occurrence of amethod from a class with the specified name; <code>-1</code> if such a frame cannot be found.\n * @deprecated This type of security checking is not recommended.It is recommended that the <code>checkPermission</code> call be used instead.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.SecurityManager.classLoaderDepth0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.SecurityManager.currentLoadedClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Shutdown.halt0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Shutdown.runAllFinalizers",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.sin",
		"comment":"/** \n * Returns the trigonometric sine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul>\n * @param a   an angle, in radians.\n * @return  the sine of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.cos",
		"comment":"/** \n * Returns the trigonometric cosine of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN.</ul>\n * @param a   an angle, in radians.\n * @return  the cosine of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.tan",
		"comment":"/** \n * Returns the trigonometric tangent of an angle. Special cases: <ul><li>If the argument is NaN or an infinity, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul>\n * @param a   an angle, in radians.\n * @return  the tangent of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.asin",
		"comment":"/** \n * Returns the arc sine of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul>\n * @param a   the value whose arc sine is to be returned.\n * @return  the arc sine of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.acos",
		"comment":"/** \n * Returns the arc cosine of a value; the returned angle is in the range 0.0 through <i>pi</i>.  Special case: <ul><li>If the argument is NaN or its absolute value is greater than 1, then the result is NaN.</ul>\n * @param a   the value whose arc cosine is to be returned.\n * @return  the arc cosine of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.atan",
		"comment":"/** \n * Returns the arc tangent of a value; the returned angle is in the range -<i>pi</i>/2 through <i>pi</i>/2.  Special cases: <ul><li>If the argument is NaN, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument.</ul>\n * @param a   the value whose arc tangent is to be returned.\n * @return  the arc tangent of the argument.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.exp",
		"comment":"/** \n * Returns Euler's number <i>e</i> raised to the power of a {@code double} value. Special cases:<ul><li>If the argument is NaN, the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative infinity, then the result is positive zero.</ul>\n * @param a   the exponent to raise <i>e</i> to.\n * @return  the value <i>e</i><sup>{@code a}</sup>, where <i>e</i> is the base of the natural logarithms.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.log",
		"comment":"/** \n * Returns the natural logarithm (base <i>e</i>) of a  {@code double}value. Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is negative infinity.</ul>\n * @param a   a value\n * @return  the value ln&nbsp;{@code a}, the natural logarithm of {@code a}.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.log10",
		"comment":"/** \n * Returns the base 10 logarithm of a  {@code double} value.Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is negative infinity. <li> If the argument is equal to 10<sup><i>n</i></sup> for integer <i>n</i>, then the result is <i>n</i>. </ul>\n * @param a   a value\n * @return  the base 10 logarithm of  {@code a}.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.sqrt",
		"comment":"/** \n * Returns the correctly rounded positive square root of a {@code double} value.Special cases: <ul><li>If the argument is NaN or less than zero, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is positive zero or negative zero, then the result is the same as the argument.</ul> Otherwise, the result is the  {@code double} value closest tothe true mathematical square root of the argument value.\n * @param a   a value.\n * @return  the positive square root of {@code a}.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.cbrt",
		"comment":"/** \n * Returns the cube root of a  {@code double} value.  Forpositive finite  {@code x},  {@code cbrt(-x) ==-cbrt(x)}; that is, the cube root of a negative value is the negative of the cube root of that value's magnitude. Special cases: <ul> <li>If the argument is NaN, then the result is NaN. <li>If the argument is infinite, then the result is an infinity with the same sign as the argument. <li>If the argument is zero, then the result is a zero with the same sign as the argument. </ul>\n * @param a   a value.\n * @return  the cube root of {@code a}.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.IEEEremainder",
		"comment":"/** \n * Computes the remainder operation on two arguments as prescribed by the IEEE 754 standard. The remainder value is mathematically equal to <code>f1&nbsp;-&nbsp;f2</code>&nbsp;&times;&nbsp;<i>n</i>, where <i>n</i> is the mathematical integer closest to the exact mathematical value of the quotient  {@code f1/f2}, and if two mathematical integers are equally close to  {@code f1/f2}, then <i>n</i> is the integer that is even. If the remainder is zero, its sign is the same as the sign of the first argument. Special cases: <ul><li>If either argument is NaN, or the first argument is infinite, or the second argument is positive zero or negative zero, then the result is NaN. <li>If the first argument is finite and the second argument is infinite, then the result is the same as the first argument.</ul>\n * @param f1   the dividend.\n * @param f2   the divisor.\n * @return  the remainder when {@code f1} is divided by{@code f2}.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.atan2",
		"comment":"/** \n * Returns the angle <i>theta</i> from the conversion of rectangular coordinates ( {@code x},&nbsp; {@code y}) to polar coordinates (r,&nbsp;<i>theta</i>). This method computes the phase <i>theta</i> by computing an arc tangent of  {@code y/x} in the range of -<i>pi</i> to <i>pi</i>. Specialcases: <ul><li>If either argument is NaN, then the result is NaN. <li>If the first argument is positive zero and the second argument is positive, or the first argument is positive and finite and the second argument is positive infinity, then the result is positive zero. <li>If the first argument is negative zero and the second argument is positive, or the first argument is negative and finite and the second argument is positive infinity, then the result is negative zero. <li>If the first argument is positive zero and the second argument is negative, or the first argument is positive and finite and the second argument is negative infinity, then the result is the {@code double} value closest to <i>pi</i>.<li>If the first argument is negative zero and the second argument is negative, or the first argument is negative and finite and the second argument is negative infinity, then the result is the {@code double} value closest to -<i>pi</i>.<li>If the first argument is positive and the second argument is positive zero or negative zero, or the first argument is positive infinity and the second argument is finite, then the result is the {@code double} value closest to <i>pi</i>/2.<li>If the first argument is negative and the second argument is positive zero or negative zero, or the first argument is negative infinity and the second argument is finite, then the result is the {@code double} value closest to -<i>pi</i>/2.<li>If both arguments are positive infinity, then the result is the {@code double} value closest to <i>pi</i>/4.<li>If the first argument is positive infinity and the second argument is negative infinity, then the result is the  {@code double}value closest to 3*<i>pi</i>/4. <li>If the first argument is negative infinity and the second argument is positive infinity, then the result is the  {@code double} valueclosest to -<i>pi</i>/4. <li>If both arguments are negative infinity, then the result is the {@code double} value closest to -3*<i>pi</i>/4.</ul>\n * @param y   the ordinate coordinate\n * @param x   the abscissa coordinate\n * @return  the <i>theta</i> component of the point(<i>r</i>,&nbsp;<i>theta</i>) in polar coordinates that corresponds to the point (<i>x</i>,&nbsp;<i>y</i>) in Cartesian coordinates.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.pow",
		"comment":"/** \n * Returns the value of the first argument raised to the power of the second argument. Special cases: <ul><li>If the second argument is positive or negative zero, then the result is 1.0. <li>If the second argument is 1.0, then the result is the same as the first argument. <li>If the second argument is NaN, then the result is NaN. <li>If the first argument is NaN and the second argument is nonzero, then the result is NaN. <li>If <ul> <li>the absolute value of the first argument is greater than 1 and the second argument is positive infinity, or <li>the absolute value of the first argument is less than 1 and the second argument is negative infinity, </ul> then the result is positive infinity. <li>If <ul> <li>the absolute value of the first argument is greater than 1 and the second argument is negative infinity, or <li>the absolute value of the first argument is less than 1 and the second argument is positive infinity, </ul> then the result is positive zero. <li>If the absolute value of the first argument equals 1 and the second argument is infinite, then the result is NaN. <li>If <ul> <li>the first argument is positive zero and the second argument is greater than zero, or <li>the first argument is positive infinity and the second argument is less than zero, </ul> then the result is positive zero. <li>If <ul> <li>the first argument is positive zero and the second argument is less than zero, or <li>the first argument is positive infinity and the second argument is greater than zero, </ul> then the result is positive infinity. <li>If <ul> <li>the first argument is negative zero and the second argument is greater than zero but not a finite odd integer, or <li>the first argument is negative infinity and the second argument is less than zero but not a finite odd integer, </ul> then the result is positive zero. <li>If <ul> <li>the first argument is negative zero and the second argument is a positive finite odd integer, or <li>the first argument is negative infinity and the second argument is a negative finite odd integer, </ul> then the result is negative zero. <li>If <ul> <li>the first argument is negative zero and the second argument is less than zero but not a finite odd integer, or <li>the first argument is negative infinity and the second argument is greater than zero but not a finite odd integer, </ul> then the result is positive infinity. <li>If <ul> <li>the first argument is negative zero and the second argument is a negative finite odd integer, or <li>the first argument is negative infinity and the second argument is a positive finite odd integer, </ul> then the result is negative infinity. <li>If the first argument is finite and less than zero <ul> <li> if the second argument is a finite even integer, the result is equal to the result of raising the absolute value of the first argument to the power of the second argument <li>if the second argument is a finite odd integer, the result is equal to the negative of the result of raising the absolute value of the first argument to the power of the second argument <li>if the second argument is finite and not an integer, then the result is NaN. </ul> <li>If both arguments are integers, then the result is exactly equal to the mathematical result of raising the first argument to the power of the second argument if that result can in fact be represented exactly as a  {@code double} value.</ul><p>(In the foregoing descriptions, a floating-point value is considered to be an integer if and only if it is finite and a fixed point of the method  {@link #ceil ceil} or,equivalently, a fixed point of the method  {@link #floor floor}. A value is a fixed point of a one-argument method if and only if the result of applying the method to the value is equal to the value.)\n * @param a   base.\n * @param b   the exponent.\n * @return  the value {@code a}<sup> {@code b}</sup>.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.sinh",
		"comment":"/** \n * Returns the hyperbolic sine of a  {@code double} value.The hyperbolic sine of <i>x</i> is defined to be (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/2 where <i>e</i> is  {@linkplain Math#E Euler's number}. <p>Special cases: <ul> <li>If the argument is NaN, then the result is NaN. <li>If the argument is infinite, then the result is an infinity with the same sign as the argument. <li>If the argument is zero, then the result is a zero with the same sign as the argument. </ul>\n * @param x The number whose hyperbolic sine is to be returned.\n * @return  The hyperbolic sine of {@code x}.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.cosh",
		"comment":"/** \n * Returns the hyperbolic cosine of a  {@code double} value.The hyperbolic cosine of <i>x</i> is defined to be (<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>)/2 where <i>e</i> is  {@linkplain Math#E Euler's number}. <p>Special cases: <ul> <li>If the argument is NaN, then the result is NaN. <li>If the argument is infinite, then the result is positive infinity. <li>If the argument is zero, then the result is  {@code 1.0}. </ul>\n * @param x The number whose hyperbolic cosine is to be returned.\n * @return  The hyperbolic cosine of {@code x}.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.tanh",
		"comment":"/** \n * Returns the hyperbolic tangent of a  {@code double} value.The hyperbolic tangent of <i>x</i> is defined to be (<i>e<sup>x</sup>&nbsp;-&nbsp;e<sup>-x</sup></i>)/(<i>e<sup>x</sup>&nbsp;+&nbsp;e<sup>-x</sup></i>), in other words,  {@linkplain Math#sinh sinh(<i>x</i>)}/ {@linkplain Math#cosh cosh(<i>x</i>)}.  Note that the absolute value of the exact tanh is always less than 1. <p>Special cases: <ul> <li>If the argument is NaN, then the result is NaN. <li>If the argument is zero, then the result is a zero with the same sign as the argument. <li>If the argument is positive infinity, then the result is {@code +1.0}. <li>If the argument is negative infinity, then the result is {@code -1.0}. </ul>\n * @param x The number whose hyperbolic tangent is to be returned.\n * @return  The hyperbolic tangent of {@code x}.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.hypot",
		"comment":"/** \n * Returns sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>) without intermediate overflow or underflow. <p>Special cases: <ul> <li> If either argument is infinite, then the result is positive infinity. <li> If either argument is NaN and neither argument is infinite, then the result is NaN. </ul>\n * @param x a value\n * @param y a value\n * @return sqrt(<i>x</i><sup>2</sup>&nbsp;+<i>y</i><sup>2</sup>)without intermediate overflow or underflow\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.expm1",
		"comment":"/** \n * Returns <i>e</i><sup>x</sup>&nbsp;-1.  Note that for values of <i>x</i> near 0, the exact sum of {@code expm1(x)}&nbsp;+&nbsp;1 is much closer to the true result of <i>e</i><sup>x</sup> than  {@code exp(x)}. <p>Special cases: <ul> <li>If the argument is NaN, the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative infinity, then the result is -1.0. <li>If the argument is zero, then the result is a zero with the same sign as the argument. </ul>\n * @param x   the exponent to raise <i>e</i> to in the computation of<i>e</i><sup> {@code x}</sup>&nbsp;-1.\n * @return  the value <i>e</i><sup>{@code x}</sup>&nbsp;-&nbsp;1.\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.StrictMath.log1p",
		"comment":"/** \n * Returns the natural logarithm of the sum of the argument and 1. Note that for small values  {@code x}, the result of {@code log1p(x)} is much closer to the true result of ln(1+  {@code x}) than the floating-point evaluation of {@code log(1.0+x)}. <p>Special cases: <ul> <li>If the argument is NaN or less than -1, then the result is NaN. <li>If the argument is positive infinity, then the result is positive infinity. <li>If the argument is negative one, then the result is negative infinity. <li>If the argument is zero, then the result is a zero with the same sign as the argument. </ul>\n * @param x   a value\n * @return the value ln({@code x}&nbsp;+&nbsp;1), the natural log of  {@code x}&nbsp;+&nbsp;1\n * @since 1.5\n */\n",
		"label":0
	},
	{
		"name":"java.lang.String.intern",
		"comment":"/** \n * Returns a canonical representation for the string object. <p> A pool of strings, initially empty, is maintained privately by the class  {@code String}. <p> When the intern method is invoked, if the pool already contains a string equal to this  {@code String} object as determined bythe  {@link #equals(Object)} method, then the string from the pool isreturned. Otherwise, this  {@code String} object is added to thepool and a reference to this  {@code String} object is returned.<p> It follows that for any two strings  {@code s} and {@code t}, {@code s.intern() == t.intern()} is {@code true}if and only if  {@code s.equals(t)} is {@code true}. <p> All literal strings and string-valued constant expressions are interned. String literals are defined in section 3.10.5 of the <cite>The Java&trade; Language Specification</cite>.\n * @return  a string that has the same contents as this string, but isguaranteed to be from a pool of unique strings.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.System.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.System.setIn0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.System.setOut0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.System.setErr0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.System.currentTimeMillis",
		"comment":"/** \n * Returns the current time in milliseconds.  Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger.  For example, many operating systems measure time in units of tens of milliseconds. <p> See the description of the class <code>Date</code> for a discussion of slight discrepancies that may arise between \"computer time\" and coordinated universal time (UTC).\n * @return  the difference, measured in milliseconds, betweenthe current time and midnight, January 1, 1970 UTC.\n * @see java.util.Date\n */\n",
		"label":1
	},
	{
		"name":"java.lang.System.nanoTime",
		"comment":"/** \n * Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds. <p>This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary <i>origin</i> time (perhaps in the future, so values may be negative).  The same origin is used by all invocations of this method in an instance of a Java virtual machine; other virtual machine instances are likely to use a different origin. <p>This method provides nanosecond precision, but not necessarily nanosecond resolution (that is, how frequently the value changes) - no guarantees are made except that the resolution is at least as good as that of  {@link #currentTimeMillis()}. <p>Differences in successive calls that span greater than approximately 292 years (2<sup>63</sup> nanoseconds) will not correctly compute elapsed time due to numerical overflow. <p>The values returned by this method become meaningful only when the difference between two such values, obtained within the same instance of a Java virtual machine, is computed. <p> For example, to measure how long some code takes to execute: <pre>  {@code long startTime = System.nanoTime(); // ... the code being measured ... long estimatedTime = System.nanoTime() - startTime;}</pre> <p>To compare two nanoTime values <pre>  {@code long t0 = System.nanoTime(); ... long t1 = System.nanoTime();}</pre> one should use  {@code t1 - t0 < 0}, not  {@code t1 < t0}, because of the possibility of numerical overflow.\n * @return the current value of the running Java Virtual Machine'shigh-resolution time source, in nanoseconds\n * @since 1.5\n */\n",
		"label":1
	},
	{
		"name":"java.lang.System.arraycopy",
		"comment":"/** \n * Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by <code>src</code> to the destination array referenced by <code>dest</code>. The number of components copied is equal to the <code>length</code> argument. The components at positions <code>srcPos</code> through <code>srcPos+length-1</code> in the source array are copied into positions <code>destPos</code> through <code>destPos+length-1</code>, respectively, of the destination array. <p> If the <code>src</code> and <code>dest</code> arguments refer to the same array object, then the copying is performed as if the components at positions <code>srcPos</code> through <code>srcPos+length-1</code> were first copied to a temporary array with <code>length</code> components and then the contents of the temporary array were copied into positions <code>destPos</code> through <code>destPos+length-1</code> of the destination array. <p> If <code>dest</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown. <p> If <code>src</code> is <code>null</code>, then a <code>NullPointerException</code> is thrown and the destination array is not modified. <p> Otherwise, if any of the following is true, an <code>ArrayStoreException</code> is thrown and the destination is not modified: <ul> <li>The <code>src</code> argument refers to an object that is not an array. <li>The <code>dest</code> argument refers to an object that is not an array. <li>The <code>src</code> argument and <code>dest</code> argument refer to arrays whose component types are different primitive types. <li>The <code>src</code> argument refers to an array with a primitive component type and the <code>dest</code> argument refers to an array with a reference component type. <li>The <code>src</code> argument refers to an array with a reference component type and the <code>dest</code> argument refers to an array with a primitive component type. </ul> <p> Otherwise, if any of the following is true, an <code>IndexOutOfBoundsException</code> is thrown and the destination is not modified: <ul> <li>The <code>srcPos</code> argument is negative. <li>The <code>destPos</code> argument is negative. <li>The <code>length</code> argument is negative. <li><code>srcPos+length</code> is greater than <code>src.length</code>, the length of the source array. <li><code>destPos+length</code> is greater than <code>dest.length</code>, the length of the destination array. </ul> <p> Otherwise, if any actual component of the source array from position <code>srcPos</code> through <code>srcPos+length-1</code> cannot be converted to the component type of the destination array by assignment conversion, an <code>ArrayStoreException</code> is thrown. In this case, let <b><i>k</i></b> be the smallest nonnegative integer less than length such that <code>src[srcPos+</code><i>k</i><code>]</code> cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions <code>srcPos</code> through <code>srcPos+</code><i>k</i><code>-1</code> will already have been copied to destination array positions <code>destPos</code> through <code>destPos+</code><i>k</I><code>-1</code> and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)\n * @param src      the source array.\n * @param srcPos   starting position in the source array.\n * @param dest     the destination array.\n * @param destPos  starting position in the destination data.\n * @param length   the number of array elements to be copied.\n * @exception IndexOutOfBoundsException  if copying would causeaccess of data outside array bounds.\n * @exception ArrayStoreException  if an element in the <code>src</code>array could not be stored into the <code>dest</code> array because of a type mismatch.\n * @exception NullPointerException if either <code>src</code> or<code>dest</code> is <code>null</code>.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.System.identityHashCode",
		"comment":"/** \n * Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode(). The hash code for the null reference is zero.\n * @param x object for which the hashCode is to be calculated\n * @return  the hashCode\n * @since   JDK1.1\n */\n",
		"label":0
	},
	{
		"name":"java.lang.System.initProperties",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.System.mapLibraryName",
		"comment":"/** \n * Maps a library name into a platform-specific string representing a native library.\n * @param libname the name of the library.\n * @return     a platform-dependent native library name.\n * @exception NullPointerException if <code>libname</code> is<code>null</code>\n * @see java.lang.System#loadLibrary(java.lang.String)\n * @see java.lang.ClassLoader#findLibrary(java.lang.String)\n * @since      1.2\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.currentThread",
		"comment":"/** \n * Returns a reference to the currently executing thread object.\n * @return  the currently executing thread.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.yield",
		"comment":"/** \n * A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint. <p> Yield is a heuristic attempt to improve relative progression between threads that would otherwise over-utilise a CPU. Its use should be combined with detailed profiling and benchmarking to ensure that it actually has the desired effect. <p> It is rarely appropriate to use this method. It may be useful for debugging or testing purposes, where it may help to reproduce bugs due to race conditions. It may also be useful when designing concurrency control constructs such as the ones in the {@link java.util.concurrent.locks} package.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.sleep",
		"comment":"/** \n * Causes the currently executing thread to sleep (temporarily cease execution) for the specified number of milliseconds, subject to the precision and accuracy of system timers and schedulers. The thread does not lose ownership of any monitors.\n * @param millis the length of time to sleep in milliseconds\n * @throws IllegalArgumentException if the value of  {@code millis} is negative\n * @throws InterruptedException if any thread has interrupted the current thread. The <i>interrupted status</i> of the current thread is cleared when this exception is thrown.\n */\n",
		"label":1
	},
	{
		"name":"java.lang.Thread.start0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.isInterrupted",
		"comment":"/** \n * Tests if some Thread has been interrupted.  The interrupted state is reset or not based on the value of ClearInterrupted that is passed.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.isAlive",
		"comment":"/** \n * Tests if this thread is alive. A thread is alive if it has been started and has not yet died.\n * @return  <code>true</code> if this thread is alive;<code>false</code> otherwise.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.countStackFrames",
		"comment":"/** \n * Counts the number of stack frames in this thread. The thread must be suspended.\n * @return     the number of stack frames in this thread.\n * @exception IllegalThreadStateException  if this thread is notsuspended.\n * @deprecated The definition of this call depends on {@link #suspend}, which is deprecated.  Further, the results of this call were never well-defined.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.holdsLock",
		"comment":"/** \n * Returns <tt>true</tt> if and only if the current thread holds the monitor lock on the specified object. <p>This method is designed to allow a program to assert that the current thread already holds a specified lock: <pre> assert Thread.holdsLock(obj); </pre>\n * @param obj the object on which to test lock ownership\n * @throws NullPointerException if obj is <tt>null</tt>\n * @return <tt>true</tt> if the current thread holds the monitor lock onthe specified object.\n * @since 1.4\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Thread.dumpThreads",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.getThreads",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.setPriority0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.stop0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.suspend0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.resume0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.interrupt0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Thread.setNativeName",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Throwable.fillInStackTrace",
		"comment":"",
		"label":0
	},
	{
		"name":"java.lang.Throwable.getStackTraceDepth",
		"comment":"/** \n * Returns the number of elements in the stack trace (or 0 if the stack trace is unavailable). package-protection for use by SharedSecrets.\n */\n",
		"label":0
	},
	{
		"name":"java.lang.Throwable.getStackTraceElement",
		"comment":"/** \n * Returns the specified element of the stack trace. package-protection for use by SharedSecrets.\n * @param index index of the element to return.\n * @throws IndexOutOfBoundsException if {@code index < 0 ||index >= getStackTraceDepth() }\n */\n",
		"label":0
	},
	{
		"name":"java.net.DatagramPacket.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.net.Inet4Address.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.net.Inet4AddressImpl.getLocalHostName",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet4AddressImpl.lookupAllHostAddr",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet4AddressImpl.getHostByAddr",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet4AddressImpl.isReachable0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet6Address.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.net.Inet6AddressImpl.getLocalHostName",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet6AddressImpl.lookupAllHostAddr",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet6AddressImpl.getHostByAddr",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.Inet6AddressImpl.isReachable0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.InetAddress.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.net.InetAddressImplFactory.isIPv6Supported",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getAll",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getByName0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getByIndex0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getByInetAddress0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.isUp0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.isLoopback0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.supportsMulticast0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.isP2P0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getMacAddr0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.getMTU0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.NetworkInterface.init",
		"comment":"",
		"label":0
	},
	{
		"name":"java.net.SocketInputStream.socketRead0",
		"comment":"/** \n * Reads into an array of bytes at the specified offset using the received socket primitive.\n * @param fd the FileDescriptor\n * @param b the buffer into which the data is read\n * @param off the start offset of the data\n * @param len the maximum number of bytes read\n * @param timeout the read timeout in ms\n * @return the actual number of bytes read, -1 isreturned when the end of the stream is reached.\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.net.SocketInputStream.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.net.SocketOutputStream.socketWrite0",
		"comment":"/** \n * Writes to the socket.\n * @param fd the FileDescriptor\n * @param b the data to be written\n * @param off the start offset in the data\n * @param len the number of bytes that are written\n * @exception IOException If an I/O error has occurred.\n */\n",
		"label":0
	},
	{
		"name":"java.net.SocketOutputStream.init",
		"comment":"/** \n * Perform class load-time initializations.\n */\n",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyFromShortArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyToShortArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyFromIntArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyToIntArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyFromLongArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.Bits.copyToLongArray",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.MappedByteBuffer.isLoaded0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.MappedByteBuffer.load0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.nio.MappedByteBuffer.force0",
		"comment":"",
		"label":0
	},
	{
		"name":"java.security.AccessController.doPrivileged",
		"comment":"/** \n * Performs the specified  {@code PrivilegedAction} with privilegesenabled. The action is performed with <i>all</i> of the permissions possessed by the caller's protection domain. <p> If the action's  {@code run} method throws an (unchecked)exception, it will propagate through this method. <p> Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed.\n * @param < T > the type of the value returned by the PrivilegedAction's{@code run} method.\n * @param action the action to be performed.\n * @return the value returned by the action's {@code run} method.\n * @exception NullPointerException if the action is {@code null}\n * @see #doPrivileged(PrivilegedAction,AccessControlContext)\n * @see #doPrivileged(PrivilegedExceptionAction)\n * @see #doPrivilegedWithCombiner(PrivilegedAction)\n * @see java.security.DomainCombiner\n */\n",
		"label":0
	},
	{
		"name":"java.security.AccessController.doPrivileged",
		"comment":"/** \n * Performs the specified  {@code PrivilegedAction} with privilegesenabled and restricted by the specified  {@code AccessControlContext}. The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified  {@code AccessControlContext}. <p> If the action's  {@code run} method throws an (unchecked) exception,it will propagate through this method. <p> If a security manager is installed and the specified {@code AccessControlContext} was not created by system code and thecaller's  {@code ProtectionDomain} has not been granted the{@literal \"createAccessControlContext\"}{@link java.security.SecurityPermission}, then the action is performed with no permissions.\n * @param < T > the type of the value returned by the PrivilegedAction's{@code run} method.\n * @param action the action to be performed.\n * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.\n * @return the value returned by the action's {@code run} method.\n * @exception NullPointerException if the action is {@code null}\n * @see #doPrivileged(PrivilegedAction)\n * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n */\n",
		"label":0
	},
	{
		"name":"java.security.AccessController.doPrivileged",
		"comment":"/** \n * Performs the specified  {@code PrivilegedExceptionAction} withprivileges enabled.  The action is performed with <i>all</i> of the permissions possessed by the caller's protection domain. <p> If the action's  {@code run} method throws an <i>unchecked</i>exception, it will propagate through this method. <p> Note that any DomainCombiner associated with the current AccessControlContext will be ignored while the action is performed.\n * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.\n * @param action the action to be performed\n * @return the value returned by the action's {@code run} method\n * @exception PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception\n * @exception NullPointerException if the action is {@code null}\n * @see #doPrivileged(PrivilegedAction)\n * @see #doPrivileged(PrivilegedExceptionAction,AccessControlContext)\n * @see #doPrivilegedWithCombiner(PrivilegedExceptionAction)\n * @see java.security.DomainCombiner\n */\n",
		"label":0
	},
	{
		"name":"java.security.AccessController.doPrivileged",
		"comment":"/** \n * Performs the specified  {@code PrivilegedExceptionAction} withprivileges enabled and restricted by the specified {@code AccessControlContext}.  The action is performed with the intersection of the permissions possessed by the caller's protection domain, and those possessed by the domains represented by the specified  {@code AccessControlContext}. <p> If the action's  {@code run} method throws an <i>unchecked</i>exception, it will propagate through this method. <p> If a security manager is installed and the specified {@code AccessControlContext} was not created by system code and thecaller's  {@code ProtectionDomain} has not been granted the{@literal \"createAccessControlContext\"}{@link java.security.SecurityPermission}, then the action is performed with no permissions.\n * @param < T > the type of the value returned by thePrivilegedExceptionAction's  {@code run} method.\n * @param action the action to be performed\n * @param context an <i>access control context</i>representing the restriction to be applied to the caller's domain's privileges before performing the specified action.  If the context is {@code null}, then no additional restriction is applied.\n * @return the value returned by the action's {@code run} method\n * @exception PrivilegedActionException if the specified action's{@code run} method threw a <i>checked</i> exception\n * @exception NullPointerException if the action is {@code null}\n * @see #doPrivileged(PrivilegedAction)\n * @see #doPrivileged(PrivilegedAction,AccessControlContext)\n */\n",
		"label":0
	},
	{
		"name":"java.security.AccessController.getStackAccessControlContext",
		"comment":"/** \n * Returns the AccessControl context. i.e., it gets the protection domains of all the callers on the stack, starting at the first class with a non-null ProtectionDomain.\n * @return the access control context based on the current stack ornull if there was only privileged system code.\n */\n",
		"label":0
	},
	{
		"name":"java.security.AccessController.getInheritedAccessControlContext",
		"comment":"/** \n * Returns the \"inherited\" AccessControl context. This is the context that existed when the thread was created. Package private so AccessControlContext can use it.\n */\n",
		"label":0
	},
	{
		"name":"java.util.concurrent.atomic.AtomicLong.VMSupportsCS8",
		"comment":"/** \n * Returns whether underlying JVM supports lockless CompareAndSet for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.\n */\n",
		"label":0
	},
	{
		"name":"java.util.jar.JarFile.getMetaInfEntryNames",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.logging.FileHandler.isSetUID",
		"comment":"/** \n * check if we are in a set UID program.\n */\n",
		"label":0
	},
	{
		"name":"java.util.TimeZone.getSystemTimeZoneID",
		"comment":"/** \n * Gets the platform defined TimeZone ID.\n */\n",
		"label":0
	},
	{
		"name":"java.util.TimeZone.getSystemGMTOffsetID",
		"comment":"/** \n * Gets the custom time zone ID based on the GMT offset of the platform. (e.g., \"GMT+08:00\")\n */\n",
		"label":0
	},
	{
		"name":"java.util.zip.Adler32.update",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Adler32.updateBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Adler32.updateByteBuffer",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.CRC32.update",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.CRC32.updateBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.CRC32.updateByteBuffer",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.init",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.setDictionary",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.deflateBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.getAdler",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.reset",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Deflater.end",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.init",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.setDictionary",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.inflateBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.getAdler",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.reset",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.Inflater.end",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntry",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.freeEntry",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getNextEntry",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.close",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.open",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getTotal",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.startsWithLOC",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.read",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryTime",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryCrc",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryCSize",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntrySize",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryMethod",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryFlag",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getCommentBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getEntryBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"java.util.zip.ZipFile.getZipMessage",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.DebugSettings.setCTracingOn",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.DebugSettings.setCTracingOn",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.DebugSettings.setCTracingOn",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.DefaultMouseInfoPeer.fillPointWithCoords",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.DefaultMouseInfoPeer.isWindowUnderMouse",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.FontDescriptor.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"sun.awt.image.BufImgSurfaceData.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.BufImgSurfaceData.initRaster",
		"comment":"/** \n * Initializes the native Ops pointer.\n */\n",
		"label":0
	},
	{
		"name":"sun.awt.image.BufImgSurfaceData.freeNativeICMData",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ByteComponentRaster.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.BytePackedRaster.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.DataBufferNative.getElem",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.DataBufferNative.setElem",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.GifImageDecoder.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.GifImageDecoder.parseImage",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImageRepresentation.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImageRepresentation.setICMpixels",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImageRepresentation.setDiffICM",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.init",
		"comment":"/** \n * Returned value indicates whether the library initailization was succeded. There could be number of reasons to failure: - failed to load library. - failed to get all required entry points.\n */\n",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.transformBI",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.transformRaster",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.convolveBI",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.convolveRaster",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.lookupByteBI",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ImagingLib.lookupByteRaster",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.IntegerComponentRaster.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.JPEGImageDecoder.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.JPEGImageDecoder.readImage",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.image.ShortComponentRaster.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.awt.PlatformFont.initIDs",
		"comment":"/** \n * Initialize JNI field and method IDs\n */\n",
		"label":0
	},
	{
		"name":"sun.awt.SunToolkit.closeSplashScreen",
		"comment":"/** \n * Locates the splash screen library in a platform dependent way and closes the splash screen. Should be invoked on first top-level frame display.\n * @see java.awt.SplashScreen\n * @since 1.6\n */\n",
		"label":0
	},
	{
		"name":"sun.font.FileFontStrike.initNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FileFontStrike._getGlyphImageFromWindows",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.initNativeScaler",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getFontMetricsNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphAdvanceNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphMetricsNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphImageNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphOutlineBoundsNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphOutlineNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphVectorOutlineNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphPointNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getLayoutTableCacheNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.disposeNativeScaler",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getGlyphCodeNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getNumGlyphsNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getMissingGlyphCodeNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.getUnitsPerEMNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.FreetypeFontScaler.createScalerContextNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.NullFontScaler.getNullScalerContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.NullFontScaler.getGlyphImage",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.StrikeCache.getGlyphCacheDescription",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.StrikeCache.freeIntPointer",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.StrikeCache.freeLongPointer",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.StrikeCache.freeIntMemory",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.StrikeCache.freeLongMemory",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.SunFontManager.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.SunLayoutEngine.initGVIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.font.SunLayoutEngine.nativeLayout",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.isModifiableClass0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.isRetransformClassesSupported0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.setHasRetransformableTransformers",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.retransformClasses0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.redefineClasses0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.getAllLoadedClasses0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.getInitiatedClasses0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.getObjectSize0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.appendToClassLoaderSearch0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.instrument.InstrumentationImpl.setNativeMethodPrefixes",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.invoke.anon.AnonymousClassLoader.loadClassInternal",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.loadProfileNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.getProfileSizeNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.getProfileDataNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.getTagNative",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.setTagDataNative",
		"comment":"/** \n * Writes supplied data as a tag into the profile. Destroys old profile, if new one was successfully created. Returns valid pointer to new profile. Throws CMMException if operation fails, preserve old profile from destruction.\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.getProfileID",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.createNativeTransform",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.colorConvert",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.freeTransform",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.cmm.lcms.LCMS.initLCMS",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.DefaultDisposerRecord.invokeNativeDispose",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.Disposer.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.Blit.Blit",
		"comment":"/** \n * All Blit implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.BlitBg.BlitBg",
		"comment":"/** \n * All BlitBg implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawGlyphList.DrawGlyphList",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawGlyphListAA.DrawGlyphListAA",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawGlyphListLCD.DrawGlyphListLCD",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawLine.DrawLine",
		"comment":"/** \n * All DrawLine implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawParallelogram.DrawParallelogram",
		"comment":"/** \n * All DrawParallelogram implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawPath.DrawPath",
		"comment":"/** \n * All DrawPath implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawPolygons.DrawPolygons",
		"comment":"/** \n * All DrawPolygon implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.DrawRect.DrawRect",
		"comment":"/** \n * All DrawRect implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.FillParallelogram.FillParallelogram",
		"comment":"/** \n * All FillParallelogram implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.FillPath.FillPath",
		"comment":"/** \n * All FillPath implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.FillRect.FillRect",
		"comment":"/** \n * All FillRect implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.FillSpans.FillSpans",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.GraphicsPrimitiveMgr.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.GraphicsPrimitiveMgr.registerNativeLoops",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.MaskBlit.MaskBlit",
		"comment":"/** \n * All MaskBlit implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.MaskFill.MaskFill",
		"comment":"/** \n * All MaskFill implementors must have this invoker method\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.loops.MaskFill.FillAAPgram",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.MaskFill.DrawAAPgram",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.ScaledBlit.Scale",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.TransformBlit.Transform",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.loops.TransformHelper.Transform",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLContext.getOGLIdString",
		"comment":"/** \n * Returns a string representing adapter id (vendor, renderer, version). Must be called on the rendering thread.\n * @return an id string for the adapter\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLMaskFill.maskFill",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLRenderer.drawPoly",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLRenderQueue.flushBuffer",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLSurfaceData.initTexture",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLSurfaceData.initFBObject",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLSurfaceData.initFlipBackbuffer",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLSurfaceData.getTextureTarget",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLSurfaceData.getTextureID",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.opengl.OGLTextRenderer.drawGlyphList",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.BufferedMaskBlit.enqueueTile",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.BufferedRenderPipe.fillSpans",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.Region.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.appendPoly",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.setNormalize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.setOutputAreaXYXY",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.setRule",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.addSegment",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.getPathBox",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.intersectClipBox",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.nextSpan",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.skipDownTo",
		"comment":"/** \n * This method tells the iterator that it may skip all spans whose Y range is completely above the indicated Y coordinate.\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.getNativeIterator",
		"comment":"/** \n * This method returns a native pointer to a function block that can be used by a native method to perform the same iteration cycle that the above methods provide while avoiding upcalls to the Java object. The definition of the structure whose pointer is returned by this method is defined in: <pre> src/share/native/sun/java2d/pipe/SpanIterator.h </pre>\n */\n",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.dispose",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.moveTo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.lineTo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.quadTo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.curveTo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.closePath",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.pathDone",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.ShapeSpanIterator.getNativeConsumer",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.SpanClipRenderer.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.SpanClipRenderer.fillTile",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.pipe.SpanClipRenderer.eraseTile",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.SurfaceData.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.java2d.SurfaceData.isOpaqueGray",
		"comment":"/** \n * Fetches private field IndexColorModel.allgrayopaque which is true when all palette entries in the color model are gray and opaque.\n */\n",
		"label":0
	},
	{
		"name":"sun.management.ClassLoadingImpl.setVerboseClass",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.DiagnosticCommandImpl.setNotificationEnabled",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.DiagnosticCommandImpl.getDiagnosticCommands",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.DiagnosticCommandImpl.getDiagnosticCommandInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.DiagnosticCommandImpl.executeDiagnosticCommand",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.getAllFlagNames",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.getFlags",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.getInternalFlagCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.setLongValue",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.setBooleanValue",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.setStringValue",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.Flag.initialize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GarbageCollectorImpl.getCollectionCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GarbageCollectorImpl.getCollectionTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GarbageCollectorImpl.setNotificationEnabled",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GcInfoBuilder.getNumGcExtAttributes",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GcInfoBuilder.fillGcAttributeInfo",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.GcInfoBuilder.getLastGcInfo0",
		"comment":"/** \n * Returns the last GcInfo\n * @param gc GarbageCollectorMXBean that the gc info is associated with.\n * @param numExtAtts number of extension attributes\n * @param extAttValues Values of extension attributes to be filled.\n * @param before Memory usage before GC to be filled.\n * @param after Memory usage after GC to be filled.\n */\n",
		"label":0
	},
	{
		"name":"sun.management.HotSpotDiagnostic.dumpHeap0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.HotspotThread.getInternalThreadCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.HotspotThread.getInternalThreadTimes0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryImpl.getMemoryPools0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryImpl.getMemoryManagers0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryImpl.getMemoryUsage0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryImpl.setVerboseGC",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryManagerImpl.getMemoryPools0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.getUsage0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.getPeakUsage0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.getCollectionUsage0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.setUsageThreshold0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.setCollectionThreshold0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.resetPeakUsage0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.getMemoryManagers0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.setPoolUsageSensor",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.MemoryPoolImpl.setPoolCollectionSensor",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreads",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadInfo1",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadTotalCpuTime0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadTotalCpuTime1",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadUserCpuTime0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadUserCpuTime1",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.getThreadAllocatedMemory1",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.setThreadCpuTimeEnabled0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.setThreadAllocatedMemoryEnabled0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.setThreadContentionMonitoringEnabled0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.findMonitorDeadlockedThreads0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.findDeadlockedThreads0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.resetPeakThreadCount0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.dumpThreads0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.ThreadImpl.resetContentionTimes0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getVersion0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.initOptionalSupportFields",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.isThreadContentionMonitoringEnabled",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.isThreadCpuTimeEnabled",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.isThreadAllocatedMemoryEnabled",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getTotalClassCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getUnloadedClassCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getVerboseClass",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getVerboseGC",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getProcessId",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getVmArguments0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getStartupTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getUptime0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getAvailableProcessors",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getTotalCompileTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getTotalThreadCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getLiveThreadCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getPeakThreadCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getDaemonThreadCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getSafepointCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getTotalSafepointTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getSafepointSyncTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getTotalApplicationNonStoppedTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getLoadedClassSize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getUnloadedClassSize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getClassLoadingTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getMethodDataSize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getInitializedClassCount",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getClassInitializationTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.management.VMManagementImpl.getClassVerificationTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.GC.maxObjectInspectionAge",
		"comment":"/** \n * Returns the maximum <em>object-inspection age</em>, which is the number of real-time milliseconds that have elapsed since the least-recently-inspected heap object was last inspected by the garbage collector. <p> For simple stop-the-world collectors this value is just the time since the most recent collection.  For generational collectors it is the time since the oldest generation was most recently collected.  Other collectors are free to return a pessimistic estimate of the elapsed time, or simply the time since the last full collection was performed. <p> Note that in the presence of reference objects, a given object that is no longer strongly reachable may have to be inspected multiple times before it can be reclaimed.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.MessageUtils.toStderr",
		"comment":"/** \n * Print a message directly to stderr, bypassing all the character conversion methods.\n * @param msg   message to print\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.MessageUtils.toStdout",
		"comment":"/** \n * Print a message directly to stdout, bypassing all the character conversion methods.\n * @param msg   message to print\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.NativeSignalHandler.handle0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Perf.attach",
		"comment":"/** \n * Native method to perform the implementation specific attach mechanism. <p> The implementation of this method may return distinct or identical <code>ByteBuffer</code> objects for two distinct calls requesting attachment to the same Java virtual machine. <p> For the Sun HotSpot JVM, two distinct calls to attach to the same target Java virtual machine will result in two distinct ByteBuffer objects returned by this method. This may change in a future release.\n * @param user             A <code>String</code> object containing thename of the user that owns the target Java virtual machine.\n * @param lvmid            an integer that uniquely identifies thetarget local Java virtual machine.\n * @param mode             a string indicating the attach mode.\n * @return  ByteBuffer       a direct allocated byte buffer\n * @throws IllegalArgumentException  The lvmid or mode was invalid.\n * @throws IOException      An I/O error occurred while trying to acquirethe instrumentation buffer.\n * @throws OutOfMemoryError The instrumentation buffer could not be mappedinto the virtual machine's address space.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.detach",
		"comment":"/** \n * Native method to perform the implementation specific detach mechanism. <p> If this method is passed a <code>ByteBuffer</code> object that is not created by the <code>attach</code> method, then the results of this method are undefined, with unpredictable and potentially damaging effects to the Java virtual machine. To prevent accidental or malicious use of this method, all native ByteBuffer created by the <code> attach</code> method are managed internally as PhantomReferences and resources are freed by the system. <p> If this method is passed a <code>ByteBuffer</code> object created by the <code>attach</code> method with a lvmid for the Java virtual machine running this method (lvmid=0, for example), then the detach request is silently ignored.\n * @param ByteBuffer  A direct allocated byte buffer created by the<code>attach</code> method.\n * @see java.nio.ByteBuffer\n * @see #attach\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.createLong",
		"comment":"/** \n * Create a <code>long</code> scalar entry in the instrumentation buffer with the given variability characteristic, units, and initial value. <p> Access to the instrument is provided through the returned <code> ByteBuffer</code> object. Typically, this object should be wrapped with <code>LongBuffer</code> view object.\n * @param variability the variability characteristic for this entry.\n * @param units       the units for this entry.\n * @param name        the name of this entry.\n * @param value       the initial value for this entry.\n * @return  ByteBuffer  a direct allocated ByteBuffer object thatallows write access to a native memory location containing a <code>long</code> value. see sun.misc.perf.Variability see sun.misc.perf.Units\n * @see java.nio.ByteBuffer\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.createByteArray",
		"comment":"/** \n * Create a <code>byte</code> vector entry in the instrumentation buffer with the given variability characteristic, units, and initial value. <p> The <code>maxLength</code> parameter limits the size of the byte array instrument such that the initial or subsequent updates beyond this length are silently ignored. No special handling of truncated updates is provided. <p> The underlying implementation may further limit the length of the length of the initial or subsequent value. <p> Access to the instrument is provided through the returned <code> ByteBuffer</code> object.\n * @param variability the variability characteristic for this entry.\n * @param units       the units for this entry.\n * @param name        the name of this entry.\n * @param value       the initial value for this entry.\n * @param maxLength   the maximum length of this byte array.\n * @return  ByteBuffer  a direct allocated byte buffer that allowswrite access to a native memory location containing a <code>long</code> value. see sun.misc.perf.Variability see sun.misc.perf.Units\n * @see java.nio.ByteBuffer\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.highResCounter",
		"comment":"/** \n * Return the value of the High Resolution Counter. The High Resolution Counter returns the number of ticks since since the start of the Java virtual machine. The resolution of the counter is machine dependent and can be determined from the value return by the  {@link #highResFrequency} method.\n * @return  the number of ticks of machine dependent resolution sincethe start of the Java virtual machine.\n * @see #highResFrequency\n * @see java.lang.System#currentTimeMillis()\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.highResFrequency",
		"comment":"/** \n * Returns the frequency of the High Resolution Counter, in ticks per second. This value can be used to convert the value of the High Resolution Counter, as returned from a call to the  {@link #highResCounter} method,into the number of seconds since the start of the Java virtual machine.\n * @return  the frequency of the High Resolution Counter.\n * @see #highResCounter\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Perf.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Signal.findSignal",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Signal.handle0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Signal.raise0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.registerNatives",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getInt",
		"comment":"/** \n * Fetches a value from a given Java variable. More specifically, fetches a field or array element within the given object <code>o</code> at the given offset, or (if <code>o</code> is null) from the memory address whose numerical value is the given offset. <p> The results are undefined unless one of the following cases is true: <ul> <li>The offset was obtained from  {@link #objectFieldOffset} onthe  {@link java.lang.reflect.Field} of some Java field and the objectreferred to by <code>o</code> is of a class compatible with that field's class. <li>The offset and object reference <code>o</code> (either null or non-null) were both obtained via  {@link #staticFieldOffset}and  {@link #staticFieldBase} (respectively) from thereflective  {@link Field} representation of some Java field.<li>The object referred to by <code>o</code> is an array, and the offset is an integer of the form <code>B+N*S</code>, where <code>N</code> is a valid index into the array, and <code>B</code> and <code>S</code> are the values obtained by  {@link #arrayBaseOffset} and {@link #arrayIndexScale} (respectively) from the array's class.  The valuereferred to is the <code>N</code><em>th</em> element of the array. </ul> <p> If one of the above cases is true, the call references a specific Java variable (field or array element).  However, the results are undefined if that variable is not in fact of the type returned by this method. <p> This method refers to a variable by means of two parameters, and so it provides (in effect) a <em>double-register</em> addressing mode for Java variables.  When the object reference is null, this method uses its offset as an absolute address.  This is similar in operation to methods such as  {@link #getInt(long)}, which provide (in effect) a <em>single-register</em> addressing mode for non-Java variables. However, because Java variables may have a different layout in memory from non-Java variables, programmers should not assume that these two addressing modes are ever equivalent.  Also, programmers should remember that offsets from the double-register addressing mode cannot be portably confused with longs used in the single-register addressing mode.\n * @param o Java heap object in which the variable resides, if any, elsenull\n * @param offset indication of where the variable resides in a Java heapobject, if any, else a memory address locating the variable statically\n * @return the value fetched from the indicated Java variable\n * @throws RuntimeException No defined exceptions are thrown, not even{@link NullPointerException}\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putInt",
		"comment":"/** \n * Stores a value into a given Java variable. <p> The first two parameters are interpreted exactly as with {@link #getInt(Object,long)} to refer to a specificJava variable (field or array element).  The given value is stored into that variable. <p> The variable must be of the same type as the method parameter <code>x</code>.\n * @param o Java heap object in which the variable resides, if any, elsenull\n * @param offset indication of where the variable resides in a Java heapobject, if any, else a memory address locating the variable statically\n * @param x the value to store into the indicated Java variable\n * @throws RuntimeException No defined exceptions are thrown, not even{@link NullPointerException}\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getObject",
		"comment":"/** \n * Fetches a reference value from a given Java variable.\n * @see #getInt(Object,long)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putObject",
		"comment":"/** \n * Stores a reference value into a given Java variable. <p> Unless the reference <code>x</code> being stored is either null or matches the field type, the results are undefined. If the reference <code>o</code> is non-null, car marks or other store barriers for that object (if the VM requires them) are updated.\n * @see #putInt(Object,int,int)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getBoolean",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putBoolean",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getByte",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putByte",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getShort",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putShort",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getChar",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putChar",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getLong",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putLong",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getFloat",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putFloat",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getDouble",
		"comment":"/** \n * @see #getInt(Object,long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putDouble",
		"comment":"/** \n * @see #putInt(Object,int,int) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getByte",
		"comment":"/** \n * Fetches a value from a given memory address.  If the address is zero, or does not point into a block obtained from  {@link #allocateMemory}, the results are undefined.\n * @see #allocateMemory\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putByte",
		"comment":"/** \n * Stores a value into a given memory address.  If the address is zero, or does not point into a block obtained from  {@link #allocateMemory}, the results are undefined.\n * @see #getByte(long)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getShort",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putShort",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getChar",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putChar",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getInt",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putInt",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getLong",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putLong",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getFloat",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putFloat",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getDouble",
		"comment":"/** \n * @see #getByte(long) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putDouble",
		"comment":"/** \n * @see #putByte(long,byte) \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getAddress",
		"comment":"/** \n * Fetches a native pointer from a given memory address.  If the address is zero, or does not point into a block obtained from  {@link #allocateMemory}, the results are undefined. <p> If the native pointer is less than 64 bits wide, it is extended as an unsigned number to a Java long.  The pointer may be indexed by any given byte offset, simply by adding that offset (as a simple integer) to the long representing the pointer.  The number of bytes actually read from the target address maybe determined by consulting  {@link #addressSize}.\n * @see #allocateMemory\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putAddress",
		"comment":"/** \n * Stores a native pointer into a given memory address.  If the address is zero, or does not point into a block obtained from  {@link #allocateMemory}, the results are undefined. <p> The number of bytes actually written at the target address maybe determined by consulting  {@link #addressSize}.\n * @see #getAddress(long)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.allocateMemory",
		"comment":"/** \n * Allocates a new block of native memory, of the given size in bytes.  The contents of the memory are uninitialized; they will generally be garbage.  The resulting native pointer will never be zero, and will be aligned for all value types.  Dispose of this memory by calling  {@link #freeMemory}, or resize it with  {@link #reallocateMemory}.\n * @throws IllegalArgumentException if the size is negative or too largefor the native size_t type\n * @throws OutOfMemoryError if the allocation is refused by the system\n * @see #getByte(long)\n * @see #putByte(long,byte)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.reallocateMemory",
		"comment":"/** \n * Resizes a new block of native memory, to the given size in bytes.  The contents of the new block past the size of the old block are uninitialized; they will generally be garbage.  The resulting native pointer will be zero if and only if the requested size is zero.  The resulting native pointer will be aligned for all value types.  Dispose of this memory by calling  {@link #freeMemory}, or resize it with  {@link #reallocateMemory}.  The address passed to this method may be null, in which case an allocation will be performed.\n * @throws IllegalArgumentException if the size is negative or too largefor the native size_t type\n * @throws OutOfMemoryError if the allocation is refused by the system\n * @see #allocateMemory\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.setMemory",
		"comment":"/** \n * Sets all bytes in a given block of memory to a fixed value (usually zero). <p>This method determines a block's base address by means of two parameters, and so it provides (in effect) a <em>double-register</em> addressing mode, as discussed in  {@link #getInt(Object,long)}.  When the object reference is null, the offset supplies an absolute base address. <p>The stores are in coherent (atomic) units of a size determined by the address and length parameters.  If the effective address and length are all even modulo 8, the stores take place in 'long' units. If the effective address and length are (resp.) even modulo 4 or 2, the stores take place in units of 'int' or 'short'.\n * @since 1.7\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.copyMemory",
		"comment":"/** \n * Sets all bytes in a given block of memory to a copy of another block. <p>This method determines each block's base address by means of two parameters, and so it provides (in effect) a <em>double-register</em> addressing mode, as discussed in  {@link #getInt(Object,long)}.  When the object reference is null, the offset supplies an absolute base address. <p>The transfers are in coherent (atomic) units of a size determined by the address and length parameters.  If the effective addresses and length are all even modulo 8, the transfer takes place in 'long' units. If the effective addresses and length are (resp.) even modulo 4 or 2, the transfer takes place in units of 'int' or 'short'.\n * @since 1.7\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.freeMemory",
		"comment":"/** \n * Disposes of a block of native memory, as obtained from  {@link #allocateMemory} or {@link #reallocateMemory}.  The address passed to this method may be null, in which case no action is taken.\n * @see #allocateMemory\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.staticFieldOffset",
		"comment":"/** \n * Report the location of a given field in the storage allocation of its class.  Do not expect to perform any sort of arithmetic on this offset; it is just a cookie which is passed to the unsafe heap memory accessors. <p>Any given field will always have the same offset and base, and no two distinct fields of the same class will ever have the same offset and base. <p>As of 1.4.1, offsets for fields are represented as long values, although the Sun JVM does not use the most significant 32 bits. However, JVM implementations which store static fields at absolute addresses can use long offsets and null base pointers to express the field locations in a form usable by  {@link #getInt(Object,long)}. Therefore, code which will be ported to such JVMs on 64-bit platforms must preserve all bits of static field offsets.\n * @see #getInt(Object,long)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.objectFieldOffset",
		"comment":"/** \n * Report the location of a given static field, in conjunction with  {@link #staticFieldBase}. <p>Do not expect to perform any sort of arithmetic on this offset; it is just a cookie which is passed to the unsafe heap memory accessors. <p>Any given field will always have the same offset, and no two distinct fields of the same class will ever have the same offset. <p>As of 1.4.1, offsets for fields are represented as long values, although the Sun JVM does not use the most significant 32 bits. It is hard to imagine a JVM technology which needs more than a few bits to encode an offset within a non-array object, However, for consistency with other methods in this class, this method reports its result as a long value.\n * @see #getInt(Object,long)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.staticFieldBase",
		"comment":"/** \n * Report the location of a given static field, in conjunction with  {@link #staticFieldOffset}. <p>Fetch the base \"Object\", if any, with which static fields of the given class can be accessed via methods like  {@link #getInt(Object,long)}.  This value may be null.  This value may refer to an object which is a \"cookie\", not guaranteed to be a real Object, and it should not be used in any way except as argument to the get and put routines in this class.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.shouldBeInitialized",
		"comment":"/** \n * Detect if the given class may need to be initialized. This is often needed in conjunction with obtaining the static field base of a class.\n * @return false only if a call to {@code ensureClassInitialized} would have no effect\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.ensureClassInitialized",
		"comment":"/** \n * Ensure the given class has been initialized. This is often needed in conjunction with obtaining the static field base of a class.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.arrayBaseOffset",
		"comment":"/** \n * Report the offset of the first element in the storage allocation of a given array class.  If  {@link #arrayIndexScale} returns a non-zero valuefor the same class, you may use that scale factor, together with this base offset, to form new offsets to access elements of arrays of the given class.\n * @see #getInt(Object,long)\n * @see #putInt(Object,long,int)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.arrayIndexScale",
		"comment":"/** \n * Report the scale factor for addressing elements in the storage allocation of a given array class.  However, arrays of \"narrow\" types will generally not work properly with accessors like  {@link #getByte(Object,int)}, so the scale factor for such classes is reported as zero.\n * @see #arrayBaseOffset\n * @see #getInt(Object,long)\n * @see #putInt(Object,long,int)\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.addressSize",
		"comment":"/** \n * Report the size in bytes of a native pointer, as stored via  {@link #putAddress}.  This value will be either 4 or 8.  Note that the sizes of other primitive types (as stored in native memory blocks) is determined fully by their information content.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.pageSize",
		"comment":"/** \n * Report the size in bytes of a native memory page (whatever that is). This value will always be a power of two.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.defineClass",
		"comment":"/** \n * Tell the VM to define a class, without security checks.  By default, the class loader and protection domain come from the caller's class.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.defineAnonymousClass",
		"comment":"/** \n * Define a class but do not make it known to the class loader or system dictionary. <p> For each CP entry, the corresponding CP patch must either be null or have the a format that matches its tag: <ul> <li>Integer, Long, Float, Double: the corresponding wrapper object type from java.lang <li>Utf8: a string (must have suitable syntax if used as signature or name) <li>Class: any java.lang.Class object <li>String: any object (not just a java.lang.String) <li>InterfaceMethodRef: (NYI) a method handle to invoke on that call site's arguments </ul>\n * @params hostClass context for linkage, access control, protection domain, and class loader\n * @params data      bytes of a class file\n * @params cpPatches where non-null entries exist, they replace corresponding CP entries in data\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.allocateInstance",
		"comment":"/** \n * Allocate an instance but do not run any constructor. Initializes the class if it has not yet been. \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.monitorEnter",
		"comment":"/** \n * Lock the object.  It must get unlocked via  {@link #monitorExit}. \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.monitorExit",
		"comment":"/** \n * Unlock the object.  It must have been locked via  {@link #monitorEnter}.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.tryMonitorEnter",
		"comment":"/** \n * Tries to lock the object.  Returns true or false to indicate whether the lock succeeded.  If it did, the object must be unlocked via  {@link #monitorExit}.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.throwException",
		"comment":"/** \n * Throw the exception without telling the verifier. \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.compareAndSwapObject",
		"comment":"/** \n * Atomically update Java variable to <tt>x</tt> if it is currently holding <tt>expected</tt>.\n * @return <tt>true</tt> if successful\n */\n",
		"label":1
	},
	{
		"name":"sun.misc.Unsafe.compareAndSwapInt",
		"comment":"/** \n * Atomically update Java variable to <tt>x</tt> if it is currently holding <tt>expected</tt>.\n * @return <tt>true</tt> if successful\n */\n",
		"label":1
	},
	{
		"name":"sun.misc.Unsafe.compareAndSwapLong",
		"comment":"/** \n * Atomically update Java variable to <tt>x</tt> if it is currently holding <tt>expected</tt>.\n * @return <tt>true</tt> if successful\n */\n",
		"label":1
	},
	{
		"name":"sun.misc.Unsafe.getObjectVolatile",
		"comment":"/** \n * Fetches a reference value from a given Java variable, with volatile load semantics. Otherwise identical to  {@link #getObject(Object,long)}\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putObjectVolatile",
		"comment":"/** \n * Stores a reference value into a given Java variable, with volatile store semantics. Otherwise identical to  {@link #putObject(Object,long,Object)}\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getIntVolatile",
		"comment":"/** \n * Volatile version of  {@link #getInt(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putIntVolatile",
		"comment":"/** \n * Volatile version of  {@link #putInt(Object,long,int)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getBooleanVolatile",
		"comment":"/** \n * Volatile version of  {@link #getBoolean(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putBooleanVolatile",
		"comment":"/** \n * Volatile version of  {@link #putBoolean(Object,long,boolean)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getByteVolatile",
		"comment":"/** \n * Volatile version of  {@link #getByte(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putByteVolatile",
		"comment":"/** \n * Volatile version of  {@link #putByte(Object,long,byte)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getShortVolatile",
		"comment":"/** \n * Volatile version of  {@link #getShort(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putShortVolatile",
		"comment":"/** \n * Volatile version of  {@link #putShort(Object,long,short)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getCharVolatile",
		"comment":"/** \n * Volatile version of  {@link #getChar(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putCharVolatile",
		"comment":"/** \n * Volatile version of  {@link #putChar(Object,long,char)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getLongVolatile",
		"comment":"/** \n * Volatile version of  {@link #getLong(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putLongVolatile",
		"comment":"/** \n * Volatile version of  {@link #putLong(Object,long,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getFloatVolatile",
		"comment":"/** \n * Volatile version of  {@link #getFloat(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putFloatVolatile",
		"comment":"/** \n * Volatile version of  {@link #putFloat(Object,long,float)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getDoubleVolatile",
		"comment":"/** \n * Volatile version of  {@link #getDouble(Object,long)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putDoubleVolatile",
		"comment":"/** \n * Volatile version of  {@link #putDouble(Object,long,double)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putOrderedObject",
		"comment":"/** \n * Version of  {@link #putObjectVolatile(Object,long,Object)}that does not guarantee immediate visibility of the store to other threads. This method is generally only useful if the underlying field is a Java volatile (or if an array cell, one that is otherwise only accessed using volatile accesses).\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putOrderedInt",
		"comment":"/** \n * Ordered/Lazy version of  {@link #putIntVolatile(Object,long,int)}  \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.putOrderedLong",
		"comment":"/** \n * Ordered/Lazy version of  {@link #putLongVolatile(Object,long,long)} \n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.unpark",
		"comment":"/** \n * Unblock the given thread blocked on <tt>park</tt>, or, if it is not blocked, cause the subsequent call to <tt>park</tt> not to block.  Note: this operation is \"unsafe\" solely because the caller must somehow ensure that the thread has not been destroyed. Nothing special is usually required to ensure this when called from Java (in which there will ordinarily be a live reference to the thread) but this is not nearly-automatically so when calling from native code.\n * @param thread the thread to unpark.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.park",
		"comment":"/** \n * Block current thread, returning when a balancing <tt>unpark</tt> occurs, or a balancing <tt>unpark</tt> has already occurred, or the thread is interrupted, or, if not absolute and time is not zero, the given time nanoseconds have elapsed, or if absolute, the given deadline in milliseconds since Epoch has passed, or spuriously (i.e., returning for no \"reason\"). Note: This operation is in the Unsafe class only because <tt>unpark</tt> is, so it would be strange to place it elsewhere.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.getLoadAverage",
		"comment":"/** \n * Gets the load average in the system run queue assigned to the available processors averaged over various periods of time. This method retrieves the given <tt>nelem</tt> samples and assigns to the elements of the given <tt>loadavg</tt> array. The system imposes a maximum of 3 samples, representing averages over the last 1,  5,  and  15 minutes, respectively.\n * @params loadavg an array of double of size nelems\n * @params nelems the number of samples to be retrieved andmust be 1 to 3.\n * @return the number of samples actually retrieved; or -1if the load average is unobtainable.\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.loadFence",
		"comment":"/** \n * Ensures lack of reordering of loads before the fence with loads or stores after the fence.\n * @since 1.8\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.storeFence",
		"comment":"/** \n * Ensures lack of reordering of stores before the fence with loads or stores after the fence.\n * @since 1.8\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.Unsafe.fullFence",
		"comment":"/** \n * Ensures lack of reordering of loads or stores before the fence with loads or stores after the fence.\n * @since 1.8\n */\n",
		"label":0
	},
	{
		"name":"sun.misc.VM.latestUserDefinedLoader",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.VM.initialize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.misc.VMSupport.initAgentProperties",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.net.sdp.SdpSupport.create0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.net.sdp.SdpSupport.convert0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.net.spi.DefaultProxySelector.init",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.net.spi.DefaultProxySelector.getSystemProxy",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.DatagramChannelImpl.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.DatagramChannelImpl.disconnect0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.DatagramChannelImpl.receive0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.DatagramChannelImpl.send0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.FileChannelImpl.map0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.FileChannelImpl.unmap0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.FileChannelImpl.transferTo0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.FileChannelImpl.position0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.FileChannelImpl.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.randomBytes",
		"comment":"",
		"label":1
	},
	{
		"name":"sun.nio.ch.IOUtil.makePipe",
		"comment":"/** \n * Returns two file descriptors for a pipe encoded in a long. The read end of the pipe is returned in the high 32 bits, while the write end is returned in the low 32 bits.\n */\n",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.drain",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.configureBlocking",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.fdVal",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.setfdVal",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.fdLimit",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.iovMax",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.IOUtil.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.isIPv6Available0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.isExclusiveBindAvailable",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.canIPv6SocketJoinIPv4Group0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.canJoin6WithIPv4Group0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.socket0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.bind0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.listen",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.connect0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.shutdown",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.localPort",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.localInetAddress",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.remotePort",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.remoteInetAddress",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.getIntOption0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.setIntOption0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.poll",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.joinOrDrop4",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.blockOrUnblock4",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.joinOrDrop6",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.blockOrUnblock6",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.setInterface4",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.getInterface4",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.setInterface6",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.getInterface6",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.Net.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.ServerSocketChannelImpl.accept0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.ServerSocketChannelImpl.initIDs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.SocketChannelImpl.checkConnect",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.nio.ch.SocketChannelImpl.sendOutOfBandData",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getSize0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getClassAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getClassAtIfLoaded0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getMethodAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getMethodAtIfLoaded0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getFieldAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getFieldAtIfLoaded0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getMemberRefInfoAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getIntAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getLongAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getFloatAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getDoubleAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getStringAt0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.ConstantPool.getUTF8At0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.NativeConstructorAccessorImpl.newInstance0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.NativeMethodAccessorImpl.invoke0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.reflect.Reflection.getCallerClass",
		"comment":"/** \n * Returns the class of the caller of the method calling this method, ignoring frames associated with java.lang.reflect.Method.invoke() and its implementation. \n */\n",
		"label":0
	},
	{
		"name":"sun.reflect.Reflection.getCallerClass",
		"comment":"/** \n * @deprecated This method will be removed in JDK 9.This method is a private JDK API and retained temporarily for existing code to run until a replacement API is defined.\n */\n",
		"label":0
	},
	{
		"name":"sun.reflect.Reflection.getClassAccessFlags",
		"comment":"/** \n * Retrieves the access flags written to the class file. For inner classes these flags may differ from those returned by Class.getModifiers(), which searches the InnerClasses attribute to find the source-level access flags. This is used instead of Class.getModifiers() for run-time access checks due to compatibility reasons; see 4471811. Only the values of the low 13 bits (i.e., a mask of 0x1FFF) are guaranteed to be valid. \n */\n",
		"label":0
	},
	{
		"name":"sun.security.ec.ECDHKeyAgreement.deriveKey",
		"comment":"/** \n * Generates a secret key using the public and private keys.\n * @param s the private key's S value.\n * @param w the public key's W point (in uncompressed form).\n * @param encodedParams the curve's DER encoded object identifier.\n * @return byte[] the secret key.\n */\n",
		"label":0
	},
	{
		"name":"sun.security.ec.ECDSASignature.signDigest",
		"comment":"/** \n * Signs the digest using the private key.\n * @param digest the digest to be signed.\n * @param s the private key's S value.\n * @param encodedParams the curve's DER encoded object identifier.\n * @param seed the random seed.\n * @return byte[] the signature.\n */\n",
		"label":0
	},
	{
		"name":"sun.security.ec.ECDSASignature.verifySignedDigest",
		"comment":"/** \n * Verifies the signed digest using the public key.\n * @param signedDigest the signature to be verified. It is encodedas a concatenation of the key's R and S values.\n * @param digest the digest to be used.\n * @param w the public key's W point (in uncompressed form).\n * @param encodedParams the curve's DER encoded object identifier.\n * @return boolean true if the signature is successfully verified.\n */\n",
		"label":0
	},
	{
		"name":"sun.security.ec.ECKeyPairGenerator.generateECKeyPair",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.ec.ECKeyPairGenerator.getEncodedBytes",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.init",
		"comment":"/** \n * Initialization routine to dynamically load function pointers.\n * @param library name to dlopen\n * @return true if succeeded, false otherwise.\n */\n",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getMechPtr",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.indicateMechs",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.inquireNamesForMech",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.releaseName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.importName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.compareName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.canonicalizeName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.exportName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.displayName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.acquireCred",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.releaseCred",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getCredName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getCredTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getCredUsage",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.importContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.initContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.acceptContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.inquireContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getContextMech",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getContextName",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getContextTime",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.deleteContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.wrapSizeLimit",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.exportContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.getMic",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.verifyMic",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.wrap",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.jgss.wrapper.GSSLibStub.unwrap",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.krb5.Config.getWindowsDirectory",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.krb5.Credentials.acquireDefaultNativeCreds",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.krb5.SCDynamicStoreConfig.installNotificationCallback",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.krb5.SCDynamicStoreConfig.getKerberosConfig",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.Secmod.nssGetLibraryHandle",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.Secmod.nssLoadLibrary",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.Secmod.nssVersionCheck",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.Secmod.nssInitialize",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.Secmod.nssGetModuleList",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.initializeLibrary",
		"comment":"/** \n * This method does the initialization of the native library. It is called exactly once for this class.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.finalizeLibrary",
		"comment":"/** \n * This method does the finalization of the native library. It is called exactly once for this class. The library uses this method for a clean-up of any resources.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.connect",
		"comment":"/** \n * Connects this object to the specified PKCS#11 library. This method is for internal use only. Declared private, because incorrect handling may result in errors in the native part.\n * @param pkcs11ModulePath The PKCS#11 library path.\n * @preconditions (pkcs11ModulePath <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.disconnect",
		"comment":"/** \n * Disconnects the PKCS#11 library from this object. After calling this method, this object is no longer connected to a native PKCS#11 module and any subsequent calls to C_ methods will fail. This method is for internal use only. Declared private, because incorrect handling may result in errors in the native part.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Initialize",
		"comment":"/** \n * C_Initialize initializes the Cryptoki library. (General-purpose)\n * @param pInitArgs if pInitArgs is not NULL it gets casted toCK_C_INITIALIZE_ARGS_PTR and dereferenced (PKCS#11 param: CK_VOID_PTR pInitArgs)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Finalize",
		"comment":"/** \n * C_Finalize indicates that an application is done with the Cryptoki library (General-purpose)\n * @param pReserved is reserved. Should be NULL_PTR(PKCS#11 param: CK_VOID_PTR pReserved)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pReserved == null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetInfo",
		"comment":"/** \n * C_GetInfo returns general information about Cryptoki. (General-purpose)\n * @return the information.(PKCS#11 param: CK_INFO_PTR pInfo)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetSlotList",
		"comment":"/** \n * C_GetSlotList obtains a list of slots in the system. (Slot and token management)\n * @param tokenPresent if true only Slot IDs with a token are returned(PKCS#11 param: CK_BBOOL tokenPresent)\n * @return a long array of slot IDs and number of Slot IDs(PKCS#11 param: CK_SLOT_ID_PTR pSlotList, CK_ULONG_PTR pulCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetSlotInfo",
		"comment":"/** \n * C_GetSlotInfo obtains information about a particular slot in the system. (Slot and token management)\n * @param slotID the ID of the slot(PKCS#11 param: CK_SLOT_ID slotID)\n * @return the slot information(PKCS#11 param: CK_SLOT_INFO_PTR pInfo)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetTokenInfo",
		"comment":"/** \n * C_GetTokenInfo obtains information about a particular token in the system. (Slot and token management)\n * @param slotID ID of the token's slot(PKCS#11 param: CK_SLOT_ID slotID)\n * @return the token information(PKCS#11 param: CK_TOKEN_INFO_PTR pInfo)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetMechanismList",
		"comment":"/** \n * C_GetMechanismList obtains a list of mechanism types supported by a token. (Slot and token management)\n * @param slotID ID of the token's slot(PKCS#11 param: CK_SLOT_ID slotID)\n * @return a long array of mechanism types and number of mechanism types(PKCS#11 param: CK_MECHANISM_TYPE_PTR pMechanismList, CK_ULONG_PTR pulCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetMechanismInfo",
		"comment":"/** \n * C_GetMechanismInfo obtains information about a particular mechanism possibly supported by a token. (Slot and token management)\n * @param slotID ID of the token's slot(PKCS#11 param: CK_SLOT_ID slotID)\n * @param type type of mechanism(PKCS#11 param: CK_MECHANISM_TYPE type)\n * @return the mechanism info(PKCS#11 param: CK_MECHANISM_INFO_PTR pInfo)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_OpenSession",
		"comment":"/** \n * C_OpenSession opens a session between an application and a token. (Session management)\n * @param slotID the slot's ID(PKCS#11 param: CK_SLOT_ID slotID)\n * @param flags of CK_SESSION_INFO(PKCS#11 param: CK_FLAGS flags)\n * @param pApplication passed to callback(PKCS#11 param: CK_VOID_PTR pApplication)\n * @param Notify the callback function(PKCS#11 param: CK_NOTIFY Notify)\n * @return the session handle(PKCS#11 param: CK_SESSION_HANDLE_PTR phSession)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_CloseSession",
		"comment":"/** \n * C_CloseSession closes a session between an application and a token. (Session management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetSessionInfo",
		"comment":"/** \n * C_GetSessionInfo obtains information about the session. (Session management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the session info(PKCS#11 param: CK_SESSION_INFO_PTR pInfo)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetOperationState",
		"comment":"/** \n * C_GetOperationState obtains the state of the cryptographic operation in a session. (Session management)\n * @param hSession session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the state and the state length(PKCS#11 param: CK_BYTE_PTR pOperationState, CK_ULONG_PTR pulOperationStateLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SetOperationState",
		"comment":"/** \n * C_SetOperationState restores the state of the cryptographic operation in a session. (Session management)\n * @param hSession session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pOperationState the state and the state length(PKCS#11 param: CK_BYTE_PTR pOperationState, CK_ULONG ulOperationStateLen)\n * @param hEncryptionKey en/decryption key(PKCS#11 param: CK_OBJECT_HANDLE hEncryptionKey)\n * @param hAuthenticationKey sign/verify key(PKCS#11 param: CK_OBJECT_HANDLE hAuthenticationKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Login",
		"comment":"/** \n * C_Login logs a user into a token. (Session management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param userType the user type(PKCS#11 param: CK_USER_TYPE userType)\n * @param pPin the user's PIN and the length of the PIN(PKCS#11 param: CK_CHAR_PTR pPin, CK_ULONG ulPinLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Logout",
		"comment":"/** \n * C_Logout logs a user out from a token. (Session management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_CreateObject",
		"comment":"/** \n * C_CreateObject creates a new object. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pTemplate the object's template and number of attributes intemplate (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @return the object's handle(PKCS#11 param: CK_OBJECT_HANDLE_PTR phObject)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_CopyObject",
		"comment":"/** \n * C_CopyObject copies an object, creating a new object for the copy. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param hObject the object's handle(PKCS#11 param: CK_OBJECT_HANDLE hObject)\n * @param pTemplate the template for the new object and number of attributesin template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @return the handle of the copy(PKCS#11 param: CK_OBJECT_HANDLE_PTR phNewObject)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DestroyObject",
		"comment":"/** \n * C_DestroyObject destroys an object. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param hObject the object's handle(PKCS#11 param: CK_OBJECT_HANDLE hObject)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GetAttributeValue",
		"comment":"/** \n * C_GetAttributeValue obtains the value of one or more object attributes. The template attributes also receive the values. (Object management) note: in PKCS#11 pTemplate and the result template are the same\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param hObject the object's handle(PKCS#11 param: CK_OBJECT_HANDLE hObject)\n * @param pTemplate specifies the attributes and number of attributes to getThe template attributes also receive the values. (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pTemplate <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SetAttributeValue",
		"comment":"/** \n * C_SetAttributeValue modifies the value of one or more object attributes (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param hObject the object's handle(PKCS#11 param: CK_OBJECT_HANDLE hObject)\n * @param pTemplate specifies the attributes and values to get; number ofattributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pTemplate <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_FindObjectsInit",
		"comment":"/** \n * C_FindObjectsInit initializes a search for token and session objects that match a template. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pTemplate the object's attribute values to match and the number ofattributes in search template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_FindObjects",
		"comment":"/** \n * C_FindObjects continues a search for token and session objects that match a template, obtaining additional object handles. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param ulMaxObjectCount the max. object handles to get(PKCS#11 param: CK_ULONG ulMaxObjectCount)\n * @return the object's handles and the actual number of objects returned(PKCS#11 param: CK_ULONG_PTR pulObjectCount)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_FindObjectsFinal",
		"comment":"/** \n * C_FindObjectsFinal finishes a search for token and session objects. (Object management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_EncryptInit",
		"comment":"/** \n * C_EncryptInit initializes an encryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the encryption mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the encryption key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Encrypt",
		"comment":"/** \n * C_Encrypt encrypts single-part data. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pData the data to get encrypted and the data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)\n * @return the encrypted data and the encrypted data's length(PKCS#11 param: CK_BYTE_PTR pEncryptedData, CK_ULONG_PTR pulEncryptedDataLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pData <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_EncryptUpdate",
		"comment":"/** \n * C_EncryptUpdate continues a multiple-part encryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pPart the data part to get encrypted and the data part's length(PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)\n * @return the encrypted data part and the encrypted data part's length(PKCS#11 param: CK_BYTE_PTR pEncryptedPart, CK_ULONG_PTR pulEncryptedPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pPart <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_EncryptFinal",
		"comment":"/** \n * C_EncryptFinal finishes a multiple-part encryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the last encrypted data part and the last data part's length(PKCS#11 param: CK_BYTE_PTR pLastEncryptedPart, CK_ULONG_PTR pulLastEncryptedPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DecryptInit",
		"comment":"/** \n * C_DecryptInit initializes a decryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the decryption mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the decryption key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Decrypt",
		"comment":"/** \n * C_Decrypt decrypts encrypted data in a single part. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pEncryptedData the encrypted data to get decrypted and theencrypted data's length (PKCS#11 param: CK_BYTE_PTR pEncryptedData, CK_ULONG ulEncryptedDataLen)\n * @return the decrypted data and the data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG_PTR pulDataLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pEncryptedPart <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DecryptUpdate",
		"comment":"/** \n * C_DecryptUpdate continues a multiple-part decryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pEncryptedPart the encrypted data part to get decrypted and theencrypted data part's length (PKCS#11 param: CK_BYTE_PTR pEncryptedPart, CK_ULONG ulEncryptedPartLen)\n * @return the decrypted data part and the data part's length(PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG_PTR pulPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pEncryptedPart <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DecryptFinal",
		"comment":"/** \n * C_DecryptFinal finishes a multiple-part decryption operation. (Encryption and decryption)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the last decrypted data part and the last data part's length(PKCS#11 param: CK_BYTE_PTR pLastPart, CK_ULONG_PTR pulLastPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DigestInit",
		"comment":"/** \n * C_DigestInit initializes a message-digesting operation. (Message digesting)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the digesting mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DigestSingle",
		"comment":"/** \n * C_Digest digests data in a single part. (Message digesting)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param data the data to get digested and the data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)\n * @return the message digest and the length of the message digest(PKCS#11 param: CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (data <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DigestUpdate",
		"comment":"/** \n * C_DigestUpdate continues a multiple-part message-digesting operation. (Message digesting)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pPart the data to get digested and the data's length(PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pPart <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DigestKey",
		"comment":"/** \n * C_DigestKey continues a multi-part message-digesting operation, by digesting the value of a secret key as part of the data already digested. (Message digesting)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param hKey the handle of the secret key to be digested(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DigestFinal",
		"comment":"/** \n * C_DigestFinal finishes a multiple-part message-digesting operation. (Message digesting)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the message digest and the length of the message digest(PKCS#11 param: CK_BYTE_PTR pDigest, CK_ULONG_PTR pulDigestLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SignInit",
		"comment":"/** \n * C_SignInit initializes a signature (private key encryption) operation, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the signature mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the signature key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Sign",
		"comment":"/** \n * C_Sign signs (encrypts with private key) data in a single part, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pData the data to sign and the data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)\n * @return the signature and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pData <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SignUpdate",
		"comment":"/** \n * C_SignUpdate continues a multiple-part signature operation, where the signature is (will be) an appendix to the data, and plaintext cannot be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pPart the data part to sign and the data part's length(PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pPart <> null)\n * @postconditions\n */\n",
		"label":1
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SignFinal",
		"comment":"/** \n * C_SignFinal finishes a multiple-part signature operation, returning the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @return the signature and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SignRecoverInit",
		"comment":"/** \n * C_SignRecoverInit initializes a signature operation, where the data can be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the signature mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the signature key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SignRecover",
		"comment":"/** \n * C_SignRecover signs data in a single operation, where the data can be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pData the data to sign and the data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)\n * @return the signature and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG_PTR pulSignatureLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pData <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_VerifyInit",
		"comment":"/** \n * C_VerifyInit initializes a verification operation, where the signature is an appendix to the data, and plaintext cannot cannot be recovered from the signature (e.g. DSA). (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the verification mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the verification key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_Verify",
		"comment":"/** \n * C_Verify verifies a signature in a single-part operation, where the signature is an appendix to the data, and plaintext cannot be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pData the signed data and the signed data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG ulDataLen)\n * @param pSignature the signature to verify and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pData <> null) and (pSignature <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_VerifyUpdate",
		"comment":"/** \n * C_VerifyUpdate continues a multiple-part verification operation, where the signature is an appendix to the data, and plaintext cannot be recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pPart the signed data part and the signed data part's length(PKCS#11 param: CK_BYTE_PTR pPart, CK_ULONG ulPartLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pPart <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_VerifyFinal",
		"comment":"/** \n * C_VerifyFinal finishes a multiple-part verification operation, checking the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pSignature the signature to verify and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pSignature <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_VerifyRecoverInit",
		"comment":"/** \n * C_VerifyRecoverInit initializes a signature verification operation, where the data is recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the verification mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hKey the handle of the verification key(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_VerifyRecover",
		"comment":"/** \n * C_VerifyRecover verifies a signature in a single-part operation, where the data is recovered from the signature. (Signing and MACing)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pSignature the signature to verify and the signature's length(PKCS#11 param: CK_BYTE_PTR pSignature, CK_ULONG ulSignatureLen)\n * @return the recovered data and the recovered data's length(PKCS#11 param: CK_BYTE_PTR pData, CK_ULONG_PTR pulDataLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pSignature <> null)\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GenerateKey",
		"comment":"/** \n * C_GenerateKey generates a secret key, creating a new key object. (Key management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the key generation mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param pTemplate the template for the new key and the number ofattributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @return the handle of the new key(PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GenerateKeyPair",
		"comment":"/** \n * C_GenerateKeyPair generates a public-key/private-key pair, creating new key objects. (Key management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the key generation mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param pPublicKeyTemplate the template for the new public key and thenumber of attributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pPublicKeyTemplate, CK_ULONG ulPublicKeyAttributeCount)\n * @param pPrivateKeyTemplate the template for the new private key and thenumber of attributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pPrivateKeyTemplate CK_ULONG ulPrivateKeyAttributeCount)\n * @return a long array with exactly two elements and the public key handleas the first element and the private key handle as the second element (PKCS#11 param: CK_OBJECT_HANDLE_PTR phPublicKey, CK_OBJECT_HANDLE_PTR phPrivateKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pMechanism <> null)\n * @postconditions (result <> null) and (result.length == 2)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_WrapKey",
		"comment":"/** \n * C_WrapKey wraps (i.e., encrypts) a key. (Key management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the wrapping mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hWrappingKey the handle of the wrapping key(PKCS#11 param: CK_OBJECT_HANDLE hWrappingKey)\n * @param hKey the handle of the key to be wrapped(PKCS#11 param: CK_OBJECT_HANDLE hKey)\n * @return the wrapped key and the length of the wrapped key(PKCS#11 param: CK_BYTE_PTR pWrappedKey, CK_ULONG_PTR pulWrappedKeyLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions (result <> null)\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_UnwrapKey",
		"comment":"/** \n * C_UnwrapKey unwraps (decrypts) a wrapped key, creating a new key object. (Key management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the unwrapping mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hUnwrappingKey the handle of the unwrapping key(PKCS#11 param: CK_OBJECT_HANDLE hUnwrappingKey)\n * @param pWrappedKey the wrapped key to unwrap and the wrapped key's length(PKCS#11 param: CK_BYTE_PTR pWrappedKey, CK_ULONG ulWrappedKeyLen)\n * @param pTemplate the template for the new key and the number ofattributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @return the handle of the unwrapped key(PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pWrappedKey <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_DeriveKey",
		"comment":"/** \n * C_DeriveKey derives a key from a base key, creating a new key object. (Key management)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pMechanism the key derivation mechanism(PKCS#11 param: CK_MECHANISM_PTR pMechanism)\n * @param hBaseKey the handle of the base key(PKCS#11 param: CK_OBJECT_HANDLE hBaseKey)\n * @param pTemplate the template for the new key and the number ofattributes in the template (PKCS#11 param: CK_ATTRIBUTE_PTR pTemplate, CK_ULONG ulCount)\n * @return the handle of the derived key(PKCS#11 param: CK_OBJECT_HANDLE_PTR phKey)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_SeedRandom",
		"comment":"/** \n * C_SeedRandom mixes additional seed material into the token's random number generator. (Random number generation)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param pSeed the seed material and the seed material's length(PKCS#11 param: CK_BYTE_PTR pSeed, CK_ULONG ulSeedLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (pSeed <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.pkcs11.wrapper.PKCS11.C_GenerateRandom",
		"comment":"/** \n * C_GenerateRandom generates random data. (Random number generation)\n * @param hSession the session's handle(PKCS#11 param: CK_SESSION_HANDLE hSession)\n * @param RandomData receives the random data and the length of RandomDatais the length of random data to be generated (PKCS#11 param: CK_BYTE_PTR pRandomData, CK_ULONG ulRandomLen)\n * @exception PKCS11Exception If function returns other value than CKR_OK.\n * @preconditions (randomData <> null)\n * @postconditions\n */\n",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardEstablishContext",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardListReaders",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardConnect",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardTransmit",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardStatus",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardDisconnect",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardGetStatusChange",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardBeginTransaction",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardEndTransaction",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.security.smartcardio.PCSC.SCardControl",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.tracing.dtrace.JVM.activate0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.tracing.dtrace.JVM.dispose0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.tracing.dtrace.JVM.isEnabled0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.tracing.dtrace.JVM.isSupported0",
		"comment":"",
		"label":0
	},
	{
		"name":"sun.tracing.dtrace.JVM.defineClass0",
		"comment":"",
		"label":0
	}
]