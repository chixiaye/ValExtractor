diff --git a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java
index 2053d2adca..7982d9182d 100644
--- a/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java
+++ b/oak-core/src/main/java/org/apache/jackrabbit/oak/plugins/segment/file/FileStore.java
@@ -58,13 +58,7 @@ import org.apache.jackrabbit.oak.plugins.memory.BinaryPropertyState;
 import org.apache.jackrabbit.oak.plugins.memory.EmptyNodeState;
 import org.apache.jackrabbit.oak.plugins.memory.MultiBinaryPropertyState;
 import org.apache.jackrabbit.oak.plugins.memory.PropertyStates;
-import org.apache.jackrabbit.oak.plugins.segment.RecordId;
-import org.apache.jackrabbit.oak.plugins.segment.Segment;
-import org.apache.jackrabbit.oak.plugins.segment.SegmentBlob;
-import org.apache.jackrabbit.oak.plugins.segment.SegmentId;
-import org.apache.jackrabbit.oak.plugins.segment.SegmentTracker;
-import org.apache.jackrabbit.oak.plugins.segment.SegmentNodeState;
-import org.apache.jackrabbit.oak.plugins.segment.SegmentStore;
+import org.apache.jackrabbit.oak.plugins.segment.*;
 import org.apache.jackrabbit.oak.spi.blob.BlobStore;
 import org.apache.jackrabbit.oak.spi.state.ChildNodeEntry;
 import org.apache.jackrabbit.oak.spi.state.NodeBuilder;
@@ -383,11 +377,12 @@ public class FileStore implements SegmentStore {
             if (cleanup || !after.equals(before)) {
                 // needs to happen outside the synchronization block below to
                 // avoid a deadlock with another thread flushing the writer
-                tracker.getWriter().flush();
+                SegmentWriter segmentWriter = tracker.getWriter();
+                segmentWriter.flush();
 
                 // needs to happen outside the synchronization block below to
                 // prevent the flush from stopping concurrent reads and writes
-                writer.flush();
+                this.writer.flush();
 
                 synchronized (this) {
                     log.debug("TarMK journal update {} -> {}", before, after);
@@ -399,12 +394,12 @@ public class FileStore implements SegmentStore {
                         long start = System.nanoTime();
 
                         log.debug("TarMK compaction");
-                        tracker.getWriter().dropCache();
+                        segmentWriter.dropCache();
                         SegmentNodeState state = new SegmentNodeState(after);
                         NodeBuilder mem = EmptyNodeState.EMPTY_NODE.builder();
                         compact(state, "/", 5, mem);
                         setHead(state,
-                                tracker.getWriter().writeNode(
+                                segmentWriter.writeNode(
                                         mem.getNodeState()));
                         before = null;
                         after = null;
@@ -418,7 +413,7 @@ public class FileStore implements SegmentStore {
                                     id.getMostSignificantBits(),
                                     id.getLeastSignificantBits()));
                         }
-                        writer.cleanup(ids);
+                        this.writer.cleanup(ids);
 
                         List<TarReader> list =
                                 newArrayListWithCapacity(readers.size());
