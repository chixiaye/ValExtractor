diff --git a/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java b/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
index bdc095b..f867171 100644
--- a/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
+++ b/source/org/jfree/chart/renderer/xy/CyclicXYItemRenderer.java
@@ -179,6 +179,7 @@
         boolean xBoundMapping = false, yBoundMapping = false;
         CyclicNumberAxis cnax = null, cnay = null;
 
+        double x1 = x[1];
         if (domainAxis instanceof CyclicNumberAxis) {
             cnax = (CyclicNumberAxis) domainAxis;
             xcycleBound = cnax.getCycleBound();
@@ -186,17 +187,17 @@
             // If the segment must be splitted, insert a new point
             // Strict test forces to have real segments (not 2 equal points)
             // and avoids division by 0
-            if ((x[0] != x[1])
+            if ((x[0] != x1)
                     && ((xcycleBound >= x[0])
-                    && (xcycleBound <= x[1])
-                    || (xcycleBound >= x[1])
+                    && (xcycleBound <= x1)
+                    || (xcycleBound >= x1)
                     && (xcycleBound <= x[0]))) {
                 double[] nx = new double[3];
                 double[] ny = new double[3];
-                nx[0] = x[0]; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
+                nx[0] = x[0]; nx[2] = x1; ny[0] = y[0]; ny[2] = y[1];
                 nx[1] = xcycleBound;
                 ny[1] = (y[1] - y[0]) * (xcycleBound - x[0])
-                        / (x[1] - x[0]) + y[0];
+                        / (x1 - x[0]) + y[0];
                 x = nx; y = ny;
             }
         }
@@ -212,9 +213,9 @@
                     || (ycycleBound >= y[1]) && (ycycleBound <= y[0]))) {
                 double[] nx = new double[x.length + 1];
                 double[] ny = new double[y.length + 1];
-                nx[0] = x[0]; nx[2] = x[1]; ny[0] = y[0]; ny[2] = y[1];
+                nx[0] = x[0]; nx[2] = x1; ny[0] = y[0]; ny[2] = y[1];
                 ny[1] = ycycleBound;
-                nx[1] = (x[1] - x[0]) * (ycycleBound - y[0])
+                nx[1] = (x1 - x[0]) * (ycycleBound - y[0])
                         / (y[1] - y[0]) + x[0];
                 if (x.length == 3) {
                     nx[3] = x[2]; ny[3] = y[2];
@@ -226,11 +227,11 @@
                     || (ycycleBound >= y[2]) && (ycycleBound <= y[1]))) {
                 double[] nx = new double[4];
                 double[] ny = new double[4];
-                nx[0] = x[0]; nx[1] = x[1]; nx[3] = x[2];
+                nx[0] = x[0]; nx[1] = x1; nx[3] = x[2];
                 ny[0] = y[0]; ny[1] = y[1]; ny[3] = y[2];
                 ny[2] = ycycleBound;
-                nx[2] = (x[2] - x[1]) * (ycycleBound - y[1])
-                        / (y[2] - y[1]) + x[1];
+                nx[2] = (x[2] - x1) * (ycycleBound - y[1])
+                        / (y[2] - y[1]) + x1;
                 x = nx; y = ny;
             }
         }
@@ -246,9 +247,9 @@
 
         if (cnax != null) {
             if (xcycleBound == x[0]) {
-                cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);
+                cnax.setBoundMappedToLastCycle(x1 <= xcycleBound);
             }
-            if (xcycleBound == x[1]) {
+            if (xcycleBound == x1) {
                 cnax.setBoundMappedToLastCycle(x[0] <= xcycleBound);
             }
         }
@@ -264,11 +265,11 @@
                 newset, series, 1, selected, pass);
 
         if (cnax != null) {
-            if (xcycleBound == x[1]) {
+            if (xcycleBound == x1) {
                 cnax.setBoundMappedToLastCycle(x[2] <= xcycleBound);
             }
             if (xcycleBound == x[2]) {
-                cnax.setBoundMappedToLastCycle(x[1] <= xcycleBound);
+                cnax.setBoundMappedToLastCycle(x1 <= xcycleBound);
             }
         }
         if (cnay != null) {
