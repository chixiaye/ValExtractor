diff --git a/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java b/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java
index c469505..c0726be 100644
--- a/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java
+++ b/source/org/jfree/chart/renderer/category/StatisticalLineAndShapeRenderer.java
@@ -330,12 +330,13 @@
         }
 
         Shape hotspot = null;
-        if (pass == 1 && getItemShapeVisible(row, column)) {
+        PlotOrientation var_2535 = PlotOrientation.VERTICAL;
+		if (pass == 1 && getItemShapeVisible(row, column)) {
             Shape shape = getItemShape(row, column, selected);
             if (orientation == PlotOrientation.HORIZONTAL) {
                 shape = ShapeUtilities.createTranslatedShape(shape, y1, x1);
             }
-            else if (orientation == PlotOrientation.VERTICAL) {
+            else if (orientation == var_2535) {
                 shape = ShapeUtilities.createTranslatedShape(shape, x1, y1);
             }
             hotspot = shape;
@@ -365,7 +366,7 @@
                     drawItemLabel(g2, orientation, dataset, row, column,
                             selected, y1, x1, (meanValue.doubleValue() < 0.0));
                 }
-                else if (orientation == PlotOrientation.VERTICAL) {
+                else if (orientation == var_2535) {
                     drawItemLabel(g2, orientation, dataset, row, column,
                             selected, x1, y1, (meanValue.doubleValue() < 0.0));
                 }
@@ -400,7 +401,7 @@
                     if (orientation == PlotOrientation.HORIZONTAL) {
                         line = new Line2D.Double(y0, x0, y1, x1);
                     }
-                    else if (orientation == PlotOrientation.VERTICAL) {
+                    else if (orientation == var_2535) {
                         line = new Line2D.Double(x0, y0, x1, y1);
                     }
                     g2.setPaint(getItemPaint(row, column, selected));
