diff --git a/source/org/jfree/chart/axis/DateAxis.java b/source/org/jfree/chart/axis/DateAxis.java
index 059bc3a..f7ebbff 100644
--- a/source/org/jfree/chart/axis/DateAxis.java
+++ b/source/org/jfree/chart/axis/DateAxis.java
@@ -902,152 +902,154 @@
                 mm = calendar.getTime();
             }
             return mm;
-        }
-        else if (t.equals(DateTickUnitType.SECOND)) {
-            years = calendar.get(Calendar.YEAR);
-            months = calendar.get(Calendar.MONTH);
-            days = calendar.get(Calendar.DATE);
-            hours = calendar.get(Calendar.HOUR_OF_DAY);
-            minutes = calendar.get(Calendar.MINUTE);
-            if (this.tickMarkPosition == DateTickMarkPosition.START) {
-                milliseconds = 0;
-            }
-            else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {
-                milliseconds = 500;
-            }
-            else {
-                milliseconds = 999;
-            }
-            calendar.set(Calendar.MILLISECOND, milliseconds);
-            calendar.set(years, months, days, hours, minutes, value);
-            Date dd = calendar.getTime();
-            if (dd.getTime() >= date.getTime()) {
-                calendar.set(Calendar.SECOND, value - 1);
-                dd = calendar.getTime();
-            }
-            return dd;
-        }
-        else if (t.equals(DateTickUnitType.MINUTE)) {
-            years = calendar.get(Calendar.YEAR);
-            months = calendar.get(Calendar.MONTH);
-            days = calendar.get(Calendar.DATE);
-            hours = calendar.get(Calendar.HOUR_OF_DAY);
-            if (this.tickMarkPosition == DateTickMarkPosition.START) {
-               seconds = 0;
-            }
-            else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {
-                seconds = 30;
-            }
-            else {
-                seconds = 59;
-            }
-            calendar.clear(Calendar.MILLISECOND);
-            calendar.set(years, months, days, hours, value, seconds);
-            Date d0 = calendar.getTime();
-            if (d0.getTime() >= date.getTime()) {
-                calendar.set(Calendar.MINUTE, value - 1);
-                d0 = calendar.getTime();
-            }
-            return d0;
-        }
-        else if (t.equals(DateTickUnitType.HOUR)) {
-            years = calendar.get(Calendar.YEAR);
-            months = calendar.get(Calendar.MONTH);
-            days = calendar.get(Calendar.DATE);
-            if (this.tickMarkPosition == DateTickMarkPosition.START) {
-                minutes = 0;
-                seconds = 0;
-            }
-            else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {
-                minutes = 30;
-                seconds = 0;
-            }
-            else {
-                minutes = 59;
-                seconds = 59;
-            }
-            calendar.clear(Calendar.MILLISECOND);
-            calendar.set(years, months, days, value, minutes, seconds);
-            Date d1 = calendar.getTime();
-            if (d1.getTime() >= date.getTime()) {
-                calendar.set(Calendar.HOUR_OF_DAY, value - 1);
-                d1 = calendar.getTime();
-            }
-            return d1;
-        }
-        else if (t.equals(DateTickUnitType.DAY)) {
-            years = calendar.get(Calendar.YEAR);
-            months = calendar.get(Calendar.MONTH);
-            if (this.tickMarkPosition == DateTickMarkPosition.START) {
-                hours = 0;
-                minutes = 0;
-                seconds = 0;
-            }
-            else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {
-                hours = 12;
-                minutes = 0;
-                seconds = 0;
-            }
-            else {
-                hours = 23;
-                minutes = 59;
-                seconds = 59;
-            }
-            calendar.clear(Calendar.MILLISECOND);
-            calendar.set(years, months, value, hours, 0, 0);
-            // long result = calendar.getTimeInMillis();
-                // won't work with JDK 1.3
-            Date d2 = calendar.getTime();
-            if (d2.getTime() >= date.getTime()) {
-                calendar.set(Calendar.DATE, value - 1);
-                d2 = calendar.getTime();
-            }
-            return d2;
-        }
-        else if (t.equals(DateTickUnitType.MONTH)) {
-            years = calendar.get(Calendar.YEAR);
-            calendar.clear(Calendar.MILLISECOND);
-            calendar.set(years, value, 1, 0, 0, 0);
-            Month month = new Month(calendar.getTime(), this.timeZone,
-                    this.locale);
-            Date standardDate = calculateDateForPosition(
-                    month, this.tickMarkPosition);
-            long millis = standardDate.getTime();
-            if (millis >= date.getTime()) {
-                month = (Month) month.previous();
-                // need to peg the month in case the time zone isn't the
-                // default - see bug 2078057
-                month.peg(Calendar.getInstance(this.timeZone));
-                standardDate = calculateDateForPosition(
-                        month, this.tickMarkPosition);
-            }
-            return standardDate;
-        }
-        else if (t.equals(DateTickUnitType.YEAR)) {
-            if (this.tickMarkPosition == DateTickMarkPosition.START) {
-                months = 0;
-                days = 1;
-            }
-            else if (this.tickMarkPosition == DateTickMarkPosition.MIDDLE) {
-                months = 6;
-                days = 1;
-            }
-            else {
-                months = 11;
-                days = 31;
-            }
-            calendar.clear(Calendar.MILLISECOND);
-            calendar.set(value, months, days, 0, 0, 0);
-            Date d3 = calendar.getTime();
-            if (d3.getTime() >= date.getTime()) {
-                calendar.set(Calendar.YEAR, value - 1);
-                d3 = calendar.getTime();
-            }
-            return d3;
-        }
-        else {
-            return null;
-        }
+        } else {
+			DateTickMarkPosition var_486 = DateTickMarkPosition.MIDDLE;
+			if (t.equals(DateTickUnitType.SECOND)) {
+			    years = calendar.get(Calendar.YEAR);
+			    months = calendar.get(Calendar.MONTH);
+			    days = calendar.get(Calendar.DATE);
+			    hours = calendar.get(Calendar.HOUR_OF_DAY);
+			    minutes = calendar.get(Calendar.MINUTE);
+			    if (this.tickMarkPosition == DateTickMarkPosition.START) {
+			        milliseconds = 0;
+			    }
+			    else if (this.tickMarkPosition == var_486) {
+			        milliseconds = 500;
+			    }
+			    else {
+			        milliseconds = 999;
+			    }
+			    calendar.set(Calendar.MILLISECOND, milliseconds);
+			    calendar.set(years, months, days, hours, minutes, value);
+			    Date dd = calendar.getTime();
+			    if (dd.getTime() >= date.getTime()) {
+			        calendar.set(Calendar.SECOND, value - 1);
+			        dd = calendar.getTime();
+			    }
+			    return dd;
+			}
+			else if (t.equals(DateTickUnitType.MINUTE)) {
+			    years = calendar.get(Calendar.YEAR);
+			    months = calendar.get(Calendar.MONTH);
+			    days = calendar.get(Calendar.DATE);
+			    hours = calendar.get(Calendar.HOUR_OF_DAY);
+			    if (this.tickMarkPosition == DateTickMarkPosition.START) {
+			       seconds = 0;
+			    }
+			    else if (this.tickMarkPosition == var_486) {
+			        seconds = 30;
+			    }
+			    else {
+			        seconds = 59;
+			    }
+			    calendar.clear(Calendar.MILLISECOND);
+			    calendar.set(years, months, days, hours, value, seconds);
+			    Date d0 = calendar.getTime();
+			    if (d0.getTime() >= date.getTime()) {
+			        calendar.set(Calendar.MINUTE, value - 1);
+			        d0 = calendar.getTime();
+			    }
+			    return d0;
+			}
+			else if (t.equals(DateTickUnitType.HOUR)) {
+			    years = calendar.get(Calendar.YEAR);
+			    months = calendar.get(Calendar.MONTH);
+			    days = calendar.get(Calendar.DATE);
+			    if (this.tickMarkPosition == DateTickMarkPosition.START) {
+			        minutes = 0;
+			        seconds = 0;
+			    }
+			    else if (this.tickMarkPosition == var_486) {
+			        minutes = 30;
+			        seconds = 0;
+			    }
+			    else {
+			        minutes = 59;
+			        seconds = 59;
+			    }
+			    calendar.clear(Calendar.MILLISECOND);
+			    calendar.set(years, months, days, value, minutes, seconds);
+			    Date d1 = calendar.getTime();
+			    if (d1.getTime() >= date.getTime()) {
+			        calendar.set(Calendar.HOUR_OF_DAY, value - 1);
+			        d1 = calendar.getTime();
+			    }
+			    return d1;
+			}
+			else if (t.equals(DateTickUnitType.DAY)) {
+			    years = calendar.get(Calendar.YEAR);
+			    months = calendar.get(Calendar.MONTH);
+			    if (this.tickMarkPosition == DateTickMarkPosition.START) {
+			        hours = 0;
+			        minutes = 0;
+			        seconds = 0;
+			    }
+			    else if (this.tickMarkPosition == var_486) {
+			        hours = 12;
+			        minutes = 0;
+			        seconds = 0;
+			    }
+			    else {
+			        hours = 23;
+			        minutes = 59;
+			        seconds = 59;
+			    }
+			    calendar.clear(Calendar.MILLISECOND);
+			    calendar.set(years, months, value, hours, 0, 0);
+			    // long result = calendar.getTimeInMillis();
+			        // won't work with JDK 1.3
+			    Date d2 = calendar.getTime();
+			    if (d2.getTime() >= date.getTime()) {
+			        calendar.set(Calendar.DATE, value - 1);
+			        d2 = calendar.getTime();
+			    }
+			    return d2;
+			}
+			else if (t.equals(DateTickUnitType.MONTH)) {
+			    years = calendar.get(Calendar.YEAR);
+			    calendar.clear(Calendar.MILLISECOND);
+			    calendar.set(years, value, 1, 0, 0, 0);
+			    Month month = new Month(calendar.getTime(), this.timeZone,
+			            this.locale);
+			    Date standardDate = calculateDateForPosition(
+			            month, this.tickMarkPosition);
+			    long millis = standardDate.getTime();
+			    if (millis >= date.getTime()) {
+			        month = (Month) month.previous();
+			        // need to peg the month in case the time zone isn't the
+			        // default - see bug 2078057
+			        month.peg(Calendar.getInstance(this.timeZone));
+			        standardDate = calculateDateForPosition(
+			                month, this.tickMarkPosition);
+			    }
+			    return standardDate;
+			}
+			else if (t.equals(DateTickUnitType.YEAR)) {
+			    if (this.tickMarkPosition == DateTickMarkPosition.START) {
+			        months = 0;
+			        days = 1;
+			    }
+			    else if (this.tickMarkPosition == var_486) {
+			        months = 6;
+			        days = 1;
+			    }
+			    else {
+			        months = 11;
+			        days = 31;
+			    }
+			    calendar.clear(Calendar.MILLISECOND);
+			    calendar.set(value, months, days, 0, 0, 0);
+			    Date d3 = calendar.getTime();
+			    if (d3.getTime() >= date.getTime()) {
+			        calendar.set(Calendar.YEAR, value - 1);
+			        d3 = calendar.getTime();
+			    }
+			    return d3;
+			}
+			else {
+			    return null;
+			}
+		}
 
     }
 
