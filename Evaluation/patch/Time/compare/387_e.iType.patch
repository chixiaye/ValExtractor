==> /tmp/ours.java <==
diff --git a/src/main/java/org/joda/time/convert/ConverterSet.java b/src/main/java/org/joda/time/convert/ConverterSet.java
index d571c64..f3df6f7 100644
--- a/src/main/java/org/joda/time/convert/ConverterSet.java
+++ b/src/main/java/org/joda/time/convert/ConverterSet.java
@@ -53,7 +53,8 @@
         Entry e;
         // This loop depends on there being at least one null slot.
         while ((e = entries[index]) != null) {
-            if (e.iType == type) {
+            Class<?> var_387 = e.iType;
+			if (var_387 == type) {
                 return e.iConverter;
             }
             if (++index >= length) {

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/joda/time/convert/ConverterSet.java b/src/main/java/org/joda/time/convert/ConverterSet.java
index d571c64..f3df6f7 100644
--- a/src/main/java/org/joda/time/convert/ConverterSet.java
+++ b/src/main/java/org/joda/time/convert/ConverterSet.java
@@ -53,7 +53,8 @@
         Entry e;
         // This loop depends on there being at least one null slot.
         while ((e = entries[index]) != null) {
-            if (e.iType == type) {
+            Class<?> var_387 = e.iType;
+			if (var_387 == type) {
                 return e.iConverter;
             }
             if (++index >= length) {

==> /tmp/idea.java <==
diff --git a/src/main/java/org/joda/time/convert/ConverterSet.java b/src/main/java/org/joda/time/convert/ConverterSet.java
index d571c64..5450167 100644
--- a/src/main/java/org/joda/time/convert/ConverterSet.java
+++ b/src/main/java/org/joda/time/convert/ConverterSet.java
@@ -52,8 +52,9 @@
 
         Entry e;
         // This loop depends on there being at least one null slot.
+        Class<?> iType = e.iType;
         while ((e = entries[index]) != null) {
-            if (e.iType == type) {
+            if (iType == type) {
                 return e.iConverter;
             }
             if (++index >= length) {
@@ -96,7 +97,7 @@
         Entry[] newEntries = new Entry[newLength];
         for (int i=0; i<length; i++) {
             e = entries[i];
-            type = e.iType;
+            type = iType;
             index = type == null ? 0 : type.hashCode() & (newLength - 1);
             while (newEntries[index] != null) {
                 if (++index >= newLength) {
