diff --git a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
index fa5c164..fa76200 100644
--- a/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
+++ b/src/main/java/org/joda/time/tz/DateTimeZoneBuilder.java
@@ -30,12 +30,7 @@
 import java.util.Locale;
 import java.util.Set;
 
-import org.joda.time.Chronology;
-import org.joda.time.DateTime;
-import org.joda.time.DateTimeUtils;
-import org.joda.time.DateTimeZone;
-import org.joda.time.Period;
-import org.joda.time.PeriodType;
+import org.joda.time.*;
 import org.joda.time.chrono.ISOChronology;
 
 /**
@@ -848,15 +843,16 @@
             long testInstant = instant;
 
             int year;
+            DateTimeField year1 = chrono.year();
             if (instant == Long.MIN_VALUE) {
                 year = Integer.MIN_VALUE;
             } else {
-                year = chrono.year().get(instant + wallOffset);
+                year = year1.get(instant + wallOffset);
             }
 
             if (year < iFromYear) {
                 // First advance instant to start of from year.
-                testInstant = chrono.year().set(0, iFromYear) - wallOffset;
+                testInstant = year1.set(0, iFromYear) - wallOffset;
                 // Back off one millisecond to account for next recurrence
                 // being exactly at the beginning of the year.
                 testInstant -= 1;
@@ -865,7 +861,7 @@
             long next = iRecurrence.next(testInstant, standardOffset, saveMillis);
 
             if (next > instant) {
-                year = chrono.year().get(next + wallOffset);
+                year = year1.get(next + wallOffset);
                 if (year > iToYear) {
                     // Out of range, return original value.
                     next = instant;
