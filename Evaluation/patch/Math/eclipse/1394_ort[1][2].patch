diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
index fbdafa3..784df04 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
@@ -406,11 +406,12 @@
       // the first one greater than 0.45 is safe (this leads to a simple
       // test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)
       double s = ort[0][0] + ort[1][1] + ort[2][2];
-      if (s > -0.19) {
+      double var_1394 = ort[1][2];
+	if (s > -0.19) {
           // compute q0 and deduce q1, q2 and q3
           quat[0] = 0.5 * FastMath.sqrt(s + 1.0);
           double inv = 0.25 / quat[0];
-          quat[1] = inv * (ort[1][2] - ort[2][1]);
+          quat[1] = inv * (var_1394 - ort[2][1]);
           quat[2] = inv * (ort[2][0] - ort[0][2]);
           quat[3] = inv * (ort[0][1] - ort[1][0]);
       } else {
@@ -419,7 +420,7 @@
               // compute q1 and deduce q0, q2 and q3
               quat[1] = 0.5 * FastMath.sqrt(s + 1.0);
               double inv = 0.25 / quat[1];
-              quat[0] = inv * (ort[1][2] - ort[2][1]);
+              quat[0] = inv * (var_1394 - ort[2][1]);
               quat[2] = inv * (ort[0][1] + ort[1][0]);
               quat[3] = inv * (ort[0][2] + ort[2][0]);
           } else {
@@ -430,7 +431,7 @@
                   double inv = 0.25 / quat[2];
                   quat[0] = inv * (ort[2][0] - ort[0][2]);
                   quat[1] = inv * (ort[0][1] + ort[1][0]);
-                  quat[3] = inv * (ort[2][1] + ort[1][2]);
+                  quat[3] = inv * (ort[2][1] + var_1394);
               } else {
                   // compute q3 and deduce q0, q1 and q2
                   s = ort[2][2] - ort[0][0] - ort[1][1];
@@ -438,7 +439,7 @@
                   double inv = 0.25 / quat[3];
                   quat[0] = inv * (ort[0][1] - ort[1][0]);
                   quat[1] = inv * (ort[0][2] + ort[2][0]);
-                  quat[2] = inv * (ort[2][1] + ort[1][2]);
+                  quat[2] = inv * (ort[2][1] + var_1394);
               }
           }
       }
