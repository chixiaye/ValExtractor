diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
index fbdafa3..062883b 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
@@ -406,12 +406,13 @@
       // the first one greater than 0.45 is safe (this leads to a simple
       // test since qi = 0.45 implies 4 qi^2 - 1 = -0.19)
       double s = ort[0][0] + ort[1][1] + ort[2][2];
-      if (s > -0.19) {
+      double var_1389 = ort[0][2];
+	if (s > -0.19) {
           // compute q0 and deduce q1, q2 and q3
           quat[0] = 0.5 * FastMath.sqrt(s + 1.0);
           double inv = 0.25 / quat[0];
           quat[1] = inv * (ort[1][2] - ort[2][1]);
-          quat[2] = inv * (ort[2][0] - ort[0][2]);
+          quat[2] = inv * (ort[2][0] - var_1389);
           quat[3] = inv * (ort[0][1] - ort[1][0]);
       } else {
           s = ort[0][0] - ort[1][1] - ort[2][2];
@@ -421,14 +422,14 @@
               double inv = 0.25 / quat[1];
               quat[0] = inv * (ort[1][2] - ort[2][1]);
               quat[2] = inv * (ort[0][1] + ort[1][0]);
-              quat[3] = inv * (ort[0][2] + ort[2][0]);
+              quat[3] = inv * (var_1389 + ort[2][0]);
           } else {
               s = ort[1][1] - ort[0][0] - ort[2][2];
               if (s > -0.19) {
                   // compute q2 and deduce q0, q1 and q3
                   quat[2] = 0.5 * FastMath.sqrt(s + 1.0);
                   double inv = 0.25 / quat[2];
-                  quat[0] = inv * (ort[2][0] - ort[0][2]);
+                  quat[0] = inv * (ort[2][0] - var_1389);
                   quat[1] = inv * (ort[0][1] + ort[1][0]);
                   quat[3] = inv * (ort[2][1] + ort[1][2]);
               } else {
@@ -437,7 +438,7 @@
                   quat[3] = 0.5 * FastMath.sqrt(s + 1.0);
                   double inv = 0.25 / quat[3];
                   quat[0] = inv * (ort[0][1] - ort[1][0]);
-                  quat[1] = inv * (ort[0][2] + ort[2][0]);
+                  quat[1] = inv * (var_1389 + ort[2][0]);
                   quat[2] = inv * (ort[2][1] + ort[1][2]);
               }
           }
