diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
index c5c8ecf..0a47c7b 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
@@ -1072,7 +1072,8 @@
         throws NotARotationMatrixException {
 
         T x00 = m[0][0];
-        T x01 = m[0][1];
+        T var_1334 = m[0][1];
+		T x01 = var_1334;
         T x02 = m[0][2];
         T x10 = m[1][0];
         T x11 = m[1][1];
@@ -1091,18 +1092,18 @@
 
             // Mt.Xn
             final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
-            final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
+            final T mx10 = var_1334.multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
             final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
             final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
-            final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
+            final T mx11 = var_1334.multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
             final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
             final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
-            final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
+            final T mx12 = var_1334.multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
             final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
 
             // Xn+1
             o[0][0] = x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));
-            o[0][1] = x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(m[0][1]).multiply(0.5));
+            o[0][1] = x01.subtract(x00.multiply(mx01).add(x01.multiply(mx11)).add(x02.multiply(mx21)).subtract(var_1334).multiply(0.5));
             o[0][2] = x02.subtract(x00.multiply(mx02).add(x01.multiply(mx12)).add(x02.multiply(mx22)).subtract(m[0][2]).multiply(0.5));
             o[1][0] = x10.subtract(x10.multiply(mx00).add(x11.multiply(mx10)).add(x12.multiply(mx20)).subtract(m[1][0]).multiply(0.5));
             o[1][1] = x11.subtract(x10.multiply(mx01).add(x11.multiply(mx11)).add(x12.multiply(mx21)).subtract(m[1][1]).multiply(0.5));
@@ -1113,7 +1114,7 @@
 
             // correction on each elements
             final double corr00 = o[0][0].getReal() - m[0][0].getReal();
-            final double corr01 = o[0][1].getReal() - m[0][1].getReal();
+            final double corr01 = o[0][1].getReal() - var_1334.getReal();
             final double corr02 = o[0][2].getReal() - m[0][2].getReal();
             final double corr10 = o[1][0].getReal() - m[1][0].getReal();
             final double corr11 = o[1][1].getReal() - m[1][1].getReal();
