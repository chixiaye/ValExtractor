diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..a4e553a 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1911,19 +1911,20 @@
         }
 
         // Test for divide by zero
-        if (divisor == 0) {
+        Dfp var_685 = getZero();
+		if (divisor == 0) {
             field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
-            Dfp result = newInstance(getZero());
+            Dfp result = newInstance(var_685);
             result.sign = sign;
             result.nans = INFINITE;
-            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
+            result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, var_685, result);
             return result;
         }
 
         // range check divisor
         if (divisor < 0 || divisor >= RADIX) {
             field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-            Dfp result = newInstance(getZero());
+            Dfp result = newInstance(var_685);
             result.nans = QNAN;
             result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
             return result;
