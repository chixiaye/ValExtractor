diff --git a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
index eceb87a..9e587c8 100644
--- a/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
+++ b/src/main/java/org/apache/commons/math3/analysis/function/Sigmoid.java
@@ -170,11 +170,12 @@
 
         double[] f = new double[t.getOrder() + 1];
         final double exp = FastMath.exp(-t.getValue());
-        if (Double.isInfinite(exp)) {
+        int var_186 = f.length;
+		if (Double.isInfinite(exp)) {
 
             // special handling near lower boundary, to avoid NaN
             f[0] = lo;
-            Arrays.fill(f, 1, f.length, 0.0);
+            Arrays.fill(f, 1, var_186, 0.0);
 
         } else {
 
@@ -184,11 +185,11 @@
             // P_0(t) = 1, P_1(t) = t, P_2(t) = t^2 - t, P_3(t) = t^3 - 4 t^2 + t...
             // the general recurrence relation for P_n is:
             // P_n(x) = n t P_(n-1)(t) - t (1 + t) P_(n-1)'(t)
-            final double[] p = new double[f.length];
+            final double[] p = new double[var_186];
 
             final double inv   = 1 / (1 + exp);
             double coeff = hi - lo;
-            for (int n = 0; n < f.length; ++n) {
+            for (int n = 0; n < var_186; ++n) {
 
                 // update and evaluate polynomial P_n(t)
                 double v = 0;
