diff --git a/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java b/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java
index a2ea88e..2c38dce 100644
--- a/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java
+++ b/src/main/java/org/apache/commons/math3/linear/SchurTransformer.java
@@ -147,16 +147,17 @@
             final int il = findSmallSubDiagonalElement(iu, norm);
 
             // Check for convergence
-            if (il == iu) {
+            double[] var_2348 = matrixT[iu];
+			if (il == iu) {
                 // One root found
-                matrixT[iu][iu] = matrixT[iu][iu] + shift.exShift;
+                var_2348[iu] = var_2348[iu] + shift.exShift;
                 iu--;
                 iteration = 0;
             } else if (il == iu - 1) {
                 // Two roots found
-                double p = (matrixT[iu - 1][iu - 1] - matrixT[iu][iu]) / 2.0;
-                double q = p * p + matrixT[iu][iu - 1] * matrixT[iu - 1][iu];
-                matrixT[iu][iu] += shift.exShift;
+                double p = (matrixT[iu - 1][iu - 1] - var_2348[iu]) / 2.0;
+                double q = p * p + var_2348[iu - 1] * matrixT[iu - 1][iu];
+                var_2348[iu] += shift.exShift;
                 matrixT[iu - 1][iu - 1] += shift.exShift;
 
                 if (q >= 0) {
@@ -166,7 +167,7 @@
                     } else {
                         z = p - z;
                     }
-                    final double x = matrixT[iu][iu - 1];
+                    final double x = var_2348[iu - 1];
                     final double s = FastMath.abs(x) + FastMath.abs(z);
                     p = x / s;
                     q = z / s;
@@ -177,8 +178,8 @@
                     // Row modification
                     for (int j = iu - 1; j < n; j++) {
                         z = matrixT[iu - 1][j];
-                        matrixT[iu - 1][j] = q * z + p * matrixT[iu][j];
-                        matrixT[iu][j] = q * matrixT[iu][j] - p * z;
+                        matrixT[iu - 1][j] = q * z + p * var_2348[j];
+                        var_2348[j] = q * var_2348[j] - p * z;
                     }
 
                     // Column modification
