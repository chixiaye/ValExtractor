diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java
index 66ddfde..f5d43eb 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/UnivariatePeriodicInterpolator.java
@@ -85,17 +85,18 @@
     public UnivariateFunction interpolate(double[] xval,
                                           double[] yval)
         throws NumberIsTooSmallException, NonMonotonicSequenceException {
-        if (xval.length < extend) {
-            throw new NumberIsTooSmallException(xval.length, extend, true);
+        int var_414 = xval.length;
+		if (var_414 < extend) {
+            throw new NumberIsTooSmallException(var_414, extend, true);
         }
 
         MathArrays.checkOrder(xval);
         final double offset = xval[0];
 
-        final int len = xval.length + extend * 2;
+        final int len = var_414 + extend * 2;
         final double[] x = new double[len];
         final double[] y = new double[len];
-        for (int i = 0; i < xval.length; i++) {
+        for (int i = 0; i < var_414; i++) {
             final int index = i + extend;
             x[index] = MathUtils.reduce(xval[i], period, offset);
             y[index] = yval[i];
@@ -103,7 +104,7 @@
 
         // Wrap to enable interpolation at the boundaries.
         for (int i = 0; i < extend; i++) {
-            int index = xval.length - extend + i;
+            int index = var_414 - extend + i;
             x[i] = MathUtils.reduce(xval[index], period, offset) - period;
             y[i] = yval[index];
 
