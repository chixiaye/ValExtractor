diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 2ff86a0..4985152 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -226,7 +226,8 @@
 
       // iterate over step size, ensuring local normalized error is smaller than 1
       double error = 10;
-      while (error >= 1.0) {
+      double var_2666 = FastMath.max(minReduction, safety * FastMath.pow(error, exp));
+	while (error >= 1.0) {
 
         if (firstTime || !fsal) {
           // first stage
@@ -290,7 +291,7 @@
           // reject the step and attempt to reduce error by stepsize control
           final double factor =
               FastMath.min(maxGrowth,
-                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+                           var_2666);
           hNew = filterStep(stepSize * factor, forward, false);
         }
 
@@ -315,7 +316,7 @@
 
           // stepsize control for next step
           final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+              FastMath.min(maxGrowth, var_2666);
           final double  scaledH    = stepSize * factor;
           final double  nextT      = stepStart + scaledH;
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
