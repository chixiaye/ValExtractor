diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java
index cc55dbe..2442634 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/RungeKuttaIntegrator.java
@@ -105,11 +105,12 @@
     final double[] y       = y0.clone();
     final int stages       = c.length + 1;
     final double[][] yDotK = new double[stages][];
-    for (int i = 0; i < stages; ++i) {
-      yDotK [i] = new double[y0.length];
+    int var_2695 = y0.length;
+	for (int i = 0; i < stages; ++i) {
+      yDotK [i] = new double[var_2695];
     }
     final double[] yTmp    = y0.clone();
-    final double[] yDotTmp = new double[y0.length];
+    final double[] yDotTmp = new double[var_2695];
 
     // set up an interpolator sharing the integrator arrays
     final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
@@ -134,7 +135,7 @@
       // next stages
       for (int k = 1; k < stages; ++k) {
 
-          for (int j = 0; j < y0.length; ++j) {
+          for (int j = 0; j < var_2695; ++j) {
               double sum = a[k-1][0] * yDotK[0][j];
               for (int l = 1; l < k; ++l) {
                   sum += a[k-1][l] * yDotK[l][j];
@@ -147,7 +148,7 @@
       }
 
       // estimate the state at the end of the step
-      for (int j = 0; j < y0.length; ++j) {
+      for (int j = 0; j < var_2695; ++j) {
           double sum    = b[0] * yDotK[0][j];
           for (int l = 1; l < stages; ++l) {
               sum    += b[l] * yDotK[l][j];
@@ -157,8 +158,8 @@
 
       // discrete events handling
       interpolator.storeTime(stepStart + stepSize);
-      System.arraycopy(yTmp, 0, y, 0, y0.length);
-      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, y0.length);
+      System.arraycopy(yTmp, 0, y, 0, var_2695);
+      System.arraycopy(yDotK[stages - 1], 0, yDotTmp, 0, var_2695);
       stepStart = acceptStep(interpolator, y, yDotTmp, t);
 
       if (!isLastStep) {
