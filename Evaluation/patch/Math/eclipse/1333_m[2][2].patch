diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
index c5c8ecf..890c63f 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/FieldRotation.java
@@ -1079,7 +1079,8 @@
         T x12 = m[1][2];
         T x20 = m[2][0];
         T x21 = m[2][1];
-        T x22 = m[2][2];
+        T var_1333 = m[2][2];
+		T x22 = var_1333;
         double fn = 0;
         double fn1;
 
@@ -1092,13 +1093,13 @@
             // Mt.Xn
             final T mx00 = m[0][0].multiply(x00).add(m[1][0].multiply(x10)).add(m[2][0].multiply(x20));
             final T mx10 = m[0][1].multiply(x00).add(m[1][1].multiply(x10)).add(m[2][1].multiply(x20));
-            final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(m[2][2].multiply(x20));
+            final T mx20 = m[0][2].multiply(x00).add(m[1][2].multiply(x10)).add(var_1333.multiply(x20));
             final T mx01 = m[0][0].multiply(x01).add(m[1][0].multiply(x11)).add(m[2][0].multiply(x21));
             final T mx11 = m[0][1].multiply(x01).add(m[1][1].multiply(x11)).add(m[2][1].multiply(x21));
-            final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(m[2][2].multiply(x21));
+            final T mx21 = m[0][2].multiply(x01).add(m[1][2].multiply(x11)).add(var_1333.multiply(x21));
             final T mx02 = m[0][0].multiply(x02).add(m[1][0].multiply(x12)).add(m[2][0].multiply(x22));
             final T mx12 = m[0][1].multiply(x02).add(m[1][1].multiply(x12)).add(m[2][1].multiply(x22));
-            final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(m[2][2].multiply(x22));
+            final T mx22 = m[0][2].multiply(x02).add(m[1][2].multiply(x12)).add(var_1333.multiply(x22));
 
             // Xn+1
             o[0][0] = x00.subtract(x00.multiply(mx00).add(x01.multiply(mx10)).add(x02.multiply(mx20)).subtract(m[0][0]).multiply(0.5));
@@ -1109,7 +1110,7 @@
             o[1][2] = x12.subtract(x10.multiply(mx02).add(x11.multiply(mx12)).add(x12.multiply(mx22)).subtract(m[1][2]).multiply(0.5));
             o[2][0] = x20.subtract(x20.multiply(mx00).add(x21.multiply(mx10)).add(x22.multiply(mx20)).subtract(m[2][0]).multiply(0.5));
             o[2][1] = x21.subtract(x20.multiply(mx01).add(x21.multiply(mx11)).add(x22.multiply(mx21)).subtract(m[2][1]).multiply(0.5));
-            o[2][2] = x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(m[2][2]).multiply(0.5));
+            o[2][2] = x22.subtract(x20.multiply(mx02).add(x21.multiply(mx12)).add(x22.multiply(mx22)).subtract(var_1333).multiply(0.5));
 
             // correction on each elements
             final double corr00 = o[0][0].getReal() - m[0][0].getReal();
@@ -1120,7 +1121,7 @@
             final double corr12 = o[1][2].getReal() - m[1][2].getReal();
             final double corr20 = o[2][0].getReal() - m[2][0].getReal();
             final double corr21 = o[2][1].getReal() - m[2][1].getReal();
-            final double corr22 = o[2][2].getReal() - m[2][2].getReal();
+            final double corr22 = o[2][2].getReal() - var_1333.getReal();
 
             // Frobenius norm of the correction
             fn1 = corr00 * corr00 + corr01 * corr01 + corr02 * corr02 +
