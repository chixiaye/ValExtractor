diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..9b9fe0d 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1348,10 +1348,11 @@
 
         /* add the mantissas */
         int rh = 0; /* acts as a carry */
-        for (int i = 0; i < mant.length; i++) {
+        int[] var_609 = result.mant;
+		for (int i = 0; i < mant.length; i++) {
             final int r = a.mant[i]+b.mant[i]+rh;
             rh = r / RADIX;
-            result.mant[i] = r - rh * RADIX;
+            var_609[i] = r - rh * RADIX;
         }
         result.exp = a.exp;
         result.sign = rsign;
@@ -1360,9 +1361,9 @@
          * normal and should be ignored.  */
 
         if (rh != 0 && (asign == bsign)) {
-            final int lostdigit = result.mant[0];
+            final int lostdigit = var_609[0];
             result.shiftRight();
-            result.mant[mant.length-1] = rh;
+            var_609[mant.length-1] = rh;
             final int excp = result.round(lostdigit);
             if (excp != 0) {
                 result = dotrap(excp, ADD_TRAP, x, result);
@@ -1371,19 +1372,19 @@
 
         /* normalize the result */
         for (int i = 0; i < mant.length; i++) {
-            if (result.mant[mant.length-1] != 0) {
+            if (var_609[mant.length-1] != 0) {
                 break;
             }
             result.shiftLeft();
             if (i == 0) {
-                result.mant[0] = aextradigit+bextradigit;
+                var_609[0] = aextradigit+bextradigit;
                 aextradigit = 0;
                 bextradigit = 0;
             }
         }
 
         /* result is zero if after normalization the most sig. digit is zero */
-        if (result.mant[mant.length-1] == 0) {
+        if (var_609[mant.length-1] == 0) {
             result.exp = 0;
 
             if (asign != bsign) {
