diff --git a/src/main/java/org/apache/commons/math3/special/Beta.java b/src/main/java/org/apache/commons/math3/special/Beta.java
index a425f99..7cbb031 100644
--- a/src/main/java/org/apache/commons/math3/special/Beta.java
+++ b/src/main/java/org/apache/commons/math3/special/Beta.java
@@ -472,40 +472,43 @@
                            logGammaMinusLogGammaSum(ared, b);
                 }
             }
-        } else if (a >= 1.0) {
-            if (b > 2.0) {
-                if (b < 10.0) {
-                    double prod = 1.0;
-                    double bred = b;
-                    while (bred > 2.0) {
-                        bred -= 1.0;
-                        prod *= bred / (a + bred);
-                    }
-                    return FastMath.log(prod) +
-                           (Gamma.logGamma(a) +
-                            (Gamma.logGamma(bred) -
-                             logGammaSum(a, bred)));
-                } else {
-                    return Gamma.logGamma(a) +
-                           logGammaMinusLogGammaSum(a, b);
-                }
-            } else {
-                return Gamma.logGamma(a) +
-                       Gamma.logGamma(b) -
-                       logGammaSum(a, b);
-            }
         } else {
-            if (b >= 10.0) {
-                return Gamma.logGamma(a) +
-                       logGammaMinusLogGammaSum(a, b);
-            } else {
-                // The following command is the original NSWC implementation.
-                // return Gamma.logGamma(a) +
-                // (Gamma.logGamma(b) - Gamma.logGamma(a + b));
-                // The following command turns out to be more accurate.
-                return FastMath.log(Gamma.gamma(a) * Gamma.gamma(b) /
-                                    Gamma.gamma(a + b));
-            }
-        }
+			double var_3681 = Gamma.logGamma(a);
+			if (a >= 1.0) {
+			    if (b > 2.0) {
+			        if (b < 10.0) {
+			            double prod = 1.0;
+			            double bred = b;
+			            while (bred > 2.0) {
+			                bred -= 1.0;
+			                prod *= bred / (a + bred);
+			            }
+			            return FastMath.log(prod) +
+			                   (var_3681 +
+			                    (Gamma.logGamma(bred) -
+			                     logGammaSum(a, bred)));
+			        } else {
+			            return var_3681 +
+			                   logGammaMinusLogGammaSum(a, b);
+			        }
+			    } else {
+			        return var_3681 +
+			               Gamma.logGamma(b) -
+			               logGammaSum(a, b);
+			    }
+			} else {
+			    if (b >= 10.0) {
+			        return var_3681 +
+			               logGammaMinusLogGammaSum(a, b);
+			    } else {
+			        // The following command is the original NSWC implementation.
+			        // return Gamma.logGamma(a) +
+			        // (Gamma.logGamma(b) - Gamma.logGamma(a + b));
+			        // The following command turns out to be more accurate.
+			        return FastMath.log(Gamma.gamma(a) * Gamma.gamma(b) /
+			                            Gamma.gamma(a + b));
+			    }
+			}
+		}
     }
 }
