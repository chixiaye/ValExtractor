diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..7a5ce75 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -505,8 +505,9 @@
     public static Dfp pow(Dfp x, final Dfp y) {
 
         // make sure we don't mix number with different precision
-        if (x.getField().getRadixDigits() != y.getField().getRadixDigits()) {
-            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+        DfpField var_813 = x.getField();
+		if (var_813.getRadixDigits() != y.getField().getRadixDigits()) {
+            var_813.setIEEEFlagsBits(DfpField.FLAG_INVALID);
             final Dfp result = x.newInstance(x.getZero());
             result.nans = Dfp.QNAN;
             return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, result);
@@ -526,7 +527,7 @@
         if (y.equals(one)) {
             if (x.isNaN()) {
                 // Test for NaNs
-                x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+                var_813.setIEEEFlagsBits(DfpField.FLAG_INVALID);
                 return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x);
             }
             return x;
@@ -534,7 +535,7 @@
 
         if (x.isNaN() || y.isNaN()) {
             // Test for NaNs
-            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            var_813.setIEEEFlagsBits(DfpField.FLAG_INVALID);
             return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
         }
 
@@ -590,7 +591,7 @@
         }
 
         if (x.equals(one) && y.classify() == Dfp.INFINITE) {
-            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            var_813.setIEEEFlagsBits(DfpField.FLAG_INVALID);
             return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
         }
 
@@ -624,7 +625,7 @@
         }
 
         if (invert && !y.rint().equals(y)) {
-            x.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);
+            var_813.setIEEEFlagsBits(DfpField.FLAG_INVALID);
             return x.dotrap(DfpField.FLAG_INVALID, POW_TRAP, x, x.newInstance((byte)1, Dfp.QNAN));
         }
 
@@ -639,9 +640,9 @@
 
             if (v.unequal(zero)) {
                 final Dfp a = v.multiply(log(x));
-                final Dfp b = a.divide(x.getField().getLn2()).rint();
+                final Dfp b = a.divide(var_813.getLn2()).rint();
 
-                final Dfp c = a.subtract(b.multiply(x.getField().getLn2()));
+                final Dfp c = a.subtract(b.multiply(var_813.getLn2()));
                 r = splitPow(split(x), ui);
                 r = r.multiply(pow(two, b.intValue()));
                 r = r.multiply(exp(c));
