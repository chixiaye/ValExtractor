diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolator.java
index 54f0679..0559dd1 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/DormandPrince54StepInterpolator.java
@@ -169,19 +169,20 @@
   protected void computeInterpolatedStateAndDerivatives(final double theta,
                                           final double oneMinusThetaH) {
 
-    if (! vectorsInitialized) {
+    int var_2650 = interpolatedState.length;
+	if (! vectorsInitialized) {
 
       if (v1 == null) {
-        v1 = new double[interpolatedState.length];
-        v2 = new double[interpolatedState.length];
-        v3 = new double[interpolatedState.length];
-        v4 = new double[interpolatedState.length];
+        v1 = new double[var_2650];
+        v2 = new double[var_2650];
+        v3 = new double[var_2650];
+        v4 = new double[var_2650];
       }
 
       // no step finalization is needed for this interpolator
 
       // we need to compute the interpolation vectors for this time step
-      for (int i = 0; i < interpolatedState.length; ++i) {
+      for (int i = 0; i < var_2650; ++i) {
           final double yDot0 = yDotK[0][i];
           final double yDot2 = yDotK[2][i];
           final double yDot3 = yDotK[3][i];
@@ -205,13 +206,13 @@
     final double dot3 = theta * (2 - 3 * theta);
     final double dot4 = twoTheta * (1 + theta * (twoTheta - 3));
     if ((previousState != null) && (theta <= 0.5)) {
-        for (int i = 0; i < interpolatedState.length; ++i) {
+        for (int i = 0; i < var_2650; ++i) {
             interpolatedState[i] =
                     previousState[i] + theta * h * (v1[i] + eta * (v2[i] + theta * (v3[i] + eta * v4[i])));
             interpolatedDerivatives[i] = v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i];
         }
     } else {
-        for (int i = 0; i < interpolatedState.length; ++i) {
+        for (int i = 0; i < var_2650; ++i) {
             interpolatedState[i] =
                     currentState[i] - oneMinusThetaH * (v1[i] - theta * (v2[i] + theta * (v3[i] + eta * v4[i])));
             interpolatedDerivatives[i] = v1[i] + dot2 * v2[i] + dot3 * v3[i] + dot4 * v4[i];
