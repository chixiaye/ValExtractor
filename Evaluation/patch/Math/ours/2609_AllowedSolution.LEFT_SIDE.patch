diff --git a/src/main/java/org/apache/commons/math3/ode/events/EventState.java b/src/main/java/org/apache/commons/math3/ode/events/EventState.java
index 5d67795..3902e07 100644
--- a/src/main/java/org/apache/commons/math3/ode/events/EventState.java
+++ b/src/main/java/org/apache/commons/math3/ode/events/EventState.java
@@ -265,13 +265,14 @@
 
                     // find the event time making sure we select a solution just at or past the exact root
                     final double root;
-                    if (solver instanceof BracketedUnivariateSolver<?>) {
+                    AllowedSolution var_2609 = AllowedSolution.LEFT_SIDE;
+					if (solver instanceof BracketedUnivariateSolver<?>) {
                         @SuppressWarnings("unchecked")
                         BracketedUnivariateSolver<UnivariateFunction> bracketing =
                                 (BracketedUnivariateSolver<UnivariateFunction>) solver;
                         root = forward ?
                                bracketing.solve(maxIterationCount, f, ta, tb, AllowedSolution.RIGHT_SIDE) :
-                               bracketing.solve(maxIterationCount, f, tb, ta, AllowedSolution.LEFT_SIDE);
+                               bracketing.solve(maxIterationCount, f, tb, ta, var_2609);
                     } else {
                         final double baseRoot = forward ?
                                                 solver.solve(maxIterationCount, f, ta, tb) :
@@ -283,7 +284,7 @@
                                UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,
                                                                    baseRoot, ta, tb, AllowedSolution.RIGHT_SIDE) :
                                UnivariateSolverUtils.forceSide(remainingEval, f, bracketing,
-                                                                   baseRoot, tb, ta, AllowedSolution.LEFT_SIDE);
+                                                                   baseRoot, tb, ta, var_2609);
                     }
 
                     if ((!Double.isNaN(previousEventTime)) &&
