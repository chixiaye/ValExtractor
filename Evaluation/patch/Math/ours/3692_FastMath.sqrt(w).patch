diff --git a/src/main/java/org/apache/commons/math3/special/Erf.java b/src/main/java/org/apache/commons/math3/special/Erf.java
index c40f6c2..8c177cd 100644
--- a/src/main/java/org/apache/commons/math3/special/Erf.java
+++ b/src/main/java/org/apache/commons/math3/special/Erf.java
@@ -174,57 +174,60 @@
             p =   -0.0060336708714301490533 + p * w;
             p =      0.24015818242558961693 + p * w;
             p =       1.6536545626831027356 + p * w;
-        } else if (w < 16.0) {
-            w = FastMath.sqrt(w) - 3.25;
-            p =   2.2137376921775787049e-09;
-            p =   9.0756561938885390979e-08 + p * w;
-            p =  -2.7517406297064545428e-07 + p * w;
-            p =   1.8239629214389227755e-08 + p * w;
-            p =   1.5027403968909827627e-06 + p * w;
-            p =   -4.013867526981545969e-06 + p * w;
-            p =   2.9234449089955446044e-06 + p * w;
-            p =   1.2475304481671778723e-05 + p * w;
-            p =  -4.7318229009055733981e-05 + p * w;
-            p =   6.8284851459573175448e-05 + p * w;
-            p =   2.4031110387097893999e-05 + p * w;
-            p =   -0.0003550375203628474796 + p * w;
-            p =   0.00095328937973738049703 + p * w;
-            p =   -0.0016882755560235047313 + p * w;
-            p =    0.0024914420961078508066 + p * w;
-            p =   -0.0037512085075692412107 + p * w;
-            p =     0.005370914553590063617 + p * w;
-            p =       1.0052589676941592334 + p * w;
-            p =       3.0838856104922207635 + p * w;
-        } else if (!Double.isInfinite(w)) {
-            w = FastMath.sqrt(w) - 5.0;
-            p =  -2.7109920616438573243e-11;
-            p =  -2.5556418169965252055e-10 + p * w;
-            p =   1.5076572693500548083e-09 + p * w;
-            p =  -3.7894654401267369937e-09 + p * w;
-            p =   7.6157012080783393804e-09 + p * w;
-            p =  -1.4960026627149240478e-08 + p * w;
-            p =   2.9147953450901080826e-08 + p * w;
-            p =  -6.7711997758452339498e-08 + p * w;
-            p =   2.2900482228026654717e-07 + p * w;
-            p =  -9.9298272942317002539e-07 + p * w;
-            p =   4.5260625972231537039e-06 + p * w;
-            p =  -1.9681778105531670567e-05 + p * w;
-            p =   7.5995277030017761139e-05 + p * w;
-            p =  -0.00021503011930044477347 + p * w;
-            p =  -0.00013871931833623122026 + p * w;
-            p =       1.0103004648645343977 + p * w;
-            p =       4.8499064014085844221 + p * w;
         } else {
-            // this branch does not appears in the original code, it
-            // was added because the previous branch does not handle
-            // x = +/-1 correctly. In this case, w is positive infinity
-            // and as the first coefficient (-2.71e-11) is negative.
-            // Once the first multiplication is done, p becomes negative
-            // infinity and remains so throughout the polynomial evaluation.
-            // So the branch above incorrectly returns negative infinity
-            // instead of the correct positive infinity.
-            p = Double.POSITIVE_INFINITY;
-        }
+			double var_3692 = FastMath.sqrt(w);
+			if (w < 16.0) {
+			    w = var_3692 - 3.25;
+			    p =   2.2137376921775787049e-09;
+			    p =   9.0756561938885390979e-08 + p * w;
+			    p =  -2.7517406297064545428e-07 + p * w;
+			    p =   1.8239629214389227755e-08 + p * w;
+			    p =   1.5027403968909827627e-06 + p * w;
+			    p =   -4.013867526981545969e-06 + p * w;
+			    p =   2.9234449089955446044e-06 + p * w;
+			    p =   1.2475304481671778723e-05 + p * w;
+			    p =  -4.7318229009055733981e-05 + p * w;
+			    p =   6.8284851459573175448e-05 + p * w;
+			    p =   2.4031110387097893999e-05 + p * w;
+			    p =   -0.0003550375203628474796 + p * w;
+			    p =   0.00095328937973738049703 + p * w;
+			    p =   -0.0016882755560235047313 + p * w;
+			    p =    0.0024914420961078508066 + p * w;
+			    p =   -0.0037512085075692412107 + p * w;
+			    p =     0.005370914553590063617 + p * w;
+			    p =       1.0052589676941592334 + p * w;
+			    p =       3.0838856104922207635 + p * w;
+			} else if (!Double.isInfinite(w)) {
+			    w = var_3692 - 5.0;
+			    p =  -2.7109920616438573243e-11;
+			    p =  -2.5556418169965252055e-10 + p * w;
+			    p =   1.5076572693500548083e-09 + p * w;
+			    p =  -3.7894654401267369937e-09 + p * w;
+			    p =   7.6157012080783393804e-09 + p * w;
+			    p =  -1.4960026627149240478e-08 + p * w;
+			    p =   2.9147953450901080826e-08 + p * w;
+			    p =  -6.7711997758452339498e-08 + p * w;
+			    p =   2.2900482228026654717e-07 + p * w;
+			    p =  -9.9298272942317002539e-07 + p * w;
+			    p =   4.5260625972231537039e-06 + p * w;
+			    p =  -1.9681778105531670567e-05 + p * w;
+			    p =   7.5995277030017761139e-05 + p * w;
+			    p =  -0.00021503011930044477347 + p * w;
+			    p =  -0.00013871931833623122026 + p * w;
+			    p =       1.0103004648645343977 + p * w;
+			    p =       4.8499064014085844221 + p * w;
+			} else {
+			    // this branch does not appears in the original code, it
+			    // was added because the previous branch does not handle
+			    // x = +/-1 correctly. In this case, w is positive infinity
+			    // and as the first coefficient (-2.71e-11) is negative.
+			    // Once the first multiplication is done, p becomes negative
+			    // infinity and remains so throughout the polynomial evaluation.
+			    // So the branch above incorrectly returns negative infinity
+			    // instead of the correct positive infinity.
+			    p = Double.POSITIVE_INFINITY;
+			}
+		}
 
         return p * x;
 
