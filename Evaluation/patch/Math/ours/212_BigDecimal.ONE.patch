diff --git a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java
index cbfa95d..9948ff2 100644
--- a/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java
+++ b/src/main/java/org/apache/commons/math3/analysis/integration/gauss/LegendreHighPrecisionRuleFactory.java
@@ -82,17 +82,18 @@
 
         // Find i-th root of P[n+1] by bracketing.
         final int iMax = numberOfPoints / 2;
-        for (int i = 0; i < iMax; i++) {
+        BigDecimal var_212 = BigDecimal.ONE;
+		for (int i = 0; i < iMax; i++) {
             // Lower-bound of the interval.
             BigDecimal a = (i == 0) ? minusOne : previousPoints[i - 1];
             // Upper-bound of the interval.
-            BigDecimal b = (iMax == 1) ? BigDecimal.ONE : previousPoints[i];
+            BigDecimal b = (iMax == 1) ? var_212 : previousPoints[i];
             // P[j-1](a)
-            BigDecimal pma = BigDecimal.ONE;
+            BigDecimal pma = var_212;
             // P[j](a)
             BigDecimal pa = a;
             // P[j-1](b)
-            BigDecimal pmb = BigDecimal.ONE;
+            BigDecimal pmb = var_212;
             // P[j](b)
             BigDecimal pb = b;
             for (int j = 1; j < numberOfPoints; j++) {
@@ -129,7 +130,7 @@
             // Middle of the interval.
             BigDecimal c = a.add(b, mContext).multiply(oneHalf, mContext);
             // P[j-1](c)
-            BigDecimal pmc = BigDecimal.ONE;
+            BigDecimal pmc = var_212;
             // P[j](c)
             BigDecimal pc = c;
             boolean done = false;
@@ -137,7 +138,7 @@
                 BigDecimal tmp1 = b.subtract(a, mContext);
                 BigDecimal tmp2 = c.ulp().multiply(BigDecimal.TEN, mContext);
                 done = tmp1.compareTo(tmp2) <= 0;
-                pmc = BigDecimal.ONE;
+                pmc = var_212;
                 pc = c;
                 for (int j = 1; j < numberOfPoints; j++) {
                     final BigDecimal b_two_j_p_1 = new BigDecimal(2 * j + 1, mContext);
@@ -174,7 +175,7 @@
             tmp1 = tmp1.multiply(nP);
             tmp1 = tmp1.pow(2, mContext);
             BigDecimal tmp2 = c.pow(2, mContext);
-            tmp2 = BigDecimal.ONE.subtract(tmp2, mContext);
+            tmp2 = var_212.subtract(tmp2, mContext);
             tmp2 = tmp2.multiply(two, mContext);
             tmp2 = tmp2.divide(tmp1, mContext);
 
@@ -190,7 +191,7 @@
         // integers too (although it is not necessary here), preventing
         // a FindBugs warning.
         if (numberOfPoints % 2 != 0) {
-            BigDecimal pmc = BigDecimal.ONE;
+            BigDecimal pmc = var_212;
             for (int j = 1; j < numberOfPoints; j += 2) {
                 final BigDecimal b_j = new BigDecimal(j, mContext);
                 final BigDecimal b_j_p_1 = new BigDecimal(j + 1, mContext);
