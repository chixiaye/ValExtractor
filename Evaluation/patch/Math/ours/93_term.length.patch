diff --git a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
index a8877eb..f6d5488 100644
--- a/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
+++ b/src/main/java/org/apache/commons/math3/analysis/differentiation/DSCompiler.java
@@ -437,13 +437,14 @@
                 // handle term p * f_k(g(x)) * g_l1(x) * g_l2(x) * ... * g_lp(x)
 
                 // derive the first factor in the term: f_k with respect to new parameter
-                int[] derivedTermF = new int[term.length + 1];
+                int var_93 = term.length;
+				int[] derivedTermF = new int[var_93 + 1];
                 derivedTermF[0] = term[0];     // p
                 derivedTermF[1] = term[1] + 1; // f_(k+1)
                 int[] orders = new int[parameters];
                 orders[parameters - 1] = 1;
-                derivedTermF[term.length] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1
-                for (int j = 2; j < term.length; ++j) {
+                derivedTermF[var_93] = getPartialDerivativeIndex(parameters, order, sizes, orders);  // g_1
+                for (int j = 2; j < var_93; ++j) {
                     // convert the indices as the mapping for the current order
                     // is different from the mapping with one less order
                     derivedTermF[j] = convertIndex(term[j], parameters,
@@ -454,11 +455,11 @@
                 row.add(derivedTermF);
 
                 // derive the various g_l
-                for (int l = 2; l < term.length; ++l) {
-                    int[] derivedTermG = new int[term.length];
+                for (int l = 2; l < var_93; ++l) {
+                    int[] derivedTermG = new int[var_93];
                     derivedTermG[0] = term[0];
                     derivedTermG[1] = term[1];
-                    for (int j = 2; j < term.length; ++j) {
+                    for (int j = 2; j < var_93; ++j) {
                         // convert the indices as the mapping for the current order
                         // is different from the mapping with one less order
                         derivedTermG[j] = convertIndex(term[j], parameters,
