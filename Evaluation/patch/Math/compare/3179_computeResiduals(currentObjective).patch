==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
index 8d6a50b..96d1e7f 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
@@ -319,7 +319,8 @@
 
         // Evaluate the function at the starting point and calculate its norm.
         double[] currentObjective = computeObjectiveValue(currentPoint);
-        double[] currentResiduals = computeResiduals(currentObjective);
+        double[] var_3179 = computeResiduals(currentObjective);
+		double[] currentResiduals = var_3179;
         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
         double currentCost = computeCost(currentResiduals);
 

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
index 8d6a50b..514cb87 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
@@ -319,7 +319,8 @@
 
         // Evaluate the function at the starting point and calculate its norm.
         double[] currentObjective = computeObjectiveValue(currentPoint);
-        double[] currentResiduals = computeResiduals(currentObjective);
+        double[] var_3179 = computeResiduals(currentObjective);
+		double[] currentResiduals = var_3179;
         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
         double currentCost = computeCost(currentResiduals);
 
@@ -431,7 +432,7 @@
 
                 // Evaluate the function at x + p and calculate its norm.
                 currentObjective = computeObjectiveValue(currentPoint);
-                currentResiduals = computeResiduals(currentObjective);
+                currentResiduals = var_3179;
                 current = new PointVectorValuePair(currentPoint, currentObjective);
                 currentCost = computeCost(currentResiduals);
 

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
index 8d6a50b..cfc1eee 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
@@ -319,7 +319,8 @@
 
         // Evaluate the function at the starting point and calculate its norm.
         double[] currentObjective = computeObjectiveValue(currentPoint);
-        double[] currentResiduals = computeResiduals(currentObjective);
+        double[] doubles = computeResiduals(currentObjective);
+        double[] currentResiduals = doubles;
         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
         double currentCost = computeCost(currentResiduals);
 
@@ -431,7 +432,7 @@
 
                 // Evaluate the function at x + p and calculate its norm.
                 currentObjective = computeObjectiveValue(currentPoint);
-                currentResiduals = computeResiduals(currentObjective);
+                currentResiduals = doubles;
                 current = new PointVectorValuePair(currentPoint, currentObjective);
                 currentCost = computeCost(currentResiduals);
 
