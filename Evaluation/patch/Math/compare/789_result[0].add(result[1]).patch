==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..76fc951 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -161,7 +161,8 @@
 
         if (a == 0) {
             // Special case a = 0
-            return result[0].add(result[1]);
+            Dfp var_789 = result[0].add(result[1]);
+			return var_789;
         }
 
         if (a < 0) {

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..f4b2279 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -159,9 +159,10 @@
         result[0] = base[0].getOne();
         result[1] = base[0].getZero();
 
+        Dfp var_789 = result[0].add(result[1]);
         if (a == 0) {
             // Special case a = 0
-            return result[0].add(result[1]);
+            return var_789;
         }
 
         if (a < 0) {
@@ -193,7 +194,7 @@
 
         } while (a >= 1);
 
-        result[0] = result[0].add(result[1]);
+        result[0] = var_789;
 
         if (invert) {
             result[0] = base[0].getOne().divide(result[0]);

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..dd18516 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -159,9 +159,10 @@
         result[0] = base[0].getOne();
         result[1] = base[0].getZero();
 
+        Dfp add = result[0].add(result[1]);
         if (a == 0) {
             // Special case a = 0
-            return result[0].add(result[1]);
+            return add;
         }
 
         if (a < 0) {
@@ -193,7 +194,7 @@
 
         } while (a >= 1);
 
-        result[0] = result[0].add(result[1]);
+        result[0] = add;
 
         if (invert) {
             result[0] = base[0].getOne().divide(result[0]);
