==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..4ae9170 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1981,7 +1981,8 @@
             }
 
             if (nans == QNAN) {
-                return newInstance(this);
+                Dfp var_688 = newInstance(this);
+				return var_688;
             }
 
             if (nans == SNAN) {

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..797e532 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1969,26 +1969,27 @@
     public Dfp sqrt() {
 
         // check for unusual cases
+        Dfp var_688 = newInstance(this);
         if (nans == FINITE && mant[mant.length-1] == 0) {
             // if zero
-            return newInstance(this);
+            return var_688;
         }
 
         if (nans != FINITE) {
             if (nans == INFINITE && sign == 1) {
                 // if positive infinity
-                return newInstance(this);
+                return var_688;
             }
 
             if (nans == QNAN) {
-                return newInstance(this);
+                return var_688;
             }
 
             if (nans == SNAN) {
                 Dfp result;
 
                 field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-                result = newInstance(this);
+                result = var_688;
                 result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
                 return result;
             }
@@ -1999,13 +2000,13 @@
             Dfp result;
 
             field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-            result = newInstance(this);
+            result = var_688;
             result.nans = QNAN;
             result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
             return result;
         }
 
-        Dfp x = newInstance(this);
+        Dfp x = var_688;
 
         /* Lets make a reasonable guess as to the size of the square root */
         if (x.exp < -1 || x.exp > 1) {

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..ab2b806 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1969,26 +1969,27 @@
     public Dfp sqrt() {
 
         // check for unusual cases
+        Dfp dfp = newInstance(this);
         if (nans == FINITE && mant[mant.length-1] == 0) {
             // if zero
-            return newInstance(this);
+            return dfp;
         }
 
         if (nans != FINITE) {
             if (nans == INFINITE && sign == 1) {
                 // if positive infinity
-                return newInstance(this);
+                return dfp;
             }
 
             if (nans == QNAN) {
-                return newInstance(this);
+                return dfp;
             }
 
             if (nans == SNAN) {
                 Dfp result;
 
                 field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-                result = newInstance(this);
+                result = dfp;
                 result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
                 return result;
             }
@@ -1999,13 +2000,13 @@
             Dfp result;
 
             field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-            result = newInstance(this);
+            result = dfp;
             result.nans = QNAN;
             result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);
             return result;
         }
 
-        Dfp x = newInstance(this);
+        Dfp x = dfp;
 
         /* Lets make a reasonable guess as to the size of the square root */
         if (x.exp < -1 || x.exp > 1) {
