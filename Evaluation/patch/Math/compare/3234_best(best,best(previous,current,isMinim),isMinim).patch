==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
index a5fca86..f20979c 100644
--- a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
@@ -232,11 +232,12 @@
                 // User-defined convergence checker.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-                best = best(best,
+                UnivariatePointValuePair var_3234 = best(best,
                             best(previous,
                                  current,
                                  isMinim),
                             isMinim);
+				best = var_3234;
 
                 if (checker != null && checker.converged(iter, previous, current)) {
                     return best;

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
index a5fca86..781d0f2 100644
--- a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
@@ -158,6 +158,11 @@
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+            UnivariatePointValuePair var_3234 = best(best,
+			            best(previous,
+			                 current,
+			                 isMinim),
+			            isMinim);
             if (!stop) {
                 double p = 0;
                 double q = 0;
@@ -232,11 +237,7 @@
                 // User-defined convergence checker.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-                best = best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
-                            isMinim);
+                best = var_3234;
 
                 if (checker != null && checker.converged(iter, previous, current)) {
                     return best;
@@ -275,11 +276,7 @@
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
-                            isMinim);
+                return var_3234;
             }
             ++iter;
         }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
index a5fca86..8f669a0 100644
--- a/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/univariate/BrentOptimizer.java
@@ -158,6 +158,11 @@
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+            UnivariatePointValuePair best1 = best(best,
+                    best(previous,
+                            current,
+                            isMinim),
+                    isMinim);
             if (!stop) {
                 double p = 0;
                 double q = 0;
@@ -232,11 +237,7 @@
                 // User-defined convergence checker.
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
-                best = best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
-                            isMinim);
+                best = best1;
 
                 if (checker != null && checker.converged(iter, previous, current)) {
                     return best;
@@ -275,11 +276,7 @@
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
-                            isMinim);
+                return best1;
             }
             ++iter;
         }
