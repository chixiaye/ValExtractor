==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..a73f3c0 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -287,7 +287,8 @@
         Node getLargest() {
             Node node = this;
             while (node.right != null) {
-                node = node.right;
+                AVLTree<T>.Node var_1756 = node.right;
+				node = var_1756;
             }
             return node;
         }

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..bba869a 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -286,8 +286,9 @@
          */
         Node getLargest() {
             Node node = this;
-            while (node.right != null) {
-                node = node.right;
+            AVLTree<T>.Node var_1756 = node.right;
+			while (var_1756 != null) {
+                node = var_1756;
             }
             return node;
         }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..3117b10 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -286,8 +286,10 @@
          */
         Node getLargest() {
             Node node = this;
-            while (node.right != null) {
-                node = node.right;
+            while (true) {
+                Node right1 = node.right;
+                if (!(right1 != null)) break;
+                node = right1;
             }
             return node;
         }
