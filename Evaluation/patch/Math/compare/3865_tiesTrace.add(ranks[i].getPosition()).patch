==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
index 7fd7850..882a76c 100644
--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
@@ -240,7 +240,7 @@
                     resolveTie(out, tiesTrace);
                 }
                 tiesTrace = new ArrayList<Integer>();
-                tiesTrace.add(ranks[i].getPosition());
+                boolean var_3865 = tiesTrace.add(ranks[i].getPosition());
             } else {
                 // tie sequence continues
                 tiesTrace.add(ranks[i].getPosition());

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
index 7fd7850..882a76c 100644
--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
@@ -240,7 +240,7 @@
                     resolveTie(out, tiesTrace);
                 }
                 tiesTrace = new ArrayList<Integer>();
-                tiesTrace.add(ranks[i].getPosition());
+                boolean var_3865 = tiesTrace.add(ranks[i].getPosition());
             } else {
                 // tie sequence continues
                 tiesTrace.add(ranks[i].getPosition());

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
index 7fd7850..9e80c0f 100644
--- a/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
+++ b/src/main/java/org/apache/commons/math3/stat/ranking/NaturalRanking.java
@@ -233,6 +233,7 @@
         List<Integer> tiesTrace = new ArrayList<Integer>();
         tiesTrace.add(ranks[0].getPosition());
         for (int i = 1; i < ranks.length; i++) {
+            boolean add = tiesTrace.add(ranks[i].getPosition());
             if (Double.compare(ranks[i].getValue(), ranks[i - 1].getValue()) > 0) {
                 // tie sequence has ended (or had length 1)
                 pos = i + 1;
@@ -240,10 +241,10 @@
                     resolveTie(out, tiesTrace);
                 }
                 tiesTrace = new ArrayList<Integer>();
-                tiesTrace.add(ranks[i].getPosition());
+                add;
             } else {
                 // tie sequence continues
-                tiesTrace.add(ranks[i].getPosition());
+                add;
             }
             out[ranks[i].getPosition()] = pos;
         }
