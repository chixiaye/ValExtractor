==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..c98d4c7 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1913,7 +1913,8 @@
         // Test for divide by zero
         if (divisor == 0) {
             field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
-            Dfp result = newInstance(getZero());
+            Dfp var_679 = newInstance(getZero());
+			Dfp result = var_679;
             result.sign = sign;
             result.nans = INFINITE;
             result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..e0cf144 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1911,9 +1911,10 @@
         }
 
         // Test for divide by zero
+        Dfp var_679 = newInstance(getZero());
         if (divisor == 0) {
             field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
-            Dfp result = newInstance(getZero());
+            Dfp result = var_679;
             result.sign = sign;
             result.nans = INFINITE;
             result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
@@ -1923,7 +1924,7 @@
         // range check divisor
         if (divisor < 0 || divisor >= RADIX) {
             field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-            Dfp result = newInstance(getZero());
+            Dfp result = var_679;
             result.nans = QNAN;
             result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
             return result;

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..f995e7a 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1911,9 +1911,10 @@
         }
 
         // Test for divide by zero
+        Dfp dfp = newInstance(getZero());
         if (divisor == 0) {
             field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);
-            Dfp result = newInstance(getZero());
+            Dfp result = dfp;
             result.sign = sign;
             result.nans = INFINITE;
             result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);
@@ -1923,7 +1924,7 @@
         // range check divisor
         if (divisor < 0 || divisor >= RADIX) {
             field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
-            Dfp result = newInstance(getZero());
+            Dfp result = dfp;
             result.nans = QNAN;
             result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);
             return result;
