==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..9c14e59 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -273,7 +273,8 @@
         Node getSmallest() {
             Node node = this;
             while (node.left != null) {
-                node = node.left;
+                AVLTree<T>.Node var_1755 = node.left;
+				node = var_1755;
             }
             return node;
         }

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..77d98c8 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -272,8 +272,9 @@
          */
         Node getSmallest() {
             Node node = this;
-            while (node.left != null) {
-                node = node.left;
+            AVLTree<T>.Node var_1755 = node.left;
+			while (var_1755 != null) {
+                node = var_1755;
             }
             return node;
         }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
index 7070060..6a9ee67 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/utilities/AVLTree.java
@@ -272,8 +272,10 @@
          */
         Node getSmallest() {
             Node node = this;
-            while (node.left != null) {
-                node = node.left;
+            while (true) {
+                Node left1 = node.left;
+                if (!(left1 != null)) break;
+                node = left1;
             }
             return node;
         }
