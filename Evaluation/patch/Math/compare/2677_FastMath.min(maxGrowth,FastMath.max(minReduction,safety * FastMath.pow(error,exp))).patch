==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 2ff86a0..1e6c9a6 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -288,9 +288,10 @@
         error = estimateError(yDotK, y, yTmp, stepSize);
         if (error >= 1.0) {
           // reject the step and attempt to reduce error by stepsize control
-          final double factor =
-              FastMath.min(maxGrowth,
+          double var_2677 = FastMath.min(maxGrowth,
                            FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+		final double factor =
+              var_2677;
           hNew = filterStep(stepSize * factor, forward, false);
         }
 

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 2ff86a0..d5e02b7 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -226,6 +226,8 @@
 
       // iterate over step size, ensuring local normalized error is smaller than 1
       double error = 10;
+      double var_2677 = FastMath.min(maxGrowth,
+	               FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
       while (error >= 1.0) {
 
         if (firstTime || !fsal) {
@@ -289,8 +291,7 @@
         if (error >= 1.0) {
           // reject the step and attempt to reduce error by stepsize control
           final double factor =
-              FastMath.min(maxGrowth,
-                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+              var_2677;
           hNew = filterStep(stepSize * factor, forward, false);
         }
 
@@ -315,7 +316,7 @@
 
           // stepsize control for next step
           final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+              var_2677;
           final double  scaledH    = stepSize * factor;
           final double  nextT      = stepStart + scaledH;
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
index 2ff86a0..adfcca3 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/EmbeddedRungeKuttaIntegrator.java
@@ -226,6 +226,8 @@
 
       // iterate over step size, ensuring local normalized error is smaller than 1
       double error = 10;
+        double min = FastMath.min(maxGrowth,
+                FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
       while (error >= 1.0) {
 
         if (firstTime || !fsal) {
@@ -289,8 +291,7 @@
         if (error >= 1.0) {
           // reject the step and attempt to reduce error by stepsize control
           final double factor =
-              FastMath.min(maxGrowth,
-                           FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+                  min;
           hNew = filterStep(stepSize * factor, forward, false);
         }
 
@@ -315,7 +316,7 @@
 
           // stepsize control for next step
           final double factor =
-              FastMath.min(maxGrowth, FastMath.max(minReduction, safety * FastMath.pow(error, exp)));
+                  min;
           final double  scaledH    = stepSize * factor;
           final double  nextT      = stepStart + scaledH;
           final boolean nextIsLast = forward ? (nextT >= t) : (nextT <= t);
