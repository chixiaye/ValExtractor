==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..a728c2b 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1783,7 +1783,8 @@
                 /* Multiply by divisor and store as remainder */
                 int rh = 0;
                 for (int i = 0; i < mant.length + 1; i++) {
-                    int dm = (i<mant.length)?divisor.mant[i]:0;
+                    int var_660 = divisor.mant[i];
+					int dm = (i<mant.length)?var_660:0;
                     final int r = (dm * trial) + rh;
                     rh = r / RADIX;
                     remainder[i] = r - rh * RADIX;

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..a728c2b 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1783,7 +1783,8 @@
                 /* Multiply by divisor and store as remainder */
                 int rh = 0;
                 for (int i = 0; i < mant.length + 1; i++) {
-                    int dm = (i<mant.length)?divisor.mant[i]:0;
+                    int var_660 = divisor.mant[i];
+					int dm = (i<mant.length)?var_660:0;
                     final int r = (dm * trial) + rh;
                     rh = r / RADIX;
                     remainder[i] = r - rh * RADIX;

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..9e08c5d 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1783,7 +1783,13 @@
                 /* Multiply by divisor and store as remainder */
                 int rh = 0;
                 for (int i = 0; i < mant.length + 1; i++) {
-                    int dm = (i<mant.length)?divisor.mant[i]:0;
+                    int dm;
+                    if ((i < mant.length)) {
+                        int i1 = divisor.mant[i];
+                        dm = i1;
+                    } else {
+                        dm = 0;
+                    }
                     final int r = (dm * trial) + rh;
                     rh = r / RADIX;
                     remainder[i] = r - rh * RADIX;
