==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..4b195e9 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -218,7 +218,8 @@
         for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
             j = probe(perturb, j);
             index = j & mask;
-            if (containsKey(key, index)) {
+            boolean var_4118 = containsKey(key, index);
+			if (var_4118) {
                 return true;
             }
         }

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..6ac790d 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -206,7 +206,8 @@
 
         final int hash  = hashOf(key);
         int index = hash & mask;
-        if (containsKey(key, index)) {
+        boolean var_4118 = containsKey(key, index);
+		if (var_4118) {
             return true;
         }
 
@@ -218,7 +219,7 @@
         for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
             j = probe(perturb, j);
             index = j & mask;
-            if (containsKey(key, index)) {
+            if (var_4118) {
                 return true;
             }
         }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..5a6b51c 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -206,7 +206,8 @@
 
         final int hash  = hashOf(key);
         int index = hash & mask;
-        if (containsKey(key, index)) {
+        boolean b = containsKey(key, index);
+        if (b) {
             return true;
         }
 
@@ -218,7 +219,7 @@
         for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
             j = probe(perturb, j);
             index = j & mask;
-            if (containsKey(key, index)) {
+            if (b) {
                 return true;
             }
         }
