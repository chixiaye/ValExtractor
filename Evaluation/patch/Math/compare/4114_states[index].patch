==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..e569862 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -180,7 +180,8 @@
             return values[index];
         }
 
-        if (states[index] == FREE) {
+        byte var_4114 = states[index];
+		if (var_4114 == FREE) {
             return missingEntries;
         }
 

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..918b672 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -180,12 +180,13 @@
             return values[index];
         }
 
-        if (states[index] == FREE) {
+        byte var_4114 = states[index];
+		if (var_4114 == FREE) {
             return missingEntries;
         }
 
         int j = index;
-        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
+        for (int perturb = perturb(hash); var_4114 != FREE; perturb >>= PERTURB_SHIFT) {
             j = probe(perturb, j);
             index = j & mask;
             if (containsKey(key, index)) {

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
index 2b007b2..25304eb 100644
--- a/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
+++ b/src/main/java/org/apache/commons/math3/util/OpenIntToDoubleHashMap.java
@@ -180,12 +180,13 @@
             return values[index];
         }
 
-        if (states[index] == FREE) {
+        byte state = states[index];
+        if (state == FREE) {
             return missingEntries;
         }
 
         int j = index;
-        for (int perturb = perturb(hash); states[index] != FREE; perturb >>= PERTURB_SHIFT) {
+        for (int perturb = perturb(hash); state != FREE; perturb >>= PERTURB_SHIFT) {
             j = probe(perturb, j);
             index = j & mask;
             if (containsKey(key, index)) {
