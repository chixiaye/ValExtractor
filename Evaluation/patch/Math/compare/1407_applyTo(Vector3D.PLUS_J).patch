==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
index fbdafa3..7b46d2b 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
@@ -578,7 +578,8 @@
       // (-r) (Vector3D.plusI) coordinates are :
       // cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)
       // and we can choose to have psi in the interval [-PI/2 ; +PI/2]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+      Vector3D var_1407 = applyTo(Vector3D.PLUS_J);
+	Vector3D v1 = var_1407;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(true);

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
index fbdafa3..82fb65e 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
@@ -571,14 +571,16 @@
         FastMath.atan2(-(v2.getY()), v2.getX())
       };
 
-    } else if (order == RotationOrder.XZY) {
+    } else {
+		Vector3D var_1407 = applyTo(Vector3D.PLUS_J);
+		if (order == RotationOrder.XZY) {
 
       // r (Vector3D.plusJ) coordinates are :
       // -sin (psi), cos (psi) cos (phi), cos (psi) sin (phi)
       // (-r) (Vector3D.plusI) coordinates are :
       // cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)
       // and we can choose to have psi in the interval [-PI/2 ; +PI/2]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+		  Vector3D v1 = var_1407;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(true);
@@ -632,7 +634,7 @@
       // (-r) (Vector3D.plusK) coordinates are :
       // -sin (theta) cos (phi), sin (phi), cos (theta) cos (phi)
       // and we can choose to have phi in the interval [-PI/2 ; +PI/2]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+		  Vector3D v1 = var_1407;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(true);
@@ -704,7 +706,7 @@
       // (-r) (Vector3D.plusJ) coordinates are :
       // sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)
       // and we can choose to have phi in the interval [0 ; PI]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+		  Vector3D v1 = var_1407;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(false);
@@ -722,7 +724,7 @@
       // (-r) (Vector3D.plusJ) coordinates are :
       // sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)
       // and we can choose to have psi in the interval [0 ; PI]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+		  Vector3D v1 = var_1407;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(false);
@@ -770,6 +772,7 @@
       };
 
     }
+	}
 
   }
 

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
index fbdafa3..2f122ba 100644
--- a/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
+++ b/src/main/java/org/apache/commons/math3/geometry/euclidean/threed/Rotation.java
@@ -571,14 +571,16 @@
         FastMath.atan2(-(v2.getY()), v2.getX())
       };
 
-    } else if (order == RotationOrder.XZY) {
+    } else {
+        Vector3D vector3D = applyTo(Vector3D.PLUS_J);
+        if (order == RotationOrder.XZY) {
 
       // r (Vector3D.plusJ) coordinates are :
       // -sin (psi), cos (psi) cos (phi), cos (psi) sin (phi)
       // (-r) (Vector3D.plusI) coordinates are :
       // cos (theta) cos (psi), -sin (psi), sin (theta) cos (psi)
       // and we can choose to have psi in the interval [-PI/2 ; +PI/2]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+          Vector3D v1 = vector3D;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_I);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(true);
@@ -632,7 +634,7 @@
       // (-r) (Vector3D.plusK) coordinates are :
       // -sin (theta) cos (phi), sin (phi), cos (theta) cos (phi)
       // and we can choose to have phi in the interval [-PI/2 ; +PI/2]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+          Vector3D v1 = vector3D;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_K);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(true);
@@ -704,7 +706,7 @@
       // (-r) (Vector3D.plusJ) coordinates are :
       // sin (phi) sin (theta2), cos (phi), -sin (phi) cos (theta2)
       // and we can choose to have phi in the interval [0 ; PI]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+          Vector3D v1 = vector3D;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(false);
@@ -722,7 +724,7 @@
       // (-r) (Vector3D.plusJ) coordinates are :
       // sin (psi) cos (theta2), cos (psi), sin (psi) sin (theta2)
       // and we can choose to have psi in the interval [0 ; PI]
-      Vector3D v1 = applyTo(Vector3D.PLUS_J);
+          Vector3D v1 = vector3D;
       Vector3D v2 = applyInverseTo(Vector3D.PLUS_J);
       if ((v2.getY() < -0.9999999999) || (v2.getY() > 0.9999999999)) {
         throw new CardanEulerSingularityException(false);
@@ -770,6 +772,7 @@
       };
 
     }
+    }
 
   }
 
