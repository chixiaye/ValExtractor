==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 104bdf5..010fe45 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -910,8 +910,9 @@
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }
-            if (max(diagD) > 1e14 * min(diagD)) {
-                final double tfac = max(diagD) / 1e14 - min(diagD);
+            double var_3275 = min(diagD);
+			if (max(diagD) > 1e14 * var_3275) {
+                final double tfac = max(diagD) / 1e14 - var_3275;
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 104bdf5..b876a4a 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -900,7 +900,8 @@
             B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
             D = eig.getD();
             diagD = diag(D);
-            if (min(diagD) <= 0) {
+            double var_3275 = min(diagD);
+			if (var_3275 <= 0) {
                 for (int i = 0; i < dimension; i++) {
                     if (diagD.getEntry(i, 0) < 0) {
                         diagD.setEntry(i, 0, 0);
@@ -910,8 +911,8 @@
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }
-            if (max(diagD) > 1e14 * min(diagD)) {
-                final double tfac = max(diagD) / 1e14 - min(diagD);
+            if (max(diagD) > 1e14 * var_3275) {
+                final double tfac = max(diagD) / 1e14 - var_3275;
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
index 104bdf5..aa1dd6b 100644
--- a/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/direct/CMAESOptimizer.java
@@ -900,7 +900,8 @@
             B = eig.getV(); // eigen decomposition, B==normalized eigenvectors
             D = eig.getD();
             diagD = diag(D);
-            if (min(diagD) <= 0) {
+            double min = min(diagD);
+            if (min <= 0) {
                 for (int i = 0; i < dimension; i++) {
                     if (diagD.getEntry(i, 0) < 0) {
                         diagD.setEntry(i, 0, 0);
@@ -910,8 +911,8 @@
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }
-            if (max(diagD) > 1e14 * min(diagD)) {
-                final double tfac = max(diagD) / 1e14 - min(diagD);
+            if (max(diagD) > 1e14 * min) {
+                final double tfac = max(diagD) / 1e14 - min;
                 C = C.add(eye(dimension, dimension).scalarMultiply(tfac));
                 diagD = diagD.add(ones(dimension, 1).scalarMultiply(tfac));
             }
