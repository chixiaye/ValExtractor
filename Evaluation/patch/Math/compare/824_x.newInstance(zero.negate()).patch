==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..a698cf6 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -603,7 +603,8 @@
                     if (y.greaterThan(zero)) {
                         return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));
                     } else {
-                        return x.newInstance(zero.negate());
+                        Dfp var_824 = x.newInstance(zero.negate());
+						return var_824;
                     }
                 } else {
                     // Y is not odd integer

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..a034172 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -539,6 +539,7 @@
         }
 
         // X == 0
+        Dfp var_824 = x.newInstance(zero.negate());
         if (x.equals(zero)) {
             if (Dfp.copysign(one, x).greaterThan(zero)) {
                 // X == +0
@@ -552,7 +553,7 @@
                 if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
                     // If y is odd integer
                     if (y.greaterThan(zero)) {
-                        return x.newInstance(zero.negate());
+                        return var_824;
                     } else {
                         return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));
                     }
@@ -603,7 +604,7 @@
                     if (y.greaterThan(zero)) {
                         return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));
                     } else {
-                        return x.newInstance(zero.negate());
+                        return var_824;
                     }
                 } else {
                     // Y is not odd integer

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
index af670fc..1a1a0b5 100644
--- a/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
+++ b/src/main/java/org/apache/commons/math3/dfp/DfpMath.java
@@ -539,6 +539,7 @@
         }
 
         // X == 0
+        Dfp dfp = x.newInstance(zero.negate());
         if (x.equals(zero)) {
             if (Dfp.copysign(one, x).greaterThan(zero)) {
                 // X == +0
@@ -552,7 +553,7 @@
                 if (y.classify() == Dfp.FINITE && y.rint().equals(y) && !y.remainder(two).equals(zero)) {
                     // If y is odd integer
                     if (y.greaterThan(zero)) {
-                        return x.newInstance(zero.negate());
+                        return dfp;
                     } else {
                         return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));
                     }
@@ -603,7 +604,7 @@
                     if (y.greaterThan(zero)) {
                         return x.newInstance(x.newInstance((byte)-1, Dfp.INFINITE));
                     } else {
-                        return x.newInstance(zero.negate());
+                        return dfp;
                     }
                 } else {
                     // Y is not odd integer
