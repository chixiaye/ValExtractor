==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 20d0980..0e60d36 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -277,10 +277,11 @@
                     }
                 }
             } else { // Default termination (Brent's criterion).
-                return best(best,
-                            best(previous,
+                UnivariatePointValuePair var_3589 = best(previous,
                                  current,
-                                 isMinim),
+				     isMinim);
+				return best(best,
+                            var_3589,
                             isMinim);
             }
             ++iter;

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 20d0980..06df249 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -160,6 +160,9 @@
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+            UnivariatePointValuePair var_3589 = best(previous,
+			     current,
+			     isMinim);
             if (!stop) {
                 double p = 0;
                 double q = 0;
@@ -235,9 +238,7 @@
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                 best = best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
+                            var_3589,
                             isMinim);
 
                 if (checker != null && checker.converged(iter, previous, current)) {
@@ -278,9 +279,7 @@
                 }
             } else { // Default termination (Brent's criterion).
                 return best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
+                            var_3589,
                             isMinim);
             }
             ++iter;

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
index 20d0980..71eb8cc 100644
--- a/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/univariate/BrentOptimizer.java
@@ -160,6 +160,9 @@
 
             // Default stopping criterion.
             final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
+            UnivariatePointValuePair best1 = best(previous,
+                    current,
+                    isMinim);
             if (!stop) {
                 double p = 0;
                 double q = 0;
@@ -235,9 +238,7 @@
                 previous = current;
                 current = new UnivariatePointValuePair(u, isMinim ? fu : -fu);
                 best = best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
+                        best1,
                             isMinim);
 
                 if (checker != null && checker.converged(iter, previous, current)) {
@@ -278,9 +279,7 @@
                 }
             } else { // Default termination (Brent's criterion).
                 return best(best,
-                            best(previous,
-                                 current,
-                                 isMinim),
+                        best1,
                             isMinim);
             }
             ++iter;
