==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
index aca170e..472b701 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -545,9 +545,10 @@
             return split;
         }
         default :
+            BSPTree<S> var_1724 = plus.copySelf();
             return cHyperplane.sameOrientationAs(sHyperplane) ?
                    new BSPTree<S>(sub, plus.copySelf(),  minus.copySelf(), attribute) :
-                   new BSPTree<S>(sub, minus.copySelf(), plus.copySelf(),  attribute);
+                   new BSPTree<S>(sub, minus.copySelf(), var_1724,  attribute);
         }
 
     }

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
index aca170e..582e7fa 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -493,6 +493,7 @@
 
         final Hyperplane<S> cHyperplane = cut.getHyperplane();
         final Hyperplane<S> sHyperplane = sub.getHyperplane();
+        BSPTree<S> var_1724 = plus.copySelf();
         switch (sub.side(cHyperplane)) {
         case PLUS :
         { // the partitioning sub-hyperplane is entirely in the plus sub-tree
@@ -515,12 +516,12 @@
             final BSPTree<S> split = minus.split(sub);
             if (cut.side(sHyperplane) == Side.PLUS) {
                 split.plus =
-                    new BSPTree<S>(cut.copySelf(), plus.copySelf(), split.plus, attribute);
+                    new BSPTree<S>(cut.copySelf(), var_1724, split.plus, attribute);
                 split.plus.condense();
                 split.plus.parent = split;
             } else {
                 split.minus =
-                    new BSPTree<S>(cut.copySelf(), plus.copySelf(), split.minus, attribute);
+                    new BSPTree<S>(cut.copySelf(), var_1724, split.minus, attribute);
                 split.minus.condense();
                 split.minus.parent = split;
             }
@@ -546,8 +547,8 @@
         }
         default :
             return cHyperplane.sameOrientationAs(sHyperplane) ?
-                   new BSPTree<S>(sub, plus.copySelf(),  minus.copySelf(), attribute) :
-                   new BSPTree<S>(sub, minus.copySelf(), plus.copySelf(),  attribute);
+                   new BSPTree<S>(sub, var_1724,  minus.copySelf(), attribute) :
+                   new BSPTree<S>(sub, minus.copySelf(), var_1724,  attribute);
         }
 
     }

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
index aca170e..0f3df5e 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/BSPTree.java
@@ -493,6 +493,7 @@
 
         final Hyperplane<S> cHyperplane = cut.getHyperplane();
         final Hyperplane<S> sHyperplane = sub.getHyperplane();
+        BSPTree<S> minus1 = plus.copySelf();
         switch (sub.side(cHyperplane)) {
         case PLUS :
         { // the partitioning sub-hyperplane is entirely in the plus sub-tree
@@ -515,12 +516,12 @@
             final BSPTree<S> split = minus.split(sub);
             if (cut.side(sHyperplane) == Side.PLUS) {
                 split.plus =
-                    new BSPTree<S>(cut.copySelf(), plus.copySelf(), split.plus, attribute);
+                    new BSPTree<S>(cut.copySelf(), minus1, split.plus, attribute);
                 split.plus.condense();
                 split.plus.parent = split;
             } else {
                 split.minus =
-                    new BSPTree<S>(cut.copySelf(), plus.copySelf(), split.minus, attribute);
+                    new BSPTree<S>(cut.copySelf(), minus1, split.minus, attribute);
                 split.minus.condense();
                 split.minus.parent = split;
             }
@@ -546,8 +547,8 @@
         }
         default :
             return cHyperplane.sameOrientationAs(sHyperplane) ?
-                   new BSPTree<S>(sub, plus.copySelf(),  minus.copySelf(), attribute) :
-                   new BSPTree<S>(sub, minus.copySelf(), plus.copySelf(),  attribute);
+                   new BSPTree<S>(sub, minus1,  minus.copySelf(), attribute) :
+                   new BSPTree<S>(sub, minus.copySelf(), minus1,  attribute);
         }
 
     }
