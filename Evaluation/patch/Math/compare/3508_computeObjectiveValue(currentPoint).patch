==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
index edf07d5..b0aa223 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
@@ -419,7 +419,8 @@
                 }
 
                 // Evaluate the function at x + p and calculate its norm.
-                currentObjective = computeObjectiveValue(currentPoint);
+                double[] var_3508 = computeObjectiveValue(currentPoint);
+				currentObjective = var_3508;
                 currentResiduals = computeResiduals(currentObjective);
                 current = new PointVectorValuePair(currentPoint, currentObjective);
                 currentCost = computeCost(currentResiduals);

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
index edf07d5..2d42b62 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
@@ -305,7 +305,8 @@
         final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
 
         // Evaluate the function at the starting point and calculate its norm.
-        double[] currentObjective = computeObjectiveValue(currentPoint);
+        double[] var_3508 = computeObjectiveValue(currentPoint);
+		double[] currentObjective = var_3508;
         double[] currentResiduals = computeResiduals(currentObjective);
         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
         double currentCost = computeCost(currentResiduals);
@@ -419,7 +420,7 @@
                 }
 
                 // Evaluate the function at x + p and calculate its norm.
-                currentObjective = computeObjectiveValue(currentPoint);
+                currentObjective = var_3508;
                 currentResiduals = computeResiduals(currentObjective);
                 current = new PointVectorValuePair(currentPoint, currentObjective);
                 currentCost = computeCost(currentResiduals);

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
index edf07d5..f0da5ec 100644
--- a/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optimization/general/LevenbergMarquardtOptimizer.java
@@ -305,7 +305,8 @@
         final RealMatrix weightMatrixSqrt = getWeightSquareRoot();
 
         // Evaluate the function at the starting point and calculate its norm.
-        double[] currentObjective = computeObjectiveValue(currentPoint);
+        double[] currentObjective1 = computeObjectiveValue(currentPoint);
+        double[] currentObjective = currentObjective1;
         double[] currentResiduals = computeResiduals(currentObjective);
         PointVectorValuePair current = new PointVectorValuePair(currentPoint, currentObjective);
         double currentCost = computeCost(currentResiduals);
@@ -419,7 +420,7 @@
                 }
 
                 // Evaluate the function at x + p and calculate its norm.
-                currentObjective = computeObjectiveValue(currentPoint);
+                currentObjective = currentObjective1;
                 currentResiduals = computeResiduals(currentObjective);
                 current = new PointVectorValuePair(currentPoint, currentObjective);
                 currentCost = computeCost(currentResiduals);
