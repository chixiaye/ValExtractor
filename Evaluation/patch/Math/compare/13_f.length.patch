==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
index c39fc5e..d5fe6df 100644
--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
@@ -213,7 +213,8 @@
                     /** {@inheritDoc} */
                     public double value(double x) {
                         double r = f[0].derivative().value(x);
-                        for (int i = 1; i < f.length; i++) {
+                        int var_13 = f.length;
+						for (int i = 1; i < var_13; i++) {
                             r += f[i].derivative().value(x);
                         }
                         return r;

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
index c39fc5e..d5fe6df 100644
--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
@@ -213,7 +213,8 @@
                     /** {@inheritDoc} */
                     public double value(double x) {
                         double r = f[0].derivative().value(x);
-                        for (int i = 1; i < f.length; i++) {
+                        int var_13 = f.length;
+						for (int i = 1; i < var_13; i++) {
                             r += f[i].derivative().value(x);
                         }
                         return r;

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
index c39fc5e..696cf7b 100644
--- a/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
+++ b/src/main/java/org/apache/commons/math3/analysis/FunctionUtils.java
@@ -198,10 +198,12 @@
     @Deprecated
     public static DifferentiableUnivariateFunction add(final DifferentiableUnivariateFunction ... f) {
         return new DifferentiableUnivariateFunction() {
+            private final int length = f.length;
+
             /** {@inheritDoc} */
             public double value(double x) {
                 double r = f[0].value(x);
-                for (int i = 1; i < f.length; i++) {
+                for (int i = 1; i < length; i++) {
                     r += f[i].value(x);
                 }
                 return r;
@@ -213,7 +215,7 @@
                     /** {@inheritDoc} */
                     public double value(double x) {
                         double r = f[0].derivative().value(x);
-                        for (int i = 1; i < f.length; i++) {
+                        for (int i = 1; i < length; i++) {
                             r += f[i].derivative().value(x);
                         }
                         return r;
