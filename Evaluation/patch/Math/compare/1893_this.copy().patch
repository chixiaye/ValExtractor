==> /tmp/ours.java <==
diff --git a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
index 6577281..33cbde8 100644
--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
@@ -208,7 +208,8 @@
         }
 
         RealMatrix[] results = new RealMatrix[maxI + 1];
-        results[0] = this.copy();
+        RealMatrix var_1893 = this.copy();
+		results[0] = var_1893;
 
         for (int i = 1; i <= maxI; ++i) {
             results[i] = results[i-1].multiply(results[i-1]);

==> /tmp/eclipse.java <==
diff --git a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
index 6577281..3d3e19b 100644
--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
@@ -178,8 +178,9 @@
             return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
         }
 
+        RealMatrix var_1893 = this.copy();
         if (p == 1) {
-            return this.copy();
+            return var_1893;
         }
 
         final int power = p - 1;
@@ -208,13 +209,13 @@
         }
 
         RealMatrix[] results = new RealMatrix[maxI + 1];
-        results[0] = this.copy();
+        results[0] = var_1893;
 
         for (int i = 1; i <= maxI; ++i) {
             results[i] = results[i-1].multiply(results[i-1]);
         }
 
-        RealMatrix result = this.copy();
+        RealMatrix result = var_1893;
 
         for (Integer i : nonZeroPositions) {
             result = result.multiply(results[i]);

==> /tmp/idea.java <==
diff --git a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
index 6577281..8c14975 100644
--- a/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
+++ b/src/main/java/org/apache/commons/math3/linear/AbstractRealMatrix.java
@@ -178,8 +178,9 @@
             return MatrixUtils.createRealIdentityMatrix(this.getRowDimension());
         }
 
+        RealMatrix copy = this.copy();
         if (p == 1) {
-            return this.copy();
+            return copy;
         }
 
         final int power = p - 1;
@@ -208,13 +209,13 @@
         }
 
         RealMatrix[] results = new RealMatrix[maxI + 1];
-        results[0] = this.copy();
+        results[0] = copy;
 
         for (int i = 1; i <= maxI; ++i) {
             results[i] = results[i-1].multiply(results[i-1]);
         }
 
-        RealMatrix result = this.copy();
+        RealMatrix result = copy;
 
         for (Integer i : nonZeroPositions) {
             result = result.multiply(results[i]);
