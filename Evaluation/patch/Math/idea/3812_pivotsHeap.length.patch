diff --git a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
index db447aa..42cf532 100644
--- a/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
+++ b/src/main/java/org/apache/commons/math3/stat/descriptive/rank/Percentile.java
@@ -324,14 +324,15 @@
         while (end - begin > MIN_SELECT_SIZE) {
 
             final int pivot;
-            if ((node < pivotsHeap.length) && (pivotsHeap[node] >= 0)) {
+            int length = pivotsHeap.length;
+            if ((node < length) && (pivotsHeap[node] >= 0)) {
                 // the pivot has already been found in a previous call
                 // and the array has already been partitioned around it
                 pivot = pivotsHeap[node];
             } else {
                 // select a pivot and partition work array around it
                 pivot = partition(work, begin, end, medianOf3(work, begin, end));
-                if (node < pivotsHeap.length) {
+                if (node < length) {
                     pivotsHeap[node] =  pivot;
                 }
             }
@@ -342,11 +343,11 @@
             } else if (k < pivot) {
                 // the element is in the left partition
                 end  = pivot;
-                node = FastMath.min(2 * node + 1, pivotsHeap.length); // the min is here to avoid integer overflow
+                node = FastMath.min(2 * node + 1, length); // the min is here to avoid integer overflow
             } else {
                 // the element is in the right partition
                 begin = pivot + 1;
-                node  = FastMath.min(2 * node + 2, pivotsHeap.length); // the min is here to avoid integer overflow
+                node  = FastMath.min(2 * node + 2, length); // the min is here to avoid integer overflow
             }
 
         }
