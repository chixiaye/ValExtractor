diff --git a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
index 70b58cf..538a1ff 100644
--- a/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
+++ b/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
@@ -94,8 +94,9 @@
         // create a list of all the rows that tie for the lowest score in the minimum ratio test
         List<Integer> minRatioPositions = new ArrayList<Integer>();
         double minRatio = Double.MAX_VALUE;
+        int width = tableau.getWidth();
         for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
-            final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
+            final double rhs = tableau.getEntry(i, width - 1);
             final double entry = tableau.getEntry(i, col);
 
             if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
@@ -142,9 +143,9 @@
             // This heuristic is based on empirical data gathered while investigating MATH-828.
             if (getIterations() < getMaxIterations() / 2) {
                 Integer minRow = null;
-                int minIndex = tableau.getWidth();
+                int minIndex = width;
                 final int varStart = tableau.getNumObjectiveFunctions();
-                final int varEnd = tableau.getWidth() - 1;
+                final int varEnd = width - 1;
                 for (Integer row : minRatioPositions) {
                     for (int i = varStart; i < varEnd && !row.equals(minRow); i++) {
                         final Integer basicRow = tableau.getBasicRow(i);
