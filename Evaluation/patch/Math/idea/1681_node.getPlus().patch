diff --git a/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java b/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java
index d33ceab..976750a 100644
--- a/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java
+++ b/src/main/java/org/apache/commons/math3/geometry/partitioning/AbstractRegion.java
@@ -478,6 +478,7 @@
         }
 
         final Hyperplane<S> hyperplane = node.getCut().getHyperplane();
+        BSPTree<S> plus = node.getPlus();
         switch (sub.side(hyperplane)) {
         case PLUS :
             // the sub-hyperplane is entirely in the plus sub-tree
@@ -491,17 +492,17 @@
                 }
             }
             if (!(sides.plusFound() && sides.minusFound())) {
-                recurseSides(node.getPlus(), sub, sides);
+                recurseSides(plus, sub, sides);
             }
             break;
         case MINUS :
             // the sub-hyperplane is entirely in the minus sub-tree
             if (node.getCut().side(sub.getHyperplane()) == Side.PLUS) {
-                if (!isEmpty(node.getPlus())) {
+                if (!isEmpty(plus)) {
                     sides.rememberPlusFound();
                 }
             } else {
-                if (!isEmpty(node.getPlus())) {
+                if (!isEmpty(plus)) {
                     sides.rememberMinusFound();
                 }
             }
@@ -514,7 +515,7 @@
             final SubHyperplane.SplitSubHyperplane<S> split = sub.split(hyperplane);
 
             // explore first the plus sub-tree
-            recurseSides(node.getPlus(), split.getPlus(), sides);
+            recurseSides(plus, split.getPlus(), sides);
 
             // if needed, explore the minus sub-tree
             if (!(sides.plusFound() && sides.minusFound())) {
@@ -524,14 +525,14 @@
         default :
             // the sub-hyperplane and the cut sub-hyperplane share the same hyperplane
             if (node.getCut().getHyperplane().sameOrientationAs(sub.getHyperplane())) {
-                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {
+                if ((plus.getCut() != null) || ((Boolean) plus.getAttribute())) {
                     sides.rememberPlusFound();
                 }
                 if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {
                     sides.rememberMinusFound();
                 }
             } else {
-                if ((node.getPlus().getCut() != null) || ((Boolean) node.getPlus().getAttribute())) {
+                if ((plus.getCut() != null) || ((Boolean) plus.getAttribute())) {
                     sides.rememberMinusFound();
                 }
                 if ((node.getMinus().getCut() != null) || ((Boolean) node.getMinus().getAttribute())) {
