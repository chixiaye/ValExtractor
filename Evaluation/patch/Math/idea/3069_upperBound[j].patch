diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
index efc0110..cda2ba7 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
@@ -295,7 +295,8 @@
         for (int j = 0; j < n; j++) {
             final double boundDiff = boundDifference[j];
             lowerDifference.setEntry(j, lowerBound[j] - currentBest.getEntry(j));
-            upperDifference.setEntry(j, upperBound[j] - currentBest.getEntry(j));
+            double value = upperBound[j];
+            upperDifference.setEntry(j, value - currentBest.getEntry(j));
             if (lowerDifference.getEntry(j) >= -initialTrustRegionRadius) {
                 if (lowerDifference.getEntry(j) >= ZERO) {
                     currentBest.setEntry(j, lowerBound[j]);
@@ -305,16 +306,16 @@
                     currentBest.setEntry(j, lowerBound[j] + initialTrustRegionRadius);
                     lowerDifference.setEntry(j, -initialTrustRegionRadius);
                     // Computing MAX
-                    final double deltaOne = upperBound[j] - currentBest.getEntry(j);
+                    final double deltaOne = value - currentBest.getEntry(j);
                     upperDifference.setEntry(j, Math.max(deltaOne, initialTrustRegionRadius));
                 }
             } else if (upperDifference.getEntry(j) <= initialTrustRegionRadius) {
                 if (upperDifference.getEntry(j) <= ZERO) {
-                    currentBest.setEntry(j, upperBound[j]);
+                    currentBest.setEntry(j, value);
                     lowerDifference.setEntry(j, -boundDiff);
                     upperDifference.setEntry(j, ZERO);
                 } else {
-                    currentBest.setEntry(j, upperBound[j] - initialTrustRegionRadius);
+                    currentBest.setEntry(j, value - initialTrustRegionRadius);
                     // Computing MIN
                     final double deltaOne = lowerBound[j] - currentBest.getEntry(j);
                     final double deltaTwo = -initialTrustRegionRadius;
