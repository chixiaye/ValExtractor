diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
index 7437838..b80332d 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
@@ -206,8 +206,9 @@
             if (dFdZ[i].length != yLen) {
                 throw new DimensionMismatchException(dFdZ[i].length, yLen);
             }
-            if (d2FdXdY[i].length != yLen) {
-                throw new DimensionMismatchException(d2FdXdY[i].length, yLen);
+            double[][] doubles = d2FdXdY[i];
+            if (doubles.length != yLen) {
+                throw new DimensionMismatchException(doubles.length, yLen);
             }
             if (d2FdXdZ[i].length != yLen) {
                 throw new DimensionMismatchException(d2FdXdZ[i].length, yLen);
@@ -233,8 +234,8 @@
                 if (dFdZ[i][j].length != zLen) {
                     throw new DimensionMismatchException(dFdZ[i][j].length, zLen);
                 }
-                if (d2FdXdY[i][j].length != zLen) {
-                    throw new DimensionMismatchException(d2FdXdY[i][j].length, zLen);
+                if (doubles[j].length != zLen) {
+                    throw new DimensionMismatchException(doubles[j].length, zLen);
                 }
                 if (d2FdXdZ[i][j].length != zLen) {
                     throw new DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
@@ -271,10 +272,10 @@
                         dFdZ[i][j][kp1], dFdZ[ip1][j][kp1],
                         dFdZ[i][jp1][kp1], dFdZ[ip1][jp1][kp1],
 
-                        d2FdXdY[i][j][k], d2FdXdY[ip1][j][k],
-                        d2FdXdY[i][jp1][k], d2FdXdY[ip1][jp1][k],
-                        d2FdXdY[i][j][kp1], d2FdXdY[ip1][j][kp1],
-                        d2FdXdY[i][jp1][kp1], d2FdXdY[ip1][jp1][kp1],
+                        doubles[j][k], d2FdXdY[ip1][j][k],
+                        doubles[jp1][k], d2FdXdY[ip1][jp1][k],
+                        doubles[j][kp1], d2FdXdY[ip1][j][kp1],
+                        doubles[jp1][kp1], d2FdXdY[ip1][jp1][kp1],
 
                         d2FdXdZ[i][j][k], d2FdXdZ[ip1][j][k],
                         d2FdXdZ[i][jp1][k], d2FdXdZ[ip1][jp1][k],
