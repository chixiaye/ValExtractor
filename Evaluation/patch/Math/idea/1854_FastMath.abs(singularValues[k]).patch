diff --git a/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java b/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
index efbe8a2..36db043 100644
--- a/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/SingularValueDecomposition.java
@@ -281,9 +281,10 @@
             // kase = 3     if e[k-1] is negligible, k<p, and
             //              s(k), ..., s(p) are not negligible (qr step).
             // kase = 4     if e(p-1) is negligible (convergence).
+            double abs = FastMath.abs(singularValues[k]);
             for (k = p - 2; k >= 0; k--) {
                 final double threshold
-                    = TINY + EPS * (FastMath.abs(singularValues[k]) +
+                    = TINY + EPS * (abs +
                                     FastMath.abs(singularValues[k + 1]));
 
                 // the following condition is written this way in order
@@ -375,7 +376,7 @@
                                                           FastMath.abs(singularValues[p - 2]));
                     final double scale = FastMath.max(FastMath.max(FastMath.max(maxPm1Pm2,
                                                                                 FastMath.abs(e[p - 2])),
-                                                                   FastMath.abs(singularValues[k])),
+                                    abs),
                                                       FastMath.abs(e[k]));
                     final double sp = singularValues[p - 1] / scale;
                     final double spm1 = singularValues[p - 2] / scale;
