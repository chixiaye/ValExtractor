diff --git a/src/main/java/org/apache/commons/math3/util/Precision.java b/src/main/java/org/apache/commons/math3/util/Precision.java
index ef3b57f..36ace72 100644
--- a/src/main/java/org/apache/commons/math3/util/Precision.java
+++ b/src/main/java/org/apache/commons/math3/util/Precision.java
@@ -455,6 +455,7 @@
                                         double sign,
                                         int roundingMethod)
         throws MathArithmeticException, MathIllegalArgumentException {
+        double floor = FastMath.floor(unscaled);
         switch (roundingMethod) {
         case BigDecimal.ROUND_CEILING :
             if (sign == -1) {
@@ -475,25 +476,25 @@
             break;
         case BigDecimal.ROUND_HALF_DOWN : {
             unscaled = FastMath.nextAfter(unscaled, Double.NEGATIVE_INFINITY);
-            double fraction = unscaled - FastMath.floor(unscaled);
+            double fraction = unscaled - floor;
             if (fraction > 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else {
-                unscaled = FastMath.floor(unscaled);
+                unscaled = floor;
             }
             break;
         }
         case BigDecimal.ROUND_HALF_EVEN : {
-            double fraction = unscaled - FastMath.floor(unscaled);
+            double fraction = unscaled - floor;
             if (fraction > 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else if (fraction < 0.5) {
-                unscaled = FastMath.floor(unscaled);
+                unscaled = floor;
             } else {
                 // The following equality test is intentional and needed for rounding purposes
-                if (FastMath.floor(unscaled) / 2.0 == FastMath.floor(Math
+                if (floor / 2.0 == FastMath.floor(Math
                     .floor(unscaled) / 2.0)) { // even
-                    unscaled = FastMath.floor(unscaled);
+                    unscaled = floor;
                 } else { // odd
                     unscaled = FastMath.ceil(unscaled);
                 }
@@ -502,16 +503,16 @@
         }
         case BigDecimal.ROUND_HALF_UP : {
             unscaled = FastMath.nextAfter(unscaled, Double.POSITIVE_INFINITY);
-            double fraction = unscaled - FastMath.floor(unscaled);
+            double fraction = unscaled - floor;
             if (fraction >= 0.5) {
                 unscaled = FastMath.ceil(unscaled);
             } else {
-                unscaled = FastMath.floor(unscaled);
+                unscaled = floor;
             }
             break;
         }
         case BigDecimal.ROUND_UNNECESSARY :
-            if (unscaled != FastMath.floor(unscaled)) {
+            if (unscaled != floor) {
                 throw new MathArithmeticException();
             }
             break;
