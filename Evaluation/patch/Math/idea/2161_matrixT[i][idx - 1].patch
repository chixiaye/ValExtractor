diff --git a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
index 4652f61..be0f3e4 100644
--- a/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
+++ b/src/main/java/org/apache/commons/math3/linear/EigenDecomposition.java
@@ -879,6 +879,7 @@
                         s = sa;
                     } else {
                         l = i;
+                        double v = matrixT[i][idx - 1];
                         if (Precision.equals(imagEigenvalues[i], 0.0)) {
                             final Complex c = cdiv(-ra, -sa, w, q);
                             matrixT[i][idx - 1] = c.getReal();
@@ -901,12 +902,12 @@
                             matrixT[i][idx]     = c.getImaginary();
 
                             if (FastMath.abs(x) > (FastMath.abs(z) + FastMath.abs(q))) {
-                                matrixT[i + 1][idx - 1] = (-ra - w * matrixT[i][idx - 1] +
+                                matrixT[i + 1][idx - 1] = (-ra - w * v +
                                                            q * matrixT[i][idx]) / x;
                                 matrixT[i + 1][idx]     = (-sa - w * matrixT[i][idx] -
-                                                           q * matrixT[i][idx - 1]) / x;
+                                                           q * v) / x;
                             } else {
-                                final Complex c2        = cdiv(-r - y * matrixT[i][idx - 1],
+                                final Complex c2        = cdiv(-r - y * v,
                                                                -s - y * matrixT[i][idx], z, q);
                                 matrixT[i + 1][idx - 1] = c2.getReal();
                                 matrixT[i + 1][idx]     = c2.getImaginary();
@@ -914,7 +915,7 @@
                         }
 
                         // Overflow control
-                        double t = FastMath.max(FastMath.abs(matrixT[i][idx - 1]),
+                        double t = FastMath.max(FastMath.abs(v),
                                                 FastMath.abs(matrixT[i][idx]));
                         if ((Precision.EPSILON * t) * t > 1) {
                             for (int j = i; j <= idx; j++) {
