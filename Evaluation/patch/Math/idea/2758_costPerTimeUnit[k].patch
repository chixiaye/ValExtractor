diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
index ed2ddda..2aaafb2 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
@@ -872,16 +872,17 @@
         firstStepAlreadyComputed = true;
 
         int optimalIter;
-        if (k == 1) {
+          double v = costPerTimeUnit[k];
+          if (k == 1) {
           optimalIter = 2;
           if (previousRejected) {
             optimalIter = 1;
           }
         } else if (k <= targetIter) {
           optimalIter = k;
-          if (costPerTimeUnit[k-1] < orderControl1 * costPerTimeUnit[k]) {
+          if (costPerTimeUnit[k-1] < orderControl1 * v) {
             optimalIter = k-1;
-          } else if (costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1]) {
+          } else if (v < orderControl2 * costPerTimeUnit[k-1]) {
             optimalIter = FastMath.min(k+1, sequence.length - 2);
           }
         } else {
@@ -890,7 +891,7 @@
               (costPerTimeUnit[k-2] < orderControl1 * costPerTimeUnit[k-1])) {
             optimalIter = k - 2;
           }
-          if (costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[optimalIter]) {
+          if (v < orderControl2 * costPerTimeUnit[optimalIter]) {
             optimalIter = FastMath.min(k, sequence.length - 2);
           }
         }
@@ -906,7 +907,7 @@
             hNew = optimalStep[optimalIter];
           } else {
             if ((k < targetIter) &&
-                (costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1])) {
+                (v < orderControl2 * costPerTimeUnit[k-1])) {
               hNew = filterStep(optimalStep[k] * costPerStep[optimalIter+1] / costPerStep[k],
                                forward, false);
             } else {
