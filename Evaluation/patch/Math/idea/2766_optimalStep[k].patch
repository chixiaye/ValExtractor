diff --git a/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java b/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
index ed2ddda..0f2aa5c 100644
--- a/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
+++ b/src/main/java/org/apache/commons/math3/ode/nonstiff/GraggBulirschStoerIntegrator.java
@@ -656,7 +656,8 @@
 
       // iterate over several substep sizes
       int k = -1;
-      for (boolean loop = true; loop; ) {
+        double v = optimalStep[k];
+        for (boolean loop = true; loop; ) {
 
         ++k;
 
@@ -704,7 +705,7 @@
               final double pow = FastMath.pow(stepControl3, exp);
               fac = FastMath.max(pow / stepControl4, FastMath.min(1 / pow, fac));
               optimalStep[k]     = FastMath.abs(filterStep(stepSize * fac, forward, true));
-              costPerTimeUnit[k] = costPerStep[k] / optimalStep[k];
+              costPerTimeUnit[k] = costPerStep[k] / v;
 
               // check convergence
               switch (k - targetIter) {
@@ -907,10 +908,10 @@
           } else {
             if ((k < targetIter) &&
                 (costPerTimeUnit[k] < orderControl2 * costPerTimeUnit[k-1])) {
-              hNew = filterStep(optimalStep[k] * costPerStep[optimalIter+1] / costPerStep[k],
+              hNew = filterStep(v * costPerStep[optimalIter+1] / costPerStep[k],
                                forward, false);
             } else {
-              hNew = filterStep(optimalStep[k] * costPerStep[optimalIter] / costPerStep[k],
+              hNew = filterStep(v * costPerStep[optimalIter] / costPerStep[k],
                                 forward, false);
             }
           }
