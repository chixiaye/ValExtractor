diff --git a/src/main/java/org/apache/commons/math3/dfp/Dfp.java b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
index e6de61f..ae4a65e 100644
--- a/src/main/java/org/apache/commons/math3/dfp/Dfp.java
+++ b/src/main/java/org/apache/commons/math3/dfp/Dfp.java
@@ -1969,7 +1969,8 @@
     public Dfp sqrt() {
 
         // check for unusual cases
-        if (nans == FINITE && mant[mant.length-1] == 0) {
+        int length = mant.length;
+        if (nans == FINITE && mant[length -1] == 0) {
             // if zero
             return newInstance(this);
         }
@@ -2013,18 +2014,18 @@
         }
 
         /* Coarsely estimate the mantissa */
-        switch (x.mant[mant.length-1] / 2000) {
+        switch (x.mant[length -1] / 2000) {
             case 0:
-                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;
+                x.mant[length -1] = x.mant[length -1]/2+1;
                 break;
             case 2:
-                x.mant[mant.length-1] = 1500;
+                x.mant[length -1] = 1500;
                 break;
             case 3:
-                x.mant[mant.length-1] = 2200;
+                x.mant[length -1] = 2200;
                 break;
             default:
-                x.mant[mant.length-1] = 3000;
+                x.mant[length -1] = 3000;
         }
 
         Dfp dx = newInstance(x);
@@ -2050,7 +2051,7 @@
 
             // if dx is zero, break.  Note testing the most sig digit
             // is a sufficient test since dx is normalized
-            if (dx.mant[mant.length-1] == 0) {
+            if (dx.mant[length -1] == 0) {
                 break;
             }
         }
