diff --git a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
index 7437838..acb89b3 100644
--- a/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
+++ b/src/main/java/org/apache/commons/math3/analysis/interpolation/TricubicSplineInterpolatingFunction.java
@@ -215,8 +215,9 @@
             if (d2FdYdZ[i].length != yLen) {
                 throw new DimensionMismatchException(d2FdYdZ[i].length, yLen);
             }
-            if (d3FdXdYdZ[i].length != yLen) {
-                throw new DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
+            double[][] doubles = d3FdXdYdZ[i];
+            if (doubles.length != yLen) {
+                throw new DimensionMismatchException(doubles.length, yLen);
             }
 
             final int ip1 = i + 1;
@@ -242,8 +243,8 @@
                 if (d2FdYdZ[i][j].length != zLen) {
                     throw new DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
                 }
-                if (d3FdXdYdZ[i][j].length != zLen) {
-                    throw new DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
+                if (doubles[j].length != zLen) {
+                    throw new DimensionMismatchException(doubles[j].length, zLen);
                 }
 
                 final int jp1 = j + 1;
@@ -286,10 +287,10 @@
                         d2FdYdZ[i][j][kp1], d2FdYdZ[ip1][j][kp1],
                         d2FdYdZ[i][jp1][kp1], d2FdYdZ[ip1][jp1][kp1],
 
-                        d3FdXdYdZ[i][j][k], d3FdXdYdZ[ip1][j][k],
-                        d3FdXdYdZ[i][jp1][k], d3FdXdYdZ[ip1][jp1][k],
-                        d3FdXdYdZ[i][j][kp1], d3FdXdYdZ[ip1][j][kp1],
-                        d3FdXdYdZ[i][jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1],
+                        doubles[j][k], d3FdXdYdZ[ip1][j][k],
+                        doubles[jp1][k], d3FdXdYdZ[ip1][jp1][k],
+                        doubles[j][kp1], d3FdXdYdZ[ip1][j][kp1],
+                        doubles[jp1][kp1], d3FdXdYdZ[ip1][jp1][kp1],
                     };
 
                     splines[i][j][k] = new TricubicSplineFunction(computeSplineCoefficients(beta));
