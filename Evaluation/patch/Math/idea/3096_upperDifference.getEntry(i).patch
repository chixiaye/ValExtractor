diff --git a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
index efc0110..20046c7 100644
--- a/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
+++ b/src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/BOBYQAOptimizer.java
@@ -1050,19 +1050,22 @@
                         // Computing 2nd power
                         final double d2 = Math.min(ZERO, sum);
                         gisq += d2 * d2;
-                    } else if (trustRegionCenterOffset.getEntry(i) == upperDifference.getEntry(i)) {
-                        // Computing MAX
-                        // Computing 2nd power
-                        final double d1 = Math.max(ZERO, gradientAtTrustRegionCenter.getEntry(i));
-                        gqsq += d1 * d1;
-                        // Computing 2nd power
-                        final double d2 = Math.max(ZERO, sum);
-                        gisq += d2 * d2;
                     } else {
-                        // Computing 2nd power
-                        final double d1 = gradientAtTrustRegionCenter.getEntry(i);
-                        gqsq += d1 * d1;
-                        gisq += sum * sum;
+                        double entry = upperDifference.getEntry(i);
+                        if (trustRegionCenterOffset.getEntry(i) == entry) {
+                            // Computing MAX
+                            // Computing 2nd power
+                            final double d1 = Math.max(ZERO, gradientAtTrustRegionCenter.getEntry(i));
+                            gqsq += d1 * d1;
+                            // Computing 2nd power
+                            final double d2 = Math.max(ZERO, sum);
+                            gisq += d2 * d2;
+                        } else {
+                            // Computing 2nd power
+                            final double d1 = gradientAtTrustRegionCenter.getEntry(i);
+                            gqsq += d1 * d1;
+                            gisq += sum * sum;
+                        }
                     }
                     lagrangeValuesAtNewPoint.setEntry(npt + i, sum);
                 }
