diff --git a/src/main/java/org/apache/commons/lang3/ObjectUtils.java b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
index ab31d6f..a13393c 100644
--- a/src/main/java/org/apache/commons/lang3/ObjectUtils.java
+++ b/src/main/java/org/apache/commons/lang3/ObjectUtils.java
@@ -586,8 +586,9 @@
     public static <T> T clone(final T obj) {
         if (obj instanceof Cloneable) {
             final Object result;
-            if (obj.getClass().isArray()) {
-                final Class<?> componentType = obj.getClass().getComponentType();
+            Class<? extends Object> var_2 = obj.getClass();
+			if (var_2.isArray()) {
+                final Class<?> componentType = var_2.getComponentType();
                 if (!componentType.isPrimitive()) {
                     result = ((Object[]) obj).clone();
                 } else {
@@ -599,18 +600,18 @@
                 }
             } else {
                 try {
-                    final Method clone = obj.getClass().getMethod("clone");
+                    final Method clone = var_2.getMethod("clone");
                     result = clone.invoke(obj);
                 } catch (final NoSuchMethodException e) {
                     throw new CloneFailedException("Cloneable type "
-                        + obj.getClass().getName()
+                        + var_2.getName()
                         + " has no clone method", e);
                 } catch (final IllegalAccessException e) {
                     throw new CloneFailedException("Cannot clone Cloneable type "
-                        + obj.getClass().getName(), e);
+                        + var_2.getName(), e);
                 } catch (final InvocationTargetException e) {
                     throw new CloneFailedException("Exception cloning Cloneable type "
-                        + obj.getClass().getName(), e.getCause());
+                        + var_2.getName(), e.getCause());
                 }
             }
             @SuppressWarnings("unchecked") // OK because input is of type T
