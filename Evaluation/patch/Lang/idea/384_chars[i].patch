diff --git a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
index 70b8d64..999b8cd 100644
--- a/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
+++ b/src/main/java/org/apache/commons/lang3/math/NumberUtils.java
@@ -1363,18 +1363,19 @@
         int i = start;
         // loop to the next to last char or to the last char if we need another digit to
         // make a valid number (e.g. chars[0..5] = "1234E")
+        char aChar = chars[i];
         while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
+            if (aChar >= '0' && aChar <= '9') {
                 foundDigit = true;
                 allowSigns = false;
 
-            } else if (chars[i] == '.') {
+            } else if (aChar == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent   
                     return false;
                 }
                 hasDecPoint = true;
-            } else if (chars[i] == 'e' || chars[i] == 'E') {
+            } else if (aChar == 'e' || aChar == 'E') {
                 // we've already taken care of hex.
                 if (hasExp) {
                     // two E's
@@ -1385,7 +1386,7 @@
                 }
                 hasExp = true;
                 allowSigns = true;
-            } else if (chars[i] == '+' || chars[i] == '-') {
+            } else if (aChar == '+' || aChar == '-') {
                 if (!allowSigns) {
                     return false;
                 }
@@ -1397,15 +1398,15 @@
             i++;
         }
         if (i < chars.length) {
-            if (chars[i] >= '0' && chars[i] <= '9') {
+            if (aChar >= '0' && aChar <= '9') {
                 // no type qualifier, OK
                 return true;
             }
-            if (chars[i] == 'e' || chars[i] == 'E') {
+            if (aChar == 'e' || aChar == 'E') {
                 // can't have an E at the last byte
                 return false;
             }
-            if (chars[i] == '.') {
+            if (aChar == '.') {
                 if (hasDecPoint || hasExp) {
                     // two decimal points or dec in exponent
                     return false;
@@ -1414,14 +1415,14 @@
                 return foundDigit;
             }
             if (!allowSigns
-                && (chars[i] == 'd'
-                    || chars[i] == 'D'
-                    || chars[i] == 'f'
-                    || chars[i] == 'F')) {
+                && (aChar == 'd'
+                    || aChar == 'D'
+                    || aChar == 'f'
+                    || aChar == 'F')) {
                 return foundDigit;
             }
-            if (chars[i] == 'l'
-                || chars[i] == 'L') {
+            if (aChar == 'l'
+                || aChar == 'L') {
                 // not allowing L with an exponent or decimal point
                 return foundDigit && !hasExp && !hasDecPoint;
             }
