==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..2e4fe66 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -724,7 +724,8 @@
                   continue retry;
 
                 case MODIFIES:
-                  token = parseModifiesTag(next());
+                  JsDocToken var_2294 = next();
+				token = parseModifiesTag(var_2294);
                   continue retry;
 
                 case IMPLICIT_CAST:

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..c07b37d 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -190,7 +190,8 @@
     state = State.SEARCHING_ANNOTATION;
     skipEOLs();
 
-    JsDocToken token = next();
+    JsDocToken var_2294 = next();
+	JsDocToken token = var_2294;
 
     List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();
 
@@ -372,7 +373,7 @@
                   continue retry;
 
                 case ENUM:
-                  token = next();
+                  token = var_2294;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
 
@@ -427,13 +428,13 @@
                 case EXTENDS:
                 case IMPLEMENTS:
                   skipEOLs();
-                  token = next();
+                  token = var_2294;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   boolean matchingRc = false;
 
                   if (token == JsDocToken.LC) {
-                    token = next();
+                    token = var_2294;
                     matchingRc = true;
                   }
 
@@ -459,7 +460,7 @@
                             lineno, charno);
                       }
                     }
-                    token = next();
+                    token = var_2294;
                     if (matchingRc) {
                       if (token != JsDocToken.RC) {
                         parser.addTypeWarning("msg.jsdoc.missing.rc",
@@ -489,12 +490,12 @@
 
                   matchingRc = false;
                   if (match(JsDocToken.LC)) {
-                    token = next();
+                    token = var_2294;
                     matchingRc = true;
                   }
 
                   if (match(JsDocToken.STRING)) {
-                    token = next();
+                    token = var_2294;
                     if (!jsdocBuilder.recordLends(stream.getString())) {
                       parser.addTypeWarning("msg.jsdoc.lends.incompatible",
                           stream.getLineno(), stream.getCharno());
@@ -561,7 +562,7 @@
 
                 case THROWS:
                   skipEOLs();
-                  token = next();
+                  token = var_2294;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   type = null;
@@ -603,7 +604,7 @@
 
                 case PARAM:
                   skipEOLs();
-                  token = next();
+                  token = var_2294;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   type = null;
@@ -619,7 +620,7 @@
                       continue retry;
                     }
                     skipEOLs();
-                    token = next();
+                    token = var_2294;
                     lineno = stream.getLineno();
                     charno = stream.getCharno();
                   }
@@ -627,7 +628,7 @@
                   String name = null;
                   boolean isBracketedParam = JsDocToken.LB == token;
                   if (isBracketedParam) {
-                    token = next();
+                    token = var_2294;
                   }
 
                   if (JsDocToken.STRING != token) {
@@ -637,15 +638,15 @@
                     name = stream.getString();
 
                     if (isBracketedParam) {
-                      token = next();
+                      token = var_2294;
 
                       // Throw out JsDocToolkit's "default" parameter
                       // annotation.  It makes no sense under our type
                       // system.
                       if (JsDocToken.EQUALS == token) {
-                        token = next();
+                        token = var_2294;
                         if (JsDocToken.STRING == token) {
-                          token = next();
+                          token = var_2294;
                         }
                       }
 
@@ -724,7 +725,7 @@
                   continue retry;
 
                 case MODIFIES:
-                  token = parseModifiesTag(next());
+                  token = parseModifiesTag(var_2294);
                   continue retry;
 
                 case IMPLICIT_CAST:
@@ -762,7 +763,7 @@
                   continue retry;
 
                 case SUPPRESS:
-                  token = parseSuppressTag(next());
+                  token = parseSuppressTag(var_2294);
                   continue retry;
 
                 case TEMPLATE:
@@ -833,7 +834,7 @@
                   type = null;
                   if (hasType || !canSkipTypeAnnotation) {
                     skipEOLs();
-                    token = next();
+                    token = var_2294;
                     typeNode = parseAndRecordTypeNode(token);
 
                     if (annotation == Annotation.THIS) {
@@ -972,12 +973,12 @@
           if (state == State.SEARCHING_NEWLINE) {
             state = State.SEARCHING_ANNOTATION;
           }
-          token = next();
+          token = var_2294;
           continue retry;
 
         default:
           if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {
-            token = next();
+            token = var_2294;
             continue retry;
           } else {
             state = State.SEARCHING_NEWLINE;
@@ -987,7 +988,7 @@
       }
 
       // next token
-      token = next();
+      token = var_2294;
     }
   }
 

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..a718c7e 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -190,7 +190,8 @@
     state = State.SEARCHING_ANNOTATION;
     skipEOLs();
 
-    JsDocToken token = next();
+      JsDocToken next = next();
+      JsDocToken token = next;
 
     List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();
 
@@ -372,7 +373,7 @@
                   continue retry;
 
                 case ENUM:
-                  token = next();
+                  token = next;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
 
@@ -427,13 +428,13 @@
                 case EXTENDS:
                 case IMPLEMENTS:
                   skipEOLs();
-                  token = next();
+                  token = next;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   boolean matchingRc = false;
 
                   if (token == JsDocToken.LC) {
-                    token = next();
+                    token = next;
                     matchingRc = true;
                   }
 
@@ -459,7 +460,7 @@
                             lineno, charno);
                       }
                     }
-                    token = next();
+                    token = next;
                     if (matchingRc) {
                       if (token != JsDocToken.RC) {
                         parser.addTypeWarning("msg.jsdoc.missing.rc",
@@ -489,12 +490,12 @@
 
                   matchingRc = false;
                   if (match(JsDocToken.LC)) {
-                    token = next();
+                    token = next;
                     matchingRc = true;
                   }
 
                   if (match(JsDocToken.STRING)) {
-                    token = next();
+                    token = next;
                     if (!jsdocBuilder.recordLends(stream.getString())) {
                       parser.addTypeWarning("msg.jsdoc.lends.incompatible",
                           stream.getLineno(), stream.getCharno());
@@ -561,7 +562,7 @@
 
                 case THROWS:
                   skipEOLs();
-                  token = next();
+                  token = next;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   type = null;
@@ -603,7 +604,7 @@
 
                 case PARAM:
                   skipEOLs();
-                  token = next();
+                  token = next;
                   lineno = stream.getLineno();
                   charno = stream.getCharno();
                   type = null;
@@ -619,7 +620,7 @@
                       continue retry;
                     }
                     skipEOLs();
-                    token = next();
+                    token = next;
                     lineno = stream.getLineno();
                     charno = stream.getCharno();
                   }
@@ -627,7 +628,7 @@
                   String name = null;
                   boolean isBracketedParam = JsDocToken.LB == token;
                   if (isBracketedParam) {
-                    token = next();
+                    token = next;
                   }
 
                   if (JsDocToken.STRING != token) {
@@ -637,15 +638,15 @@
                     name = stream.getString();
 
                     if (isBracketedParam) {
-                      token = next();
+                      token = next;
 
                       // Throw out JsDocToolkit's "default" parameter
                       // annotation.  It makes no sense under our type
                       // system.
                       if (JsDocToken.EQUALS == token) {
-                        token = next();
+                        token = next;
                         if (JsDocToken.STRING == token) {
-                          token = next();
+                          token = next;
                         }
                       }
 
@@ -724,7 +725,7 @@
                   continue retry;
 
                 case MODIFIES:
-                  token = parseModifiesTag(next());
+                  token = parseModifiesTag(next);
                   continue retry;
 
                 case IMPLICIT_CAST:
@@ -762,7 +763,7 @@
                   continue retry;
 
                 case SUPPRESS:
-                  token = parseSuppressTag(next());
+                  token = parseSuppressTag(next);
                   continue retry;
 
                 case TEMPLATE:
@@ -833,7 +834,7 @@
                   type = null;
                   if (hasType || !canSkipTypeAnnotation) {
                     skipEOLs();
-                    token = next();
+                    token = next;
                     typeNode = parseAndRecordTypeNode(token);
 
                     if (annotation == Annotation.THIS) {
@@ -972,12 +973,12 @@
           if (state == State.SEARCHING_NEWLINE) {
             state = State.SEARCHING_ANNOTATION;
           }
-          token = next();
+          token = next;
           continue retry;
 
         default:
           if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {
-            token = next();
+            token = next;
             continue retry;
           } else {
             state = State.SEARCHING_NEWLINE;
@@ -987,7 +988,7 @@
       }
 
       // next token
-      token = next();
+      token = next;
     }
   }
 
