==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/CombinedCompilerPass.java b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
index 28b29e5..da6a776 100644
--- a/src/com/google/javascript/jscomp/CombinedCompilerPass.java
+++ b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
@@ -64,7 +64,8 @@
   CombinedCompilerPass(
       AbstractCompiler compiler, List<Callback> callbacks) {
     this.compiler = compiler;
-    this.callbacks = new CallbackWrapper[callbacks.size()];
+    int var_392 = callbacks.size();
+	this.callbacks = new CallbackWrapper[var_392];
     for (int i = 0; i < callbacks.size(); i++) {
       this.callbacks[i] = new CallbackWrapper(callbacks.get(i));
     }

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/CombinedCompilerPass.java b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
index 28b29e5..f57a6bf 100644
--- a/src/com/google/javascript/jscomp/CombinedCompilerPass.java
+++ b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
@@ -64,8 +64,9 @@
   CombinedCompilerPass(
       AbstractCompiler compiler, List<Callback> callbacks) {
     this.compiler = compiler;
-    this.callbacks = new CallbackWrapper[callbacks.size()];
-    for (int i = 0; i < callbacks.size(); i++) {
+    int var_392 = callbacks.size();
+	this.callbacks = new CallbackWrapper[var_392];
+    for (int i = 0; i < var_392; i++) {
       this.callbacks[i] = new CallbackWrapper(callbacks.get(i));
     }
   }

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/CombinedCompilerPass.java b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
index 28b29e5..af99787 100644
--- a/src/com/google/javascript/jscomp/CombinedCompilerPass.java
+++ b/src/com/google/javascript/jscomp/CombinedCompilerPass.java
@@ -64,8 +64,9 @@
   CombinedCompilerPass(
       AbstractCompiler compiler, List<Callback> callbacks) {
     this.compiler = compiler;
-    this.callbacks = new CallbackWrapper[callbacks.size()];
-    for (int i = 0; i < callbacks.size(); i++) {
+      int size = callbacks.size();
+      this.callbacks = new CallbackWrapper[size];
+    for (int i = 0; i < size; i++) {
       this.callbacks[i] = new CallbackWrapper(callbacks.get(i));
     }
   }
