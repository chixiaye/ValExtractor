==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/ConcreteType.java b/src/com/google/javascript/jscomp/ConcreteType.java
index 7bf7593..c03dd16 100644
--- a/src/com/google/javascript/jscomp/ConcreteType.java
+++ b/src/com/google/javascript/jscomp/ConcreteType.java
@@ -503,12 +503,15 @@
           return getConstructorType().getPrototypeType();
         }
         return this;
-      } else if (getImplicitPrototype() != null) {
+      } else {
+		ConcreteInstanceType var_1769 = getImplicitPrototype();
+		if (var_1769 != null) {
         return getImplicitPrototype().getInstanceTypeWithProperty(propName);
       } else {
         return null;
       }
     }
+    }
 
     /** Returns the type representing the implicit prototype. */
     ConcreteInstanceType getImplicitPrototype() {

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/ConcreteType.java b/src/com/google/javascript/jscomp/ConcreteType.java
index 7bf7593..c8ddbd1 100644
--- a/src/com/google/javascript/jscomp/ConcreteType.java
+++ b/src/com/google/javascript/jscomp/ConcreteType.java
@@ -503,12 +503,15 @@
           return getConstructorType().getPrototypeType();
         }
         return this;
-      } else if (getImplicitPrototype() != null) {
-        return getImplicitPrototype().getInstanceTypeWithProperty(propName);
+      } else {
+		ConcreteInstanceType var_1769 = getImplicitPrototype();
+		if (var_1769 != null) {
+		    return var_1769.getInstanceTypeWithProperty(propName);
       } else {
         return null;
       }
     }
+    }
 
     /** Returns the type representing the implicit prototype. */
     ConcreteInstanceType getImplicitPrototype() {

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/ConcreteType.java b/src/com/google/javascript/jscomp/ConcreteType.java
index 7bf7593..3c7ce6e 100644
--- a/src/com/google/javascript/jscomp/ConcreteType.java
+++ b/src/com/google/javascript/jscomp/ConcreteType.java
@@ -503,12 +503,15 @@
           return getConstructorType().getPrototypeType();
         }
         return this;
-      } else if (getImplicitPrototype() != null) {
-        return getImplicitPrototype().getInstanceTypeWithProperty(propName);
+      } else {
+          ConcreteInstanceType implicitPrototype = getImplicitPrototype();
+          if (implicitPrototype != null) {
+            return implicitPrototype.getInstanceTypeWithProperty(propName);
       } else {
         return null;
       }
     }
+    }
 
     /** Returns the type representing the implicit prototype. */
     ConcreteInstanceType getImplicitPrototype() {
