==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..04a589c 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1193,7 +1193,8 @@
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          TypeCheck check = makeTypeCheck(compiler);
+          TypeCheck var_1802 = makeTypeCheck(compiler);
+		TypeCheck check = var_1802;
           check.process(externs, root);
           compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
         }

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..04a589c 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1193,7 +1193,8 @@
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          TypeCheck check = makeTypeCheck(compiler);
+          TypeCheck var_1802 = makeTypeCheck(compiler);
+		TypeCheck check = var_1802;
           check.process(externs, root);
           compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
         }

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..b16cf06 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1188,18 +1188,20 @@
     @Override
     protected HotSwapCompilerPass create(final AbstractCompiler compiler) {
       return new HotSwapCompilerPass() {
+          private final TypeCheck typeCheck = makeTypeCheck(compiler);
+
         @Override
         public void process(Node externs, Node root) {
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          TypeCheck check = makeTypeCheck(compiler);
+          TypeCheck check = typeCheck;
           check.process(externs, root);
           compiler.getErrorManager().setTypedPercent(check.getTypedPercent());
         }
         @Override
         public void hotSwapScript(Node scriptRoot, Node originalRoot) {
-          makeTypeCheck(compiler).check(scriptRoot, false);
+          typeCheck.check(scriptRoot, false);
         }
       };
     }
