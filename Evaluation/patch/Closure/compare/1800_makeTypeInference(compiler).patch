==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..7cf9703 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1152,7 +1152,8 @@
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          makeTypeInference(compiler).process(externs, root);
+          TypeInferencePass var_1800 = makeTypeInference(compiler);
+		var_1800.process(externs, root);
         }
         @Override
         public void hotSwapScript(Node scriptRoot, Node originalRoot) {

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..7cf9703 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1152,7 +1152,8 @@
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          makeTypeInference(compiler).process(externs, root);
+          TypeInferencePass var_1800 = makeTypeInference(compiler);
+		var_1800.process(externs, root);
         }
         @Override
         public void hotSwapScript(Node scriptRoot, Node originalRoot) {

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java
index a10c4dd..36899e3 100644
--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java
+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java
@@ -1147,16 +1147,18 @@
     @Override
     protected HotSwapCompilerPass create(final AbstractCompiler compiler) {
       return new HotSwapCompilerPass() {
+          private final TypeInferencePass typeInferencePass = makeTypeInference(compiler);
+
         @Override
         public void process(Node externs, Node root) {
           Preconditions.checkNotNull(topScope);
           Preconditions.checkNotNull(getTypedScopeCreator());
 
-          makeTypeInference(compiler).process(externs, root);
+          typeInferencePass.process(externs, root);
         }
         @Override
         public void hotSwapScript(Node scriptRoot, Node originalRoot) {
-          makeTypeInference(compiler).inferAllScopes(scriptRoot);
+          typeInferencePass.inferAllScopes(scriptRoot);
         }
       };
     }
