==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 7378f31..5ac1542 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -155,7 +155,8 @@
       case Token.SUB:
       case Token.DIV:
       case Token.MOD:
-        return tryFoldArithmeticOp(subtree, left, right);
+        Node var_128 = tryFoldArithmeticOp(subtree, left, right);
+		return var_128;
 
       case Token.MUL:
       case Token.BITAND:

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 7378f31..e053a1a 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -114,6 +114,7 @@
     }
 
     // If we've reached here, node is truly a binary operator.
+    Node var_128 = tryFoldArithmeticOp(subtree, left, right);
     switch(subtree.getType()) {
       case Token.GETPROP:
         return tryFoldGetProp(subtree, left, right);
@@ -155,13 +156,13 @@
       case Token.SUB:
       case Token.DIV:
       case Token.MOD:
-        return tryFoldArithmeticOp(subtree, left, right);
+        return var_128;
 
       case Token.MUL:
       case Token.BITAND:
       case Token.BITOR:
       case Token.BITXOR:
-        Node result = tryFoldArithmeticOp(subtree, left, right);
+        Node result = var_128;
         if (result != subtree) {
           return result;
         }

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 7378f31..4e13ae6 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -114,6 +114,7 @@
     }
 
     // If we've reached here, node is truly a binary operator.
+      Node node = tryFoldArithmeticOp(subtree, left, right);
     switch(subtree.getType()) {
       case Token.GETPROP:
         return tryFoldGetProp(subtree, left, right);
@@ -155,13 +156,13 @@
       case Token.SUB:
       case Token.DIV:
       case Token.MOD:
-        return tryFoldArithmeticOp(subtree, left, right);
+        return node;
 
       case Token.MUL:
       case Token.BITAND:
       case Token.BITOR:
       case Token.BITXOR:
-        Node result = tryFoldArithmeticOp(subtree, left, right);
+        Node result = node;
         if (result != subtree) {
           return result;
         }
