==> /tmp/ours.java <==
diff --git a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
index 8d33887..c03d594 100644
--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
@@ -778,7 +778,8 @@
         // non-overlapping mappings are siblings (or cousins) and must be
         // closed in the reverse order of when they encountered.
         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {
-          Mapping previous = stack.pop();
+          Mapping var_46 = stack.pop();
+		Mapping previous = var_46;
           maybeVisit(v, previous);
         }
 

==> /tmp/eclipse.java <==
diff --git a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
index 8d33887..c03d594 100644
--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
@@ -778,7 +778,8 @@
         // non-overlapping mappings are siblings (or cousins) and must be
         // closed in the reverse order of when they encountered.
         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {
-          Mapping previous = stack.pop();
+          Mapping var_46 = stack.pop();
+		Mapping previous = var_46;
           maybeVisit(v, previous);
         }
 

==> /tmp/idea.java <==
diff --git a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
index 8d33887..160c370 100644
--- a/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
+++ b/src/com/google/debugging/sourcemap/SourceMapGeneratorV2.java
@@ -772,13 +772,14 @@
       // positions give us enough information to rebuild the stack and this
       // allows the building of the source map in O(n) time.
       Deque<Mapping> stack = new ArrayDeque<Mapping>();
+        Mapping pop = stack.pop();
       for (Mapping m : mappings) {
         // Find the closest ancestor of the current mapping:
         // An overlapping mapping is an ancestor of the current mapping, any
         // non-overlapping mappings are siblings (or cousins) and must be
         // closed in the reverse order of when they encountered.
         while (!stack.isEmpty() && !isOverlapped(stack.peek(), m)) {
-          Mapping previous = stack.pop();
+          Mapping previous = pop;
           maybeVisit(v, previous);
         }
 
@@ -793,7 +794,7 @@
       // There are no more children to be had, simply close the remaining
       // mappings in the reverse order of when they encountered.
       while (!stack.isEmpty()) {
-        Mapping m = stack.pop();
+        Mapping m = pop;
         maybeVisit(v, m);
       }
     }
