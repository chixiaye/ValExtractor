==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index ae568e8..03101d6 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -1269,7 +1269,7 @@
         if (trueNodeVal == TernaryValue.TRUE
             && falseNodeVal == TernaryValue.FALSE) {
           // Remove useless conditionals, keep the condition
-          condition.detachFromParent();
+          Node var_1463 = condition.detachFromParent();
           replacement = condition;
         } else if (trueNodeVal == TernaryValue.FALSE
             && falseNodeVal == TernaryValue.TRUE) {

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index ae568e8..03101d6 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -1269,7 +1269,7 @@
         if (trueNodeVal == TernaryValue.TRUE
             && falseNodeVal == TernaryValue.FALSE) {
           // Remove useless conditionals, keep the condition
-          condition.detachFromParent();
+          Node var_1463 = condition.detachFromParent();
           replacement = condition;
         } else if (trueNodeVal == TernaryValue.FALSE
             && falseNodeVal == TernaryValue.TRUE) {

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index ae568e8..8695020 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -1266,15 +1266,16 @@
         Node replacement = null;
         TernaryValue trueNodeVal = NodeUtil.getPureBooleanValue(trueNode);
         TernaryValue falseNodeVal = NodeUtil.getPureBooleanValue(falseNode);
+          Node node = condition.detachFromParent();
         if (trueNodeVal == TernaryValue.TRUE
             && falseNodeVal == TernaryValue.FALSE) {
           // Remove useless conditionals, keep the condition
-          condition.detachFromParent();
+          node;
           replacement = condition;
         } else if (trueNodeVal == TernaryValue.FALSE
             && falseNodeVal == TernaryValue.TRUE) {
           // Remove useless conditionals, keep the condition
-          condition.detachFromParent();
+          node;
           replacement = IR.not(condition);
         } else if (trueNodeVal == TernaryValue.TRUE) {
           // Remove useless true case.
