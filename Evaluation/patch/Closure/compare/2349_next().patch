==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..7f4cea4 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1748,7 +1748,8 @@
 
       return wrapNode(Token.QMARK, parseBasicTypeExpression(token));
     } else if (token == JsDocToken.BANG) {
-      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));
+      JsDocToken var_2349 = next();
+	return wrapNode(Token.BANG, parseBasicTypeExpression(var_2349));
     } else {
       Node basicTypeExpr = parseBasicTypeExpression(token);
       if (basicTypeExpr != null) {

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..b5eb128 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1721,6 +1721,7 @@
    *     | '?'
    */
   private Node parseTypeExpression(JsDocToken token) {
+    JsDocToken var_2349 = next();
     if (token == JsDocToken.QMARK) {
       // A QMARK could mean that a type is nullable, or that it's unknown.
       // We use look-ahead 1 to determine whether it's unknown. Otherwise,
@@ -1734,7 +1735,7 @@
       // {Array.<?>} - greater than
       // I'm not a big fan of using look-ahead for this, but it makes
       // the type language a lot nicer.
-      token = next();
+      token = var_2349;
       if (token == JsDocToken.COMMA ||
           token == JsDocToken.EQUALS ||
           token == JsDocToken.RB ||
@@ -1748,7 +1749,7 @@
 
       return wrapNode(Token.QMARK, parseBasicTypeExpression(token));
     } else if (token == JsDocToken.BANG) {
-      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));
+      return wrapNode(Token.BANG, parseBasicTypeExpression(var_2349));
     } else {
       Node basicTypeExpr = parseBasicTypeExpression(token);
       if (basicTypeExpr != null) {

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index 5ef8850..b10525c 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -1721,6 +1721,7 @@
    *     | '?'
    */
   private Node parseTypeExpression(JsDocToken token) {
+      JsDocToken next = next();
     if (token == JsDocToken.QMARK) {
       // A QMARK could mean that a type is nullable, or that it's unknown.
       // We use look-ahead 1 to determine whether it's unknown. Otherwise,
@@ -1734,7 +1735,7 @@
       // {Array.<?>} - greater than
       // I'm not a big fan of using look-ahead for this, but it makes
       // the type language a lot nicer.
-      token = next();
+      token = next;
       if (token == JsDocToken.COMMA ||
           token == JsDocToken.EQUALS ||
           token == JsDocToken.RB ||
@@ -1748,15 +1749,15 @@
 
       return wrapNode(Token.QMARK, parseBasicTypeExpression(token));
     } else if (token == JsDocToken.BANG) {
-      return wrapNode(Token.BANG, parseBasicTypeExpression(next()));
+      return wrapNode(Token.BANG, parseBasicTypeExpression(next));
     } else {
       Node basicTypeExpr = parseBasicTypeExpression(token);
       if (basicTypeExpr != null) {
         if (match(JsDocToken.QMARK)) {
-          next();
+          next;
           return wrapNode(Token.QMARK, basicTypeExpr);
         } else if (match(JsDocToken.BANG)) {
-          next();
+          next;
           return wrapNode(Token.BANG, basicTypeExpr);
         }
       }
