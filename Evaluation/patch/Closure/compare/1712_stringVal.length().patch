==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index 63538e3..9eb011f 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -288,7 +288,8 @@
       }
 
       stringVal = NodeUtil.trimJsWhiteSpace(stringVal);
-      if (stringVal.length() == 0) {
+      int var_1712 = stringVal.length();
+	if (var_1712 == 0) {
         return n;
       }
     }

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index 63538e3..56d1535 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -255,6 +255,7 @@
     // stringVal must be a valid string.
     String stringVal = null;
     Double checkVal;
+    int var_1712 = stringVal.length();
     if (firstArg.isNumber()) {
       checkVal = NodeUtil.getNumberValue(firstArg);
       if (!(radix == 0 || radix == 10) && isParseInt) {
@@ -288,7 +289,7 @@
       }
 
       stringVal = NodeUtil.trimJsWhiteSpace(stringVal);
-      if (stringVal.length() == 0) {
+      if (var_1712 == 0) {
         return n;
       }
     }
@@ -299,7 +300,7 @@
       newNode = IR.number(0);
     } else if (isParseInt) {
       if (radix == 0 || radix == 16) {
-        if (stringVal.length() > 1 &&
+        if (var_1712 > 1 &&
             stringVal.substring(0, 2).equalsIgnoreCase("0x")) {
           radix = 16;
           stringVal = stringVal.substring(2);

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
index 63538e3..8841223 100644
--- a/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
+++ b/src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
@@ -255,6 +255,7 @@
     // stringVal must be a valid string.
     String stringVal = null;
     Double checkVal;
+      int length = stringVal.length();
     if (firstArg.isNumber()) {
       checkVal = NodeUtil.getNumberValue(firstArg);
       if (!(radix == 0 || radix == 10) && isParseInt) {
@@ -288,7 +289,7 @@
       }
 
       stringVal = NodeUtil.trimJsWhiteSpace(stringVal);
-      if (stringVal.length() == 0) {
+      if (length == 0) {
         return n;
       }
     }
@@ -299,7 +300,7 @@
       newNode = IR.number(0);
     } else if (isParseInt) {
       if (radix == 0 || radix == 16) {
-        if (stringVal.length() > 1 &&
+        if (length > 1 &&
             stringVal.substring(0, 2).equalsIgnoreCase("0x")) {
           radix = 16;
           stringVal = stringVal.substring(2);
