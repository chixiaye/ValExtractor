==> /tmp/ours.java <==
diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java
index 2f1ab6a..9831364 100644
--- a/src/com/google/javascript/jscomp/TightenTypes.java
+++ b/src/com/google/javascript/jscomp/TightenTypes.java
@@ -37,6 +37,7 @@
 import com.google.javascript.rhino.jstype.StaticScope;
 import com.google.javascript.rhino.jstype.StaticSlot;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -861,8 +862,9 @@
     private Collection<Action> getImplicitActionsFromCall(
         Node n, JSType recvType) {
       Node receiver = n.getFirstChild();
+      ArrayList<Action> var_1063 = Lists.newArrayList();
       if (recvType.isUnionType()) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = var_1063;
         for (JSType alt : recvType.toMaybeUnionType().getAlternates()) {
           actions.addAll(getImplicitActionsFromCall(n, alt));
         }
@@ -878,7 +880,7 @@
       if (objType != null &&
           (objType.isPropertyInExterns(prop)) &&
           (recvType.toMaybeFunctionType()).getParameters() != null) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = var_1063;
 
         // Look for a function type in the argument list.
         Iterator<Node> paramIter =

==> /tmp/eclipse.java <==
diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java
index 2f1ab6a..9831364 100644
--- a/src/com/google/javascript/jscomp/TightenTypes.java
+++ b/src/com/google/javascript/jscomp/TightenTypes.java
@@ -37,6 +37,7 @@
 import com.google.javascript.rhino.jstype.StaticScope;
 import com.google.javascript.rhino.jstype.StaticSlot;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
@@ -861,8 +862,9 @@
     private Collection<Action> getImplicitActionsFromCall(
         Node n, JSType recvType) {
       Node receiver = n.getFirstChild();
+      ArrayList<Action> var_1063 = Lists.newArrayList();
       if (recvType.isUnionType()) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = var_1063;
         for (JSType alt : recvType.toMaybeUnionType().getAlternates()) {
           actions.addAll(getImplicitActionsFromCall(n, alt));
         }
@@ -878,7 +880,7 @@
       if (objType != null &&
           (objType.isPropertyInExterns(prop)) &&
           (recvType.toMaybeFunctionType()).getParameters() != null) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = var_1063;
 
         // Look for a function type in the argument list.
         Iterator<Node> paramIter =

==> /tmp/idea.java <==
diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java
index 2f1ab6a..2eb1888 100644
--- a/src/com/google/javascript/jscomp/TightenTypes.java
+++ b/src/com/google/javascript/jscomp/TightenTypes.java
@@ -37,11 +37,7 @@
 import com.google.javascript.rhino.jstype.StaticScope;
 import com.google.javascript.rhino.jstype.StaticSlot;
 
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /**
  * Computes the set of possible concrete types for every variable, property,
@@ -861,14 +857,15 @@
     private Collection<Action> getImplicitActionsFromCall(
         Node n, JSType recvType) {
       Node receiver = n.getFirstChild();
+        ArrayList<Action> actions1 = Lists.newArrayList();
       if (recvType.isUnionType()) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = actions1;
         for (JSType alt : recvType.toMaybeUnionType().getAlternates()) {
           actions.addAll(getImplicitActionsFromCall(n, alt));
         }
         return actions;
       } else if (!(recvType.isFunctionType())) {
-        return Lists.<Action>newArrayList();
+        return actions1;
       }
 
       ObjectType objType = ObjectType.cast(
@@ -878,7 +875,7 @@
       if (objType != null &&
           (objType.isPropertyInExterns(prop)) &&
           (recvType.toMaybeFunctionType()).getParameters() != null) {
-        List<Action> actions = Lists.newArrayList();
+        List<Action> actions = actions1;
 
         // Look for a function type in the argument list.
         Iterator<Node> paramIter =
@@ -898,7 +895,7 @@
         }
         return actions;
       }
-      return Lists.<Action>newArrayList();
+      return actions1;
     }
 
     private Collection<Action> getImplicitActionsFromArgument(
