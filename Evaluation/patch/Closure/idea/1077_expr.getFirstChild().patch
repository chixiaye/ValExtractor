diff --git a/src/com/google/javascript/jscomp/TightenTypes.java b/src/com/google/javascript/jscomp/TightenTypes.java
index 2f1ab6a..e6e64f4 100644
--- a/src/com/google/javascript/jscomp/TightenTypes.java
+++ b/src/com/google/javascript/jscomp/TightenTypes.java
@@ -1054,7 +1054,8 @@
     Preconditions.checkNotNull(scope);
     Preconditions.checkNotNull(expr);
     ConcreteType ret;
-    switch (expr.getType()) {
+      Node firstChild = expr.getFirstChild();
+      switch (expr.getType()) {
       case Token.NAME:
         StaticSlot<ConcreteType> slot = scope.getSlot(expr.getString());
 
@@ -1088,18 +1089,18 @@
         break;
 
       case Token.OR:
-        ret = inferConcreteType(scope, expr.getFirstChild()).unionWith(
+        ret = inferConcreteType(scope, firstChild).unionWith(
                    inferConcreteType(scope, expr.getLastChild()));
         break;
 
       case Token.HOOK:
         ret = inferConcreteType(scope,
-                   expr.getFirstChild().getNext()).unionWith(
+                   firstChild.getNext()).unionWith(
                        inferConcreteType(scope, expr.getLastChild()));
         break;
 
       case Token.GETPROP:
-        ConcreteType recvType = inferConcreteType(scope, expr.getFirstChild());
+        ConcreteType recvType = inferConcreteType(scope, firstChild);
         if (recvType.isAll()) {
           ret = recvType;
           break;
@@ -1130,7 +1131,7 @@
         // TODO(user): Support apply on functions.
         // TODO(user): Create goog.bind that curries some arguments.
         ConcreteType targetType =
-            inferConcreteType(scope, expr.getFirstChild());
+            inferConcreteType(scope, firstChild);
         if (targetType.isAll()) {
           ret = targetType;
           break;
@@ -1143,7 +1144,7 @@
 
       case Token.NEW:
         ConcreteType constructorType =
-            inferConcreteType(scope, expr.getFirstChild());
+            inferConcreteType(scope, firstChild);
         if (constructorType.isAll()) {
           throw new AssertionError("Attempted new call on all type!");
         }
