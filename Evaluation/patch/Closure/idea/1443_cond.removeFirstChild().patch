diff --git a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
index ae568e8..dbf478e 100644
--- a/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
+++ b/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java
@@ -649,7 +649,8 @@
     Node thenBranch = cond.getNext();
     Node elseBranch = thenBranch.getNext();
 
-    if (elseBranch == null) {
+      Node expr1 = cond.removeFirstChild();
+      if (elseBranch == null) {
       if (isFoldableExpressBlock(thenBranch)) {
         Node expr = getBlockExpression(thenBranch);
         if (!late && isPropertyAssignmentInExpression(expr)) {
@@ -669,7 +670,7 @@
           }
 
           Node or = IR.or(
-              cond.removeFirstChild(),
+                  expr1,
               expr.removeFirstChild()).srcref(n);
           Node newExpr = NodeUtil.newExpr(or);
           parent.replaceChild(n, newExpr);
@@ -738,7 +739,7 @@
     // if(!x)foo();else bar(); -> if(x)bar();else foo();
     // An additional set of curly braces isn't worth it.
     if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
-      n.replaceChild(cond, cond.removeFirstChild());
+      n.replaceChild(cond, expr1);
       n.removeChild(thenBranch);
       n.addChildToBack(thenBranch);
       reportCodeChange();
