diff --git a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java
index 097cb28..7eca272 100644
--- a/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java
+++ b/src/com/google/javascript/jscomp/CheckRequiresForConstructors.java
@@ -109,10 +109,11 @@
     @Override
     public void visit(NodeTraversal t, Node n, Node parent) {
       JSDocInfo info;
-      switch (n.getType()) {
+        boolean constructor = info.isConstructor();
+        switch (n.getType()) {
         case Token.ASSIGN:
           info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);
-          if (info != null && info.isConstructor()) {
+          if (info != null && constructor) {
             String qualifiedName = n.getFirstChild().getQualifiedName();
             constructors.add(qualifiedName);
           }
@@ -122,21 +123,21 @@
             if (parent.isName()) {
               String functionName = parent.getString();
               info = (JSDocInfo) parent.getProp(Node.JSDOC_INFO_PROP);
-              if (info != null && info.isConstructor()) {
+              if (info != null && constructor) {
                 constructors.add(functionName);
               } else {
                 Node gramps = parent.getParent();
                 Preconditions.checkState(
                     gramps != null && gramps.isVar());
                 info = (JSDocInfo) gramps.getProp(Node.JSDOC_INFO_PROP);
-                if (info != null && info.isConstructor()) {
+                if (info != null && constructor) {
                   constructors.add(functionName);
                 }
               }
             }
           } else {
             info = (JSDocInfo) n.getProp(Node.JSDOC_INFO_PROP);
-            if (info != null && info.isConstructor()) {
+            if (info != null && constructor) {
               String functionName = n.getFirstChild().getString();
               constructors.add(functionName);
             }
