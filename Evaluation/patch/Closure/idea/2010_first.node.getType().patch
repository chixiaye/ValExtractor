diff --git a/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java b/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java
index 04d88ae..bf84e87 100644
--- a/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java
+++ b/src/com/google/javascript/jscomp/ExtractPrototypeMemberDeclarations.java
@@ -172,9 +172,10 @@
   private void extractInstance(ExtractionInstance instance) {
     PrototypeMemberDeclaration first = instance.declarations.getFirst();
     String className = first.qualifiedClassName;
-    if (pattern == Pattern.USE_GLOBAL_TEMP) {
+      int type = first.node.getType();
+      if (pattern == Pattern.USE_GLOBAL_TEMP) {
       // Use the temp variable to hold the prototype.
-      Node stmt = new Node(first.node.getType(),
+      Node stmt = new Node(type,
          IR.assign(
               IR.name(prototypeAlias),
               NodeUtil.newQualifiedNameNode(
@@ -196,7 +197,7 @@
                instance.parent, className + ".prototype"));
       call.putIntProp(Node.FREE_CALL, 1);
 
-      Node stmt = new Node(first.node.getType(), call);
+      Node stmt = new Node(type, call);
       stmt.copyInformationFromForTree(first.node);
       instance.parent.addChildBefore(stmt, first.node);
       for (PrototypeMemberDeclaration declar : instance.declarations) {
