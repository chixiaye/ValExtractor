diff --git a/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java b/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java
index aa25ddd..72b491c 100644
--- a/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java
+++ b/src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java
@@ -126,7 +126,8 @@
       FlowScope blindScope, boolean outcome) {
     // Check for the typeof operator.
     int operatorToken = condition.getType();
-    switch (operatorToken) {
+      Node lastChild = condition.getLastChild();
+      switch (operatorToken) {
       case Token.EQ:
       case Token.NE:
       case Token.SHEQ:
@@ -139,7 +140,7 @@
           right = condition.getFirstChild();
         } else {
           left = condition.getFirstChild();
-          right = condition.getLastChild();
+          right = lastChild;
         }
 
         Node typeOfNode = null;
@@ -170,19 +171,19 @@
       case Token.AND:
         if (outcome) {
           return caseAndOrNotShortCircuiting(condition.getFirstChild(),
-              condition.getLastChild(), blindScope, true);
+                  lastChild, blindScope, true);
         } else {
           return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),
-              condition.getLastChild(), blindScope, true);
+                  lastChild, blindScope, true);
         }
 
       case Token.OR:
         if (!outcome) {
           return caseAndOrNotShortCircuiting(condition.getFirstChild(),
-              condition.getLastChild(), blindScope, false);
+                  lastChild, blindScope, false);
         } else {
           return caseAndOrMaybeShortCircuiting(condition.getFirstChild(),
-              condition.getLastChild(), blindScope, false);
+                  lastChild, blindScope, false);
         }
 
       case Token.EQ:
@@ -239,12 +240,12 @@
 
       case Token.INSTANCEOF:
         return caseInstanceOf(
-            condition.getFirstChild(), condition.getLastChild(), blindScope,
+            condition.getFirstChild(), lastChild, blindScope,
             outcome);
 
       case Token.IN:
         if (outcome && condition.getFirstChild().isString()) {
-          return caseIn(condition.getLastChild(),
+          return caseIn(lastChild,
               condition.getFirstChild().getString(), blindScope);
         }
         break;
