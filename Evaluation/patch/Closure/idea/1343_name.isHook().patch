diff --git a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
index 171eb51..35f4063 100644
--- a/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
+++ b/src/com/google/javascript/jscomp/PureFunctionIdentifier.java
@@ -207,39 +207,42 @@
       }
 
       return result;
-    } else if (name.isOr() || name.isHook()) {
-      Node firstVal;
-      if (name.isHook()) {
-        firstVal = name.getFirstChild().getNext();
-      } else {
-        firstVal = name.getFirstChild();
-      }
-
-      Collection<Definition> defs1 = getCallableDefinitions(definitionProvider,
-                                                            firstVal);
-      Collection<Definition> defs2 = getCallableDefinitions(definitionProvider,
-                                                            firstVal.getNext());
-      if (defs1 != null && defs2 != null) {
-        defs1.addAll(defs2);
-        return defs1;
-      } else {
-        return null;
-      }
-    } else if (NodeUtil.isFunctionExpression(name)) {
-      // The anonymous function reference is also the definition.
-      // TODO(user) Change SimpleDefinitionFinder so it is possible to query for
-      // function expressions by function node.
-
-      // isExtern is false in the call to the constructor for the
-      // FunctionExpressionDefinition below because we know that
-      // getCallableDefinitions() will only be called on the first
-      // child of a call and thus the function expression
-      // definition will never be an extern.
-      return Lists.newArrayList(
-          (Definition)
-              new DefinitionsRemover.FunctionExpressionDefinition(name, false));
     } else {
-      return null;
+        boolean hook = name.isHook();
+        if (name.isOr() || hook) {
+          Node firstVal;
+          if (hook) {
+            firstVal = name.getFirstChild().getNext();
+          } else {
+            firstVal = name.getFirstChild();
+          }
+    
+          Collection<Definition> defs1 = getCallableDefinitions(definitionProvider,
+                                                                firstVal);
+          Collection<Definition> defs2 = getCallableDefinitions(definitionProvider,
+                                                                firstVal.getNext());
+          if (defs1 != null && defs2 != null) {
+            defs1.addAll(defs2);
+            return defs1;
+          } else {
+            return null;
+          }
+        } else if (NodeUtil.isFunctionExpression(name)) {
+          // The anonymous function reference is also the definition.
+          // TODO(user) Change SimpleDefinitionFinder so it is possible to query for
+          // function expressions by function node.
+    
+          // isExtern is false in the call to the constructor for the
+          // FunctionExpressionDefinition below because we know that
+          // getCallableDefinitions() will only be called on the first
+          // child of a call and thus the function expression
+          // definition will never be an extern.
+          return Lists.newArrayList(
+              (Definition)
+                  new DefinitionsRemover.FunctionExpressionDefinition(name, false));
+        } else {
+          return null;
+        }
     }
   }
 
