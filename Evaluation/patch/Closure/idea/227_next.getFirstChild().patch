diff --git a/src/com/google/javascript/jscomp/ExploitAssigns.java b/src/com/google/javascript/jscomp/ExploitAssigns.java
index 1f925ba..a27cc08 100644
--- a/src/com/google/javascript/jscomp/ExploitAssigns.java
+++ b/src/com/google/javascript/jscomp/ExploitAssigns.java
@@ -111,7 +111,8 @@
     Node parent = exprParent;
     Node next = expr.getNext();
     while (next != null) {
-      switch (next.getType()) {
+        Node firstChild = next.getFirstChild();
+        switch (next.getType()) {
         case Token.AND:
         case Token.OR:
         case Token.HOOK:
@@ -120,12 +121,12 @@
         case Token.EXPR_RESULT:
           // Dive down the left side
           parent = next;
-          next = next.getFirstChild();
+          next = firstChild;
           break;
 
         case Token.VAR:
-          if (next.getFirstChild().hasChildren()) {
-            parent = next.getFirstChild();
+          if (firstChild.hasChildren()) {
+            parent = firstChild;
             next = parent.getFirstChild();
             break;
           }
@@ -167,7 +168,7 @@
           //
           // To protect against this, we simply only inline when the left side
           // is guaranteed to evaluate to the same L-value no matter what.
-          Node leftSide = next.getFirstChild();
+          Node leftSide = firstChild;
           if (leftSide.isName() ||
               leftSide.isGetProp() &&
               leftSide.getFirstChild().isThis()) {
