diff --git a/src/com/google/javascript/jscomp/FunctionInjector.java b/src/com/google/javascript/jscomp/FunctionInjector.java
index ddfb4ed..70dfc7b 100644
--- a/src/com/google/javascript/jscomp/FunctionInjector.java
+++ b/src/com/google/javascript/jscomp/FunctionInjector.java
@@ -400,35 +400,38 @@
     if (NodeUtil.isExprCall(parent)) {
       // This is a simple call?  Example: "foo();".
       return CallSiteType.SIMPLE_CALL;
-    } else if (NodeUtil.isExprAssign(grandParent)
-        && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)
-        && parent.getFirstChild().isName()
-        && !NodeUtil.isConstantName(parent.getFirstChild())) {
-      // This is a simple assignment.  Example: "x = foo();"
-      return CallSiteType.SIMPLE_ASSIGNMENT;
-    } else if (parent.isName()
-        && !NodeUtil.isConstantName(parent)
-        && grandParent.isVar()
-        && grandParent.hasOneChild()) {
-      // This is a var declaration.  Example: "var x = foo();"
-      // TODO(johnlenz): Should we be checking for constants on the
-      // left-hand-side of the assignments and handling them as EXPRESSION?
-      return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
     } else {
-      Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);
-      if (expressionRoot != null) {
-        ExpressionDecomposer decomposer = new ExpressionDecomposer(
-            compiler, safeNameIdSupplier, knownConstants);
-        DecompositionType type = decomposer.canExposeExpression(
-            callNode);
-        if (type == DecompositionType.MOVABLE) {
-          return CallSiteType.EXPRESSION;
-        } else if (type == DecompositionType.DECOMPOSABLE) {
-          return CallSiteType.DECOMPOSABLE_EXPRESSION;
+        Node firstChild = parent.getFirstChild();
+        if (NodeUtil.isExprAssign(grandParent)
+            && !NodeUtil.isVarOrSimpleAssignLhs(callNode, parent)
+            && firstChild.isName()
+            && !NodeUtil.isConstantName(firstChild)) {
+          // This is a simple assignment.  Example: "x = foo();"
+          return CallSiteType.SIMPLE_ASSIGNMENT;
+        } else if (parent.isName()
+            && !NodeUtil.isConstantName(parent)
+            && grandParent.isVar()
+            && grandParent.hasOneChild()) {
+          // This is a var declaration.  Example: "var x = foo();"
+          // TODO(johnlenz): Should we be checking for constants on the
+          // left-hand-side of the assignments and handling them as EXPRESSION?
+          return CallSiteType.VAR_DECL_SIMPLE_ASSIGNMENT;
         } else {
-          Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);
+          Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);
+          if (expressionRoot != null) {
+            ExpressionDecomposer decomposer = new ExpressionDecomposer(
+                compiler, safeNameIdSupplier, knownConstants);
+            DecompositionType type = decomposer.canExposeExpression(
+                callNode);
+            if (type == DecompositionType.MOVABLE) {
+              return CallSiteType.EXPRESSION;
+            } else if (type == DecompositionType.DECOMPOSABLE) {
+              return CallSiteType.DECOMPOSABLE_EXPRESSION;
+            } else {
+              Preconditions.checkState(type == DecompositionType.UNDECOMPOSABLE);
+            }
+          }
         }
-      }
     }
 
     return CallSiteType.UNSUPPORTED;
