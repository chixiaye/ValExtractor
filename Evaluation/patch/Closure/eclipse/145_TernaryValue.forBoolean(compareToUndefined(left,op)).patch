diff --git a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
index 7378f31..0d512af 100644
--- a/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
+++ b/src/com/google/javascript/jscomp/PeepholeFoldConstants.java
@@ -949,7 +949,8 @@
     boolean nullRight = right.isNull();
     int lhType = getNormalizedNodeType(left);
     int rhType = getNormalizedNodeType(right);
-    switch (lhType) {
+    TernaryValue var_145 = TernaryValue.forBoolean(compareToUndefined(left, op));
+	switch (lhType) {
       case Token.VOID:
         if (!leftLiteral) {
           return TernaryValue.UNKNOWN;
@@ -967,7 +968,7 @@
       case Token.TRUE:
       case Token.FALSE:
         if (undefinedRight) {
-          return TernaryValue.forBoolean(compareToUndefined(left, op));
+          return var_145;
         }
         if (rhType != Token.TRUE &&
             rhType != Token.FALSE &&
@@ -1013,7 +1014,7 @@
 
       case Token.STRING:
         if (undefinedRight) {
-          return TernaryValue.forBoolean(compareToUndefined(left, op));
+          return var_145;
         }
         if (nullRight && isEqualityOp(op)) {
           return TernaryValue.forBoolean(compareToNull(left, op));
@@ -1036,7 +1037,7 @@
 
       case Token.NUMBER:
         if (undefinedRight) {
-          return TernaryValue.forBoolean(compareToUndefined(left, op));
+          return var_145;
         }
         if (nullRight && isEqualityOp(op)) {
           return TernaryValue.forBoolean(compareToNull(left, op));
@@ -1048,7 +1049,7 @@
 
       case Token.NAME:
         if (leftLiteral && undefinedRight) {
-          return TernaryValue.forBoolean(compareToUndefined(left, op));
+          return var_145;
         }
 
         if (rightLiteral) {
@@ -1083,7 +1084,7 @@
       case Token.NEG:
         if (leftLiteral) {
           if (undefinedRight) {
-            return TernaryValue.forBoolean(compareToUndefined(left, op));
+            return var_145;
           }
           if (nullRight && isEqualityOp(op)) {
             return TernaryValue.forBoolean(compareToNull(left, op));
@@ -1098,7 +1099,7 @@
       case Token.FUNCTION:
         if (leftLiteral) {
           if (undefinedRight) {
-            return TernaryValue.forBoolean(compareToUndefined(left, op));
+            return var_145;
           }
           if (nullRight && isEqualityOp(op)) {
             return TernaryValue.forBoolean(compareToNull(left, op));
