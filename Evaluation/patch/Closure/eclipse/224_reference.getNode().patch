diff --git a/src/com/google/javascript/jscomp/VariableReferenceCheck.java b/src/com/google/javascript/jscomp/VariableReferenceCheck.java
index c934263..4fdbc75 100644
--- a/src/com/google/javascript/jscomp/VariableReferenceCheck.java
+++ b/src/com/google/javascript/jscomp/VariableReferenceCheck.java
@@ -128,9 +128,10 @@
         BasicBlock basicBlock = reference.getBasicBlock();
         boolean isDeclaration = reference.isDeclaration();
 
-        boolean allowDupe =
+        Node var_224 = reference.getNode();
+		boolean allowDupe =
             SyntacticScopeCreator.hasDuplicateDeclarationSuppression(
-                reference.getNode(), v);
+                var_224, v);
         if (isDeclaration && !allowDupe) {
           // Look through all the declarations we've found so far, and
           // check if any of them are before this block.
@@ -140,10 +141,10 @@
               // have property StaticSourceFile attached at each node. Or
               // better yet, make sure the generated code never violates
               // the requirement to pass aggressive var check!
-              String filename = NodeUtil.getSourceName(reference.getNode());
+              String filename = NodeUtil.getSourceName(var_224);
               compiler.report(
                   JSError.make(filename,
-                      reference.getNode(),
+                      var_224,
                       checkLevel,
                       REDECLARED_VARIABLE, v.name));
               break;
@@ -156,10 +157,10 @@
           // block it is declared.
           for (BasicBlock declaredBlock : blocksWithDeclarations) {
             if (!declaredBlock.provablyExecutesBefore(basicBlock)) {
-              String filename = NodeUtil.getSourceName(reference.getNode());
+              String filename = NodeUtil.getSourceName(var_224);
               compiler.report(
                   JSError.make(filename,
-                      reference.getNode(),
+                      var_224,
                       AMBIGUOUS_FUNCTION_DECL, v.name));
               break;
             }
@@ -168,7 +169,7 @@
 
         if (!isDeclaration && !isDeclaredInScope) {
           // Don't check the order of refer in externs files.
-          if (!reference.getNode().isFromExterns()) {
+          if (!var_224.isFromExterns()) {
             // Special case to deal with var goog = goog || {}
             Node grandparent = reference.getGrandparent();
             if (grandparent.isName()
@@ -179,10 +180,10 @@
             // Only generate warnings if the scopes do not match in order
             // to deal with possible forward declarations and recursion
             if (reference.getScope() == v.scope) {
-              String filename = NodeUtil.getSourceName(reference.getNode());
+              String filename = NodeUtil.getSourceName(var_224);
               compiler.report(
                   JSError.make(filename,
-                               reference.getNode(),
+                               var_224,
                                checkLevel,
                                UNDECLARED_REFERENCE, v.name));
             }
