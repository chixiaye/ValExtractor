diff --git a/src/com/google/javascript/jscomp/CodeGenerator.java b/src/com/google/javascript/jscomp/CodeGenerator.java
index 2270c17..8ac19bb 100644
--- a/src/com/google/javascript/jscomp/CodeGenerator.java
+++ b/src/com/google/javascript/jscomp/CodeGenerator.java
@@ -144,7 +144,8 @@
 
     cc.startSourceMapping(n);
 
-    switch (type) {
+    Context var_1546 = Context.OTHER;
+	switch (type) {
       case Token.TRY: {
         Preconditions.checkState(first.getNext().isBlock() &&
                 !first.getNext().hasMoreThanOneChild());
@@ -215,7 +216,7 @@
           addIdentifier(n.getString());
           cc.addOp("=", true);
           if (first.isComma()) {
-            addExpr(first, NodeUtil.precedence(Token.ASSIGN), Context.OTHER);
+            addExpr(first, NodeUtil.precedence(Token.ASSIGN), var_1546);
           } else {
             // Add expression, consider nearby code at lowest level of
             // precedence.
@@ -238,7 +239,7 @@
 
       case Token.COMMA:
         Preconditions.checkState(childCount == 2);
-        unrollBinaryOperator(n, Token.COMMA, ",", context, Context.OTHER, 0, 0);
+        unrollBinaryOperator(n, Token.COMMA, ",", context, var_1546, 0, 0);
         break;
 
       case Token.NUMBER:
@@ -254,7 +255,7 @@
         // All of these unary operators are right-associative
         Preconditions.checkState(childCount == 1);
         cc.addOp(NodeUtil.opToStrNoFail(type), false);
-        addExpr(first, NodeUtil.precedence(type), Context.OTHER);
+        addExpr(first, NodeUtil.precedence(type), var_1546);
         break;
       }
 
@@ -268,7 +269,7 @@
           cc.addNumber(-n.getFirstChild().getDouble());
         } else {
           cc.addOp(NodeUtil.opToStrNoFail(type), false);
-          addExpr(first, NodeUtil.precedence(type), Context.OTHER);
+          addExpr(first, NodeUtil.precedence(type), var_1546);
         }
 
         break;
@@ -279,9 +280,9 @@
         int p = NodeUtil.precedence(type);
         addExpr(first, p + 1, context);
         cc.addOp("?", true);
-        addExpr(first.getNext(), 1, Context.OTHER);
+        addExpr(first.getNext(), 1, var_1546);
         cc.addOp(":", true);
-        addExpr(last, 1, Context.OTHER);
+        addExpr(last, 1, var_1546);
         break;
       }
 
@@ -439,7 +440,7 @@
       case Token.DO:
         Preconditions.checkState(childCount == 2);
         add("do");
-        addNonEmptyStatement(first, Context.OTHER, false);
+        addNonEmptyStatement(first, var_1546, false);
         add("while(");
         add(last);
         add(")");
@@ -528,7 +529,7 @@
         if (isIndirectEval(first)
             || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {
           add("(0,");
-          addExpr(first, NodeUtil.precedence(Token.COMMA), Context.OTHER);
+          addExpr(first, NodeUtil.precedence(Token.COMMA), var_1546);
           add(")");
         } else {
           addExpr(first, NodeUtil.precedence(type), context);
@@ -557,7 +558,7 @@
           addNonEmptyStatement(
               last, getContextForNonEmptyExpression(context), false);
         } else {
-          addNonEmptyStatement(first.getNext(), Context.OTHER, false);
+          addNonEmptyStatement(first.getNext(), var_1546, false);
           Preconditions.checkState(childCount == 2);
         }
 
@@ -635,7 +636,7 @@
             first, Token.CALL, NodeUtil.MATCH_NOT_FUNCTION)) {
           precedence = NodeUtil.precedence(first.getType()) + 1;
         }
-        addExpr(first, precedence, Context.OTHER);
+        addExpr(first, precedence, var_1546);
 
         // '()' is optional when no arguments are present
         Node next = first.getNext();
@@ -695,11 +696,11 @@
               if (!Double.isNaN(d)) {
                 cc.addNumber(d);
               } else {
-                addExpr(c, 1, Context.OTHER);
+                addExpr(c, 1, var_1546);
               }
             }
             add(":");
-            addExpr(c.getFirstChild(), 1, Context.OTHER);
+            addExpr(c.getFirstChild(), 1, var_1546);
           }
         }
         add("}");
