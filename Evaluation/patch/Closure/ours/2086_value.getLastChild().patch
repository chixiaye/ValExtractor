diff --git a/src/com/google/javascript/jscomp/NodeUtil.java b/src/com/google/javascript/jscomp/NodeUtil.java
index e36d1fe..c4ba41c 100644
--- a/src/com/google/javascript/jscomp/NodeUtil.java
+++ b/src/com/google/javascript/jscomp/NodeUtil.java
@@ -2922,25 +2922,26 @@
    *     outside the expression scope.
    */
   static boolean evaluatesToLocalValue(Node value, Predicate<Node> locals) {
-    switch (value.getType()) {
+    Node var_2086 = value.getLastChild();
+	switch (value.getType()) {
       case Token.CAST:
         return evaluatesToLocalValue(value.getFirstChild(), locals);
       case Token.ASSIGN:
         // A result that is aliased by a non-local name, is the effectively the
         // same as returning a non-local name, but this doesn't matter if the
         // value is immutable.
-        return NodeUtil.isImmutableValue(value.getLastChild())
+        return NodeUtil.isImmutableValue(var_2086)
             || (locals.apply(value)
-                && evaluatesToLocalValue(value.getLastChild(), locals));
+                && evaluatesToLocalValue(var_2086, locals));
       case Token.COMMA:
-        return evaluatesToLocalValue(value.getLastChild(), locals);
+        return evaluatesToLocalValue(var_2086, locals);
       case Token.AND:
       case Token.OR:
         return evaluatesToLocalValue(value.getFirstChild(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
+           && evaluatesToLocalValue(var_2086, locals);
       case Token.HOOK:
         return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)
-           && evaluatesToLocalValue(value.getLastChild(), locals);
+           && evaluatesToLocalValue(var_2086, locals);
       case Token.INC:
       case Token.DEC:
         if (value.getBooleanProp(Node.INCRDECR_PROP)) {
