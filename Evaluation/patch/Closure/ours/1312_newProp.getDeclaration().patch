diff --git a/src/com/google/javascript/jscomp/SymbolTable.java b/src/com/google/javascript/jscomp/SymbolTable.java
index 5f0a14c..4e2273b 100644
--- a/src/com/google/javascript/jscomp/SymbolTable.java
+++ b/src/com/google/javascript/jscomp/SymbolTable.java
@@ -960,7 +960,8 @@
     s.setPropertyScope(new SymbolScope(null, parentPropertyScope, type, s));
     for (String propName : propNames) {
       StaticSlot<JSType> newProp = instanceType.getSlot(propName);
-      if (newProp.getDeclaration() == null) {
+      StaticReference<JSType> var_1312 = newProp.getDeclaration();
+	if (var_1312 == null) {
         // Skip properties without declarations. We won't know how to index
         // them, because we index things by node.
         continue;
@@ -970,7 +971,7 @@
       // to build a complete index of all objects in the program. So we might
       // already have symbols for things like "Foo.bar". If this happens,
       // throw out the old symbol and use the type-based symbol.
-      Symbol oldProp = symbols.get(newProp.getDeclaration().getNode(),
+      Symbol oldProp = symbols.get(var_1312.getNode(),
           s.getName() + "." + propName);
       if (oldProp != null) {
         removeSymbol(oldProp);
@@ -980,7 +981,7 @@
       // then skip it. This should only happen if we screwed up,
       // and declared multiple distinct properties with the same name
       // at the same node. We bail out here to be safe.
-      if (symbols.get(newProp.getDeclaration().getNode(),
+      if (symbols.get(var_1312.getNode(),
               newProp.getName()) != null) {
         logger.warning("Found duplicate symbol " + newProp);
         continue;
